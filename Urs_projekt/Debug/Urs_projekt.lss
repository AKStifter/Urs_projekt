
Urs_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00002fe8  0000307c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000b4  008000b4  000030d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00003140  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000713d  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2d  00000000  00000000  0000a54d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000214e  00000000  00000000  0000b37a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b08  00000000  00000000  0000d4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e4f  00000000  00000000  0000dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000043d6  00000000  00000000  0000ee1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000131f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__ctors_end>
       4:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
       8:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
       c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      10:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      14:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      18:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      1c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      20:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      24:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      28:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      2c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      30:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      34:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      38:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      3c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      40:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      44:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      48:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      4c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_19>
      50:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      54:	7d 09       	sbc	r23, r13
      56:	8a 09       	sbc	r24, r10
      58:	97 09       	sbc	r25, r7
      5a:	a4 09       	sbc	r26, r4
      5c:	b1 09       	sbc	r27, r1
      5e:	be 09       	sbc	r27, r14
      60:	cb 09       	sbc	r28, r11
      62:	d8 09       	sbc	r29, r8
      64:	e5 09       	sbc	r30, r5
      66:	f2 09       	sbc	r31, r2
      68:	ff 09       	sbc	r31, r15
      6a:	0c 0a       	sbc	r0, r28
      6c:	19 0a       	sbc	r1, r25
      6e:	26 0a       	sbc	r2, r22
      70:	33 0a       	sbc	r3, r19
      72:	40 0a       	sbc	r4, r16
      74:	05 a8       	ldd	r0, Z+53	; 0x35
      76:	4c cd       	rjmp	.-1384   	; 0xfffffb10 <__eeprom_end+0xff7efb10>
      78:	b2 d4       	rcall	.+2404   	; 0x9de <__stack+0x57f>
      7a:	4e b9       	out	0x0e, r20	; 14
      7c:	38 36       	cpi	r19, 0x68	; 104
      7e:	a9 02       	muls	r26, r25
      80:	0c 50       	subi	r16, 0x0C	; 12
      82:	b9 91       	ld	r27, Y+
      84:	86 88       	ldd	r8, Z+22	; 0x16
      86:	08 3c       	cpi	r16, 0xC8	; 200
      88:	a6 aa       	std	Z+54, r10	; 0x36
      8a:	aa 2a       	or	r10, r26
      8c:	be 00       	.word	0x00be	; ????
      8e:	00 00       	nop
      90:	80 3f       	cpi	r24, 0xF0	; 240

00000092 <BigFont>:
      92:	10 10 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
	...
      ba:	07 00 0f 80 0f 80 0f 80 0f 80 0f 80 07 00 07 00     ................
      ca:	00 00 00 00 07 00 07 00 07 00 00 00 00 00 0e 38     ...............8
      da:	0e 38 0e 38 0e 38 06 30 00 00 00 00 00 00 00 00     .8.8.8.0........
	...
      f6:	00 00 0c 30 0c 30 0c 30 7f fe 7f fe 0c 30 0c 30     ...0.0.0.....0.0
     106:	0c 30 0c 30 7f fe 7f fe 0c 30 0c 30 0c 30 00 00     .0.0.....0.0.0..
     116:	00 00 02 40 02 40 0f f8 1f f8 1a 40 1a 40 1f f0     ...@.@.....@.@..
     126:	0f f8 02 58 02 58 1f f8 1f f0 02 40 02 40 00 00     ...X.X.....@.@..
     136:	00 00 00 00 00 00 0e 10 0e 30 0e 70 00 e0 01 c0     .........0.p....
     146:	03 80 07 00 0e 70 0c 70 08 70 00 00 00 00 00 00     .....p.p.p......
     156:	00 00 00 00 0f 00 19 80 19 80 19 80 0f 00 0f 08     ................
     166:	0f 98 19 f8 18 f0 18 e0 19 f0 0f 98 00 00 00 00     ................
     176:	00 00 00 00 07 00 07 00 07 00 0e 00 00 00 00 00     ................
	...
     19a:	00 f0 01 c0 03 80 07 00 0e 00 0e 00 0e 00 0e 00     ................
     1aa:	07 00 03 80 01 c0 00 f0 00 00 00 00 00 00 00 00     ................
     1ba:	0f 00 03 80 01 c0 00 e0 00 70 00 70 00 70 00 70     .........p.p.p.p
     1ca:	00 e0 01 c0 03 80 0f 00 00 00 00 00 00 00 00 00     ................
     1da:	01 80 11 88 09 90 07 e0 07 e0 3f fc 3f fc 07 e0     ..........?.?...
     1ea:	07 e0 09 90 11 88 01 80 00 00 00 00 00 00 00 00     ................
     1fa:	00 00 00 00 01 80 01 80 01 80 0f f0 0f f0 01 80     ................
     20a:	01 80 01 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     22a:	00 00 07 00 07 00 07 00 0e 00 00 00 00 00 00 00     ................
	...
     242:	00 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
	...
     26a:	00 00 07 00 07 00 07 00 00 00 00 00 00 00 00 00     ................
     27a:	00 02 00 06 00 0e 00 1c 00 38 00 70 00 e0 01 c0     .........8.p....
     28a:	03 80 07 00 0e 00 1c 00 00 00 00 00 00 00 00 00     ................
     29a:	0f f0 1c 38 1c 78 1c f8 1c f8 1d b8 1d b8 1f 38     ...8.x.........8
     2aa:	1f 38 1e 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     2ba:	01 80 01 80 03 80 1f 80 1f 80 03 80 03 80 03 80     ................
     2ca:	03 80 03 80 03 80 1f f0 00 00 00 00 00 00 00 00     ................
     2da:	0f e0 1c 70 1c 38 00 38 00 70 00 e0 01 c0 03 80     ...p.8.8.p......
     2ea:	07 00 0e 38 1c 38 1f f8 00 00 00 00 00 00 00 00     ...8.8..........
     2fa:	0f e0 1c 70 1c 38 00 38 00 70 03 c0 03 c0 00 70     ...p.8.8.p.....p
     30a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     31a:	00 e0 01 e0 03 e0 06 e0 0c e0 18 e0 1f f8 1f f8     ................
     32a:	00 e0 00 e0 00 e0 03 f8 00 00 00 00 00 00 00 00     ................
     33a:	1f f8 1c 00 1c 00 1c 00 1c 00 1f e0 1f f0 00 78     ...............x
     34a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     35a:	03 e0 07 00 0e 00 1c 00 1c 00 1f f0 1f f8 1c 38     ...............8
     36a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     37a:	1f fc 1c 1c 1c 1c 1c 1c 00 1c 00 38 00 70 00 e0     ...........8.p..
     38a:	01 c0 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
     39a:	0f f0 1c 38 1c 38 1c 38 1f 38 07 e0 07 e0 1c f8     ...8.8.8.8......
     3aa:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     3ba:	0f f0 1c 38 1c 38 1c 38 1c 38 1f f8 0f f8 00 38     ...8.8.8.8.....8
     3ca:	00 38 00 70 00 e0 07 c0 00 00 00 00 00 00 00 00     .8.p............
     3da:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     3ea:	03 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3fa:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     40a:	03 80 03 80 07 00 00 00 00 00 00 00 00 00 00 70     ...............p
     41a:	00 e0 01 c0 03 80 07 00 0e 00 1c 00 1c 00 0e 00     ................
     42a:	07 00 03 80 01 c0 00 e0 00 70 00 00 00 00 00 00     .........p......
     43a:	00 00 00 00 00 00 3f fc 3f fc 00 00 00 00 3f fc     ......?.?.....?.
     44a:	3f fc 00 00 00 00 00 00 00 00 00 00 00 00 1c 00     ?...............
     45a:	0e 00 07 00 03 80 01 c0 00 e0 00 70 00 70 00 e0     ...........p.p..
     46a:	01 c0 03 80 07 00 0e 00 1c 00 00 00 00 00 03 c0     ................
     47a:	0f f0 1e 78 18 38 00 38 00 70 00 e0 01 c0 01 c0     ...x.8.8.p......
     48a:	00 00 00 00 01 c0 01 c0 01 c0 00 00 00 00 0f f8     ................
     49a:	1c 1c 1c 1c 1c 1c 1c 1c 1c fc 1c fc 1c fc 1c fc     ................
     4aa:	1c 00 1c 00 1c 00 1f f0 07 f8 00 00 00 00 00 00     ................
     4ba:	03 c0 07 e0 0e 70 1c 38 1c 38 1c 38 1c 38 1f f8     .....p.8.8.8.8..
     4ca:	1c 38 1c 38 1c 38 1c 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     4da:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 38     ...8.8.8.8.....8
     4ea:	0e 38 0e 38 0e 38 1f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     4fa:	07 f0 0e 38 1c 38 1c 00 1c 00 1c 00 1c 00 1c 00     ...8.8..........
     50a:	1c 00 1c 38 0e 38 07 f0 00 00 00 00 00 00 00 00     ...8.8..........
     51a:	1f e0 0e 70 0e 38 0e 38 0e 38 0e 38 0e 38 0e 38     ...p.8.8.8.8.8.8
     52a:	0e 38 0e 38 0e 70 1f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     53a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     54a:	0e 00 0e 08 0e 18 1f f8 00 00 00 00 00 00 00 00     ................
     55a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     56a:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     57a:	07 f0 0e 38 1c 38 1c 38 1c 00 1c 00 1c 00 1c f8     ...8.8.8........
     58a:	1c 38 1c 38 0e 38 07 f8 00 00 00 00 00 00 00 00     .8.8.8..........
     59a:	1c 70 1c 70 1c 70 1c 70 1c 70 1f f0 1f f0 1c 70     .p.p.p.p.p.....p
     5aa:	1c 70 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     .p.p.p.p........
     5ba:	0f e0 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     5ca:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     5da:	01 fc 00 70 00 70 00 70 00 70 00 70 00 70 38 70     ...p.p.p.p.p.p8p
     5ea:	38 70 38 70 38 70 0f e0 00 00 00 00 00 00 00 00     8p8p8p..........
     5fa:	1e 38 0e 38 0e 70 0e e0 0f c0 0f 80 0f 80 0f c0     .8.8.p..........
     60a:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     61a:	1f 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     62a:	0e 08 0e 18 0e 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     63a:	1c 1c 1e 3c 1f 7c 1f fc 1f fc 1d dc 1c 9c 1c 1c     ...<.|..........
     64a:	1c 1c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     ................
     65a:	1c 1c 1c 1c 1e 1c 1f 1c 1f 9c 1d dc 1c fc 1c 7c     ...............|
     66a:	1c 3c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     .<..............
     67a:	03 e0 07 f0 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     .....8..........
     68a:	1c 1c 0e 38 07 f0 03 e0 00 00 00 00 00 00 00 00     ...8............
     69a:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 00     ...8.8.8.8......
     6aa:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     6ba:	03 e0 0f 78 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 7c     ...x.8.........|
     6ca:	1c fc 0f f8 0f f8 00 38 00 fc 00 00 00 00 00 00     .......8........
     6da:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 70     ...8.8.8.8.....p
     6ea:	0e 38 0e 38 0e 38 1e 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     6fa:	0f f0 1c 38 1c 38 1c 38 1c 00 0f e0 07 f0 00 38     ...8.8.8.......8
     70a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     71a:	1f fc 19 cc 11 c4 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     72a:	01 c0 01 c0 01 c0 07 f0 00 00 00 00 00 00 00 00     ................
     73a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     74a:	1c 70 1c 70 1c 70 0f e0 00 00 00 00 00 00 00 00     .p.p.p..........
     75a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     76a:	1c 70 0e e0 07 c0 03 80 00 00 00 00 00 00 00 00     .p..............
     77a:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 1c 9c     ................
     78a:	0f f8 0f f8 07 70 07 70 00 00 00 00 00 00 00 00     .....p.p........
     79a:	1c 70 1c 70 1c 70 0e e0 07 c0 03 80 03 80 07 c0     .p.p.p..........
     7aa:	0e e0 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     ...p.p.p........
     7ba:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
     7ca:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     7da:	1f f8 1c 38 18 38 10 70 00 e0 01 c0 03 80 07 00     ...8.8.p........
     7ea:	0e 08 1c 18 1c 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     7fa:	07 f0 07 00 07 00 07 00 07 00 07 00 07 00 07 00     ................
     80a:	07 00 07 00 07 00 07 f0 00 00 00 00 00 00 00 00     ................
     81a:	10 00 18 00 1c 00 0e 00 07 00 03 80 01 c0 00 e0     ................
     82a:	00 70 00 38 00 1c 00 07 00 00 00 00 00 00 00 00     .p.8............
     83a:	07 f0 00 70 00 70 00 70 00 70 00 70 00 70 00 70     ...p.p.p.p.p.p.p
     84a:	00 70 00 70 00 70 07 f0 00 00 00 00 00 00 01 80     .p.p.p..........
     85a:	03 c0 07 e0 0e 70 1c 38 00 00 00 00 00 00 00 00     .....p.8........
	...
     892:	7f ff 7f ff 00 00 00 00 1c 00 1c 00 07 00 07 00     ................
	...
     8c2:	0f e0 00 70 00 70 0f f0 1c 70 1c 70 1c 70 0f d8     ...p.p...p.p.p..
	...
     8da:	1e 00 0e 00 0e 00 0e 00 0f f0 0e 38 0e 38 0e 38     ...........8.8.8
     8ea:	0e 38 0e 38 0e 38 1b f0 00 00 00 00 00 00 00 00     .8.8.8..........
	...
     902:	0f e0 1c 70 1c 70 1c 00 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     91a:	00 f8 00 70 00 70 00 70 0f f0 1c 70 1c 70 1c 70     ...p.p.p...p.p.p
     92a:	1c 70 1c 70 1c 70 0f d8 00 00 00 00 00 00 00 00     .p.p.p..........
	...
     942:	0f e0 1c 70 1c 70 1f f0 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     95a:	03 e0 07 70 07 70 07 00 07 00 1f e0 1f e0 07 00     ...p.p..........
     96a:	07 00 07 00 07 00 1f c0 00 00 00 00 00 00 00 00     ................
	...
     982:	0f d8 1c 70 1c 70 1c 70 1c 70 0f f0 07 f0 00 70     ...p.p.p.p.....p
     992:	1c 70 0f e0 00 00 00 00 1e 00 0e 00 0e 00 0e 00     .p..............
     9a2:	0e f0 0f 38 0f 38 0e 38 0e 38 0e 38 0e 38 1e 38     ...8.8.8.8.8.8.8
	...
     9ba:	01 c0 01 c0 01 c0 00 00 0f c0 01 c0 01 c0 01 c0     ................
     9ca:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
     9da:	00 70 00 70 00 70 00 00 03 f0 00 70 00 70 00 70     .p.p.p.....p.p.p
     9ea:	00 70 00 70 00 70 1c 70 0c f0 07 e0 00 00 00 00     .p.p.p.p........
     9fa:	1e 00 0e 00 0e 00 0e 00 0e 38 0e 70 0e e0 0f c0     .........8.p....
     a0a:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     a1a:	0f c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     a2a:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
	...
     a42:	1f f8 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c     ................
	...
     a62:	1f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     ...p.p.p.p.p.p.p
	...
     a82:	0f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f e0     ...p.p.p.p.p.p..
	...
     aa2:	1b f0 0e 38 0e 38 0e 38 0e 38 0e 38 0f f0 0e 00     ...8.8.8.8.8....
     ab2:	0e 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ac2:	1f b0 38 e0 38 e0 38 e0 38 e0 38 e0 1f e0 00 e0     ..8.8.8.8.8.....
     ad2:	00 e0 01 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ae2:	1e f0 0f f8 0f 38 0e 00 0e 00 0e 00 0e 00 1f 00     .....8..........
	...
     b02:	0f e0 1c 30 1c 30 0f 80 03 e0 18 70 18 70 0f e0     ...0.0.....p.p..
	...
     b1a:	00 00 01 00 03 00 07 00 1f f0 07 00 07 00 07 00     ................
     b2a:	07 00 07 70 07 70 03 e0 00 00 00 00 00 00 00 00     ...p.p..........
	...
     b42:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f d8     .p.p.p.p.p.p.p..
	...
     b62:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
	...
     b82:	1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 0f f8 07 70 07 70     .............p.p
	...
     ba2:	1c e0 1c e0 0f c0 07 80 07 80 0f c0 1c e0 1c e0     ................
	...
     bc2:	0e 38 0e 38 0e 38 0e 38 0e 38 07 f0 03 e0 00 e0     .8.8.8.8.8......
     bd2:	01 c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     be2:	1f e0 18 e0 11 c0 03 80 07 00 0e 20 1c 60 1f e0     ........... .`..
	...
     bfa:	01 f8 03 80 03 80 03 80 07 00 1c 00 1c 00 07 00     ................
     c0a:	03 80 03 80 03 80 01 f8 00 00 00 00 00 00 01 c0     ................
     c1a:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     c2a:	01 c0 01 c0 01 c0 01 c0 01 c0 00 00 00 00 00 00     ................
     c3a:	1f 80 01 c0 01 c0 01 c0 00 e0 00 38 00 38 00 e0     ...........8.8..
     c4a:	01 c0 01 c0 01 c0 1f 80 00 00 00 00 00 00 00 00     ................
     c5a:	1f 1c 3b 9c 39 dc 38 f8 00 00 00 00 00 00 00 00     ..;.9.8.........
	...

00000c76 <__ctors_start>:
     c76:	6b 0d       	add	r22, r11

00000c78 <__ctors_end>:
     c78:	11 24       	eor	r1, r1
     c7a:	1f be       	out	0x3f, r1	; 63
     c7c:	cf e5       	ldi	r28, 0x5F	; 95
     c7e:	d4 e0       	ldi	r29, 0x04	; 4
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	cd bf       	out	0x3d, r28	; 61

00000c84 <__do_copy_data>:
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	a0 e6       	ldi	r26, 0x60	; 96
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 ee       	ldi	r30, 0xE8	; 232
     c8c:	ff e2       	ldi	r31, 0x2F	; 47
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <__do_copy_data+0x10>
     c90:	05 90       	lpm	r0, Z+
     c92:	0d 92       	st	X+, r0
     c94:	a4 3b       	cpi	r26, 0xB4	; 180
     c96:	b1 07       	cpc	r27, r17
     c98:	d9 f7       	brne	.-10     	; 0xc90 <__do_copy_data+0xc>

00000c9a <__do_clear_bss>:
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	a4 eb       	ldi	r26, 0xB4	; 180
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <.do_clear_bss_start>

00000ca2 <.do_clear_bss_loop>:
     ca2:	1d 92       	st	X+, r1

00000ca4 <.do_clear_bss_start>:
     ca4:	a1 3f       	cpi	r26, 0xF1	; 241
     ca6:	b2 07       	cpc	r27, r18
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <.do_clear_bss_loop>

00000caa <__do_global_ctors>:
     caa:	16 e0       	ldi	r17, 0x06	; 6
     cac:	cc e3       	ldi	r28, 0x3C	; 60
     cae:	d6 e0       	ldi	r29, 0x06	; 6
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <__do_global_ctors+0x10>
     cb2:	21 97       	sbiw	r28, 0x01	; 1
     cb4:	fe 01       	movw	r30, r28
     cb6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__tablejump2__>
     cba:	cb 33       	cpi	r28, 0x3B	; 59
     cbc:	d1 07       	cpc	r29, r17
     cbe:	c9 f7       	brne	.-14     	; 0xcb2 <__do_global_ctors+0x8>
     cc0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <main>
     cc4:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <_exit>

00000cc8 <__bad_interrupt>:
     cc8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ccc <fastbitmap_1bit>:
		r20:r21 fg color 
		r18:r19 bg color
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     ccc:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     cce:	ba 2f       	mov	r27, r26
	set
     cd0:	68 94       	set
	bld r26,WR_PIN
     cd2:	a6 f9       	bld	r26, 6
	clt
     cd4:	e8 94       	clt
	bld r27,WR_PIN
     cd6:	b6 f9       	bld	r27, 6
	
	movw r30, r22
     cd8:	fb 01       	movw	r30, r22

00000cda <FB1BIT_LOOP>:

FB1BIT_LOOP:

	LPM r0, Z+
     cda:	05 90       	lpm	r0, Z+

	PLOT_MONO_PIXEL r0,7
     cdc:	07 fa       	bst	r0, 7
     cde:	1e f4       	brtc	.+6      	; 0xce6 <FB1BIT_LOOP+0xc>
     ce0:	42 bb       	out	0x12, r20	; 18
     ce2:	5b bb       	out	0x1b, r21	; 27
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <FB1BIT_LOOP+0x10>
     ce6:	22 bb       	out	0x12, r18	; 18
     ce8:	3b bb       	out	0x1b, r19	; 27
     cea:	b5 bb       	out	0x15, r27	; 21
     cec:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,6
     cee:	06 fa       	bst	r0, 6
     cf0:	1e f4       	brtc	.+6      	; 0xcf8 <FB1BIT_LOOP+0x1e>
     cf2:	42 bb       	out	0x12, r20	; 18
     cf4:	5b bb       	out	0x1b, r21	; 27
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <FB1BIT_LOOP+0x22>
     cf8:	22 bb       	out	0x12, r18	; 18
     cfa:	3b bb       	out	0x1b, r19	; 27
     cfc:	b5 bb       	out	0x15, r27	; 21
     cfe:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,5
     d00:	05 fa       	bst	r0, 5
     d02:	1e f4       	brtc	.+6      	; 0xd0a <FB1BIT_LOOP+0x30>
     d04:	42 bb       	out	0x12, r20	; 18
     d06:	5b bb       	out	0x1b, r21	; 27
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <FB1BIT_LOOP+0x34>
     d0a:	22 bb       	out	0x12, r18	; 18
     d0c:	3b bb       	out	0x1b, r19	; 27
     d0e:	b5 bb       	out	0x15, r27	; 21
     d10:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,4
     d12:	04 fa       	bst	r0, 4
     d14:	1e f4       	brtc	.+6      	; 0xd1c <FB1BIT_LOOP+0x42>
     d16:	42 bb       	out	0x12, r20	; 18
     d18:	5b bb       	out	0x1b, r21	; 27
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <FB1BIT_LOOP+0x46>
     d1c:	22 bb       	out	0x12, r18	; 18
     d1e:	3b bb       	out	0x1b, r19	; 27
     d20:	b5 bb       	out	0x15, r27	; 21
     d22:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,3
     d24:	03 fa       	bst	r0, 3
     d26:	1e f4       	brtc	.+6      	; 0xd2e <FB1BIT_LOOP+0x54>
     d28:	42 bb       	out	0x12, r20	; 18
     d2a:	5b bb       	out	0x1b, r21	; 27
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <FB1BIT_LOOP+0x58>
     d2e:	22 bb       	out	0x12, r18	; 18
     d30:	3b bb       	out	0x1b, r19	; 27
     d32:	b5 bb       	out	0x15, r27	; 21
     d34:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,2
     d36:	02 fa       	bst	r0, 2
     d38:	1e f4       	brtc	.+6      	; 0xd40 <FB1BIT_LOOP+0x66>
     d3a:	42 bb       	out	0x12, r20	; 18
     d3c:	5b bb       	out	0x1b, r21	; 27
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <FB1BIT_LOOP+0x6a>
     d40:	22 bb       	out	0x12, r18	; 18
     d42:	3b bb       	out	0x1b, r19	; 27
     d44:	b5 bb       	out	0x15, r27	; 21
     d46:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,1
     d48:	01 fa       	bst	r0, 1
     d4a:	1e f4       	brtc	.+6      	; 0xd52 <FB1BIT_LOOP+0x78>
     d4c:	42 bb       	out	0x12, r20	; 18
     d4e:	5b bb       	out	0x1b, r21	; 27
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <FB1BIT_LOOP+0x7c>
     d52:	22 bb       	out	0x12, r18	; 18
     d54:	3b bb       	out	0x1b, r19	; 27
     d56:	b5 bb       	out	0x15, r27	; 21
     d58:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,0
     d5a:	00 fa       	bst	r0, 0
     d5c:	1e f4       	brtc	.+6      	; 0xd64 <FB1BIT_LOOP+0x8a>
     d5e:	42 bb       	out	0x12, r20	; 18
     d60:	5b bb       	out	0x1b, r21	; 27
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <FB1BIT_LOOP+0x8e>
     d64:	22 bb       	out	0x12, r18	; 18
     d66:	3b bb       	out	0x1b, r19	; 27
     d68:	b5 bb       	out	0x15, r27	; 21
     d6a:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
     d6c:	81 50       	subi	r24, 0x01	; 1
     d6e:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
     d70:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
     d72:	91 05       	cpc	r25, r1
	breq FB1BIT_DONE
     d74:	11 f0       	breq	.+4      	; 0xd7a <FB1BIT_DONE>
	jmp FB1BIT_LOOP
     d76:	0c 94 6d 06 	jmp	0xcda	; 0xcda <FB1BIT_LOOP>

00000d7a <FB1BIT_DONE>:


FB1BIT_DONE:

	ret;
     d7a:	08 95       	ret

00000d7c <fastbitmap_16bit>:
		r24:r25 lenght in pixels/words
		r22:r23 pointer to data
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     d7c:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     d7e:	ba 2f       	mov	r27, r26
	set
     d80:	68 94       	set
	bld r26,WR_PIN
     d82:	a6 f9       	bld	r26, 6
	clt
     d84:	e8 94       	clt
	bld r27,WR_PIN
     d86:	b6 f9       	bld	r27, 6
	
	movw r30, r22
     d88:	fb 01       	movw	r30, r22

00000d8a <FB16BIT_LOOP>:

FB16BIT_LOOP:

	
	LPM r0, Z+	
     d8a:	05 90       	lpm	r0, Z+
	out DPHIO, r0	
     d8c:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+	
     d8e:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     d90:	02 ba       	out	0x12, r0	; 18

	TOGGLE_WR_FAST r27,r26	// place a pixel!
     d92:	b5 bb       	out	0x15, r27	; 21
     d94:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
     d96:	81 50       	subi	r24, 0x01	; 1
     d98:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
     d9a:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
     d9c:	91 05       	cpc	r25, r1
	breq FB16BIT_DONE
     d9e:	11 f0       	breq	.+4      	; 0xda4 <FB16BIT_DONE>
	jmp FB16BIT_LOOP
     da0:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <FB16BIT_LOOP>

00000da4 <FB16BIT_DONE>:


FB16BIT_DONE:

	ret;
     da4:	08 95       	ret

00000da6 <fastbitmap_pb565>:
		r24:r25 data
		
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     da6:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     da8:	ba 2f       	mov	r27, r26
	set
     daa:	68 94       	set
	bld r26,WR_PIN
     dac:	a6 f9       	bld	r26, 6
	clt
     dae:	e8 94       	clt
	bld r27,WR_PIN
     db0:	b6 f9       	bld	r27, 6
	
	movw r30, r24
     db2:	fc 01       	movw	r30, r24

	clr r1
     db4:	11 24       	eor	r1, r1

00000db6 <PB565BIT_LOOP>:

PB565BIT_LOOP:
	
	LPM r18, Z+	
     db6:	25 91       	lpm	r18, Z+
	cpi r18,0
     db8:	20 30       	cpi	r18, 0x00	; 0
	breq PB565BIT_DONE
     dba:	a9 f0       	breq	.+42     	; 0xde6 <PB565BIT_DONE>
	
	bst r18,7
     dbc:	27 fb       	bst	r18, 7
	brtc PB565PLAIN
     dbe:	56 f4       	brtc	.+20     	; 0xdd4 <PB565PLAIN>
	
	// compressed loop.
	andi r18,0x7F
     dc0:	2f 77       	andi	r18, 0x7F	; 127
	LPM r0, Z+
     dc2:	05 90       	lpm	r0, Z+
	out DPHIO, r0
     dc4:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
     dc6:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     dc8:	02 ba       	out	0x12, r0	; 18

00000dca <PB565COMPRESSED>:
	

PB565COMPRESSED:
	TOGGLE_WR_FAST r27,r26
     dca:	b5 bb       	out	0x15, r27	; 21
     dcc:	a5 bb       	out	0x15, r26	; 21
	dec r18
     dce:	2a 95       	dec	r18
	brne PB565COMPRESSED
     dd0:	e1 f7       	brne	.-8      	; 0xdca <PB565COMPRESSED>
	rjmp PB565BIT_LOOP
     dd2:	f1 cf       	rjmp	.-30     	; 0xdb6 <PB565BIT_LOOP>

00000dd4 <PB565PLAIN>:


PB565PLAIN:

	LPM r0, Z+
     dd4:	05 90       	lpm	r0, Z+
	out DPHIO, r0
     dd6:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
     dd8:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     dda:	02 ba       	out	0x12, r0	; 18
	TOGGLE_WR_FAST r27,r26
     ddc:	b5 bb       	out	0x15, r27	; 21
     dde:	a5 bb       	out	0x15, r26	; 21
	dec r18
     de0:	2a 95       	dec	r18
	brne PB565PLAIN
     de2:	c1 f7       	brne	.-16     	; 0xdd4 <PB565PLAIN>
	rjmp PB565BIT_LOOP
     de4:	e8 cf       	rjmp	.-48     	; 0xdb6 <PB565BIT_LOOP>

00000de6 <PB565BIT_DONE>:




PB565BIT_DONE:
	clr r0
     de6:	00 24       	eor	r0, r0
     de8:	08 95       	ret

00000dea <fastfill>:
// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill:

	clr r18
     dea:	22 27       	eor	r18, r18

	// devide by 2
	// no need for register 25 it has no bits we care about.
	lsr r24
     dec:	86 95       	lsr	r24
	ror r23
     dee:	77 95       	ror	r23
	ror r22
     df0:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     df2:	27 95       	ror	r18

	// devide by 4
	// no need for register 24, it had a max of 1 bit we care about.
	lsr r23
     df4:	76 95       	lsr	r23
	ror r22
     df6:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     df8:	27 95       	ror	r18

	// devide by 8
	//lsr r24
	lsr r23
     dfa:	76 95       	lsr	r23
	ror r22
     dfc:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     dfe:	27 95       	ror	r18

	// devide by 16		
	// lsr r24
	lsr r23
     e00:	76 95       	lsr	r23
	ror r22
     e02:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     e04:	27 95       	ror	r18

	// finish rolling a full 8 bits aka swap nibbles
	swap r18
     e06:	22 95       	swap	r18

	movw r24, r22
     e08:	cb 01       	movw	r24, r22

00000e0a <fastfill2>:
// r24 + r25 hold 16 bit unsigned number of 16xloops.
// r18 holds 8 bit unsigned numner of single loops
fastfill2:

	// prepare the out port registers
	in r30, _SFR_IO_ADDR(WR_PORT)
     e0a:	e5 b3       	in	r30, 0x15	; 21
	mov r31, r30
     e0c:	fe 2f       	mov	r31, r30
	set
     e0e:	68 94       	set
	bld r30,WR_PIN
     e10:	e6 f9       	bld	r30, 6
	clt
     e12:	e8 94       	clt
	bld r31,WR_PIN
     e14:	f6 f9       	bld	r31, 6

	sbiw r24,0 // subtract zero and test if zero	
     e16:	00 97       	sbiw	r24, 0x00	; 0
	breq exitloop16
     e18:	11 f1       	breq	.+68     	; 0xe5e <exitloop16>

00000e1a <loop16>:
loop16:
		
	TOGGLE_WR_FAST r31,r30
     e1a:	f5 bb       	out	0x15, r31	; 21
     e1c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e1e:	f5 bb       	out	0x15, r31	; 21
     e20:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e22:	f5 bb       	out	0x15, r31	; 21
     e24:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e26:	f5 bb       	out	0x15, r31	; 21
     e28:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e2a:	f5 bb       	out	0x15, r31	; 21
     e2c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e2e:	f5 bb       	out	0x15, r31	; 21
     e30:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e32:	f5 bb       	out	0x15, r31	; 21
     e34:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e36:	f5 bb       	out	0x15, r31	; 21
     e38:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e3a:	f5 bb       	out	0x15, r31	; 21
     e3c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e3e:	f5 bb       	out	0x15, r31	; 21
     e40:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e42:	f5 bb       	out	0x15, r31	; 21
     e44:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e46:	f5 bb       	out	0x15, r31	; 21
     e48:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e4a:	f5 bb       	out	0x15, r31	; 21
     e4c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e4e:	f5 bb       	out	0x15, r31	; 21
     e50:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e52:	f5 bb       	out	0x15, r31	; 21
     e54:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e56:	f5 bb       	out	0x15, r31	; 21
     e58:	e5 bb       	out	0x15, r30	; 21

	sbiw r24,1	
     e5a:	01 97       	sbiw	r24, 0x01	; 1
	brne loop16
     e5c:	f1 f6       	brne	.-68     	; 0xe1a <loop16>

00000e5e <exitloop16>:

exitloop16:

	cpi r18,0
     e5e:	20 30       	cpi	r18, 0x00	; 0
	breq exitsingleloop
     e60:	21 f0       	breq	.+8      	; 0xe6a <exitsingleloop>

00000e62 <singleloop>:
singleloop:			
	TOGGLE_WR_FAST r31,r30
     e62:	f5 bb       	out	0x15, r31	; 21
     e64:	e5 bb       	out	0x15, r30	; 21
	dec r18
     e66:	2a 95       	dec	r18
	brne singleloop
     e68:	e1 f7       	brne	.-8      	; 0xe62 <singleloop>

00000e6a <exitsingleloop>:

exitsingleloop:
	ret 
     e6a:	08 95       	ret

00000e6c <fastfill3>:

// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill3:
	TOGGLE_WR
     e6c:	ae 98       	cbi	0x15, 6	; 21
     e6e:	ae 9a       	sbi	0x15, 6	; 21
	SUB32 r22,r23,r24,r25,1
     e70:	61 50       	subi	r22, 0x01	; 1
     e72:	70 40       	sbci	r23, 0x00	; 0
     e74:	80 40       	sbci	r24, 0x00	; 0
     e76:	90 40       	sbci	r25, 0x00	; 0
	brne fastfill3
     e78:	c9 f7       	brne	.-14     	; 0xe6c <fastfill3>

     e7a:	08 95       	ret

00000e7c <LCD_Write_COM>:
#include "as_macros.h"


.global LCD_Write_COM
LCD_Write_COM:
	BUS_START_REG
     e7c:	af 98       	cbi	0x15, 7	; 21
	clr r1
     e7e:	11 24       	eor	r1, r1
	out DPLIO, r24
     e80:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     e82:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     e84:	ae 98       	cbi	0x15, 6	; 21
     e86:	ae 9a       	sbi	0x15, 6	; 21
	ret
     e88:	08 95       	ret

00000e8a <LCD_Write_DATA>:

.global LCD_Write_DATA
LCD_Write_DATA:
	BUS_START_DATA	
     e8a:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
     e8c:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r24
     e8e:	8b bb       	out	0x1b, r24	; 27
	TOGGLE_WR
     e90:	ae 98       	cbi	0x15, 6	; 21
     e92:	ae 9a       	sbi	0x15, 6	; 21
	ret
     e94:	08 95       	ret

00000e96 <LCD_Write_DATA2>:

.global LCD_Write_DATA2
LCD_Write_DATA2:
	BUS_START_DATA	
     e96:	af 9a       	sbi	0x15, 7	; 21
	clr r1
     e98:	11 24       	eor	r1, r1
	out DPLIO, r24
     e9a:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     e9c:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     e9e:	ae 98       	cbi	0x15, 6	; 21
     ea0:	ae 9a       	sbi	0x15, 6	; 21
	ret
     ea2:	08 95       	ret

00000ea4 <LCD_Write_COM_DATA>:


.global LCD_Write_COM_DATA
LCD_Write_COM_DATA:
	
	BUS_START_REG
     ea4:	af 98       	cbi	0x15, 7	; 21
	clr r1
     ea6:	11 24       	eor	r1, r1
	out DPLIO, r24
     ea8:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     eaa:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     eac:	ae 98       	cbi	0x15, 6	; 21
     eae:	ae 9a       	sbi	0x15, 6	; 21

	BUS_START_DATA	
     eb0:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
     eb2:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r23
     eb4:	7b bb       	out	0x1b, r23	; 27
	TOGGLE_WR
     eb6:	ae 98       	cbi	0x15, 6	; 21
     eb8:	ae 9a       	sbi	0x15, 6	; 21

	ret
     eba:	08 95       	ret

00000ebc <LCD_Writ_Bus>:


.global LCD_Writ_Bus
	LCD_Writ_Bus:

	out DPHIO, r24
     ebc:	8b bb       	out	0x1b, r24	; 27
	out DPLIO, r22
     ebe:	62 bb       	out	0x12, r22	; 18
	TOGGLE_WR
     ec0:	ae 98       	cbi	0x15, 6	; 21
     ec2:	ae 9a       	sbi	0x15, 6	; 21

     ec4:	08 95       	ret

00000ec6 <_Z41__static_initialization_and_destruction_0ii>:
		//if (bestMoves < 255) display.printNumI(bestMoves, 240, 60); // prikazi samo ako postoji high score
		display.print("Tap to start", CENTER, 120);
		
		memoryGame();
	}
}
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	39 f4       	brne	.+14     	; 0xed8 <_Z41__static_initialization_and_destruction_0ii+0x12>
     eca:	6f 3f       	cpi	r22, 0xFF	; 255
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	21 f4       	brne	.+8      	; 0xed8 <_Z41__static_initialization_and_destruction_0ii+0x12>
#define Y2_1 56
#define Y2_2 117
#define Y2_3 178
#define Y2_4 239

UTFT display;
     ed0:	8e ed       	ldi	r24, 0xDE	; 222
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN4UTFTC1Ev>
     ed8:	08 95       	ret

00000eda <_Z7Touchedv>:

bool Touched() {
	// PINB3(T-IRQ) nizak pri dodiru
	if (bit_is_clear(PINB, T_IRQ)){
     eda:	b3 99       	sbic	0x16, 3	; 22
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_Z7Touchedv+0x8>
		return true;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret
		} else {
		return false;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ee4:	08 95       	ret

00000ee6 <_Z4getXv>:

uint16_t getX() {
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
	SPI_Write(0X90);
     eee:	80 e9       	ldi	r24, 0x90	; 144
     ef0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <SPI_Write>
	float x = SPI_Read() / 120.0 * 320 - 15;
     ef4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SPI_Read>
     ef8:	68 2f       	mov	r22, r24
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 ef       	ldi	r20, 0xF0	; 240
     f0a:	52 e4       	ldi	r21, 0x42	; 66
     f0c:	0e 94 c6 14 	call	0x298c	; 0x298c <__divsf3>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 ea       	ldi	r20, 0xA0	; 160
     f16:	53 e4       	ldi	r21, 0x43	; 67
     f18:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e7       	ldi	r20, 0x70	; 112
     f22:	51 e4       	ldi	r21, 0x41	; 65
     f24:	0e 94 4f 14 	call	0x289e	; 0x289e <__subsf3>
     f28:	6b 01       	movw	r12, r22
     f2a:	7c 01       	movw	r14, r24
	SPI_Write(0);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	97 e4       	ldi	r25, 0x47	; 71
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <_Z4getXv+0x50>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <_Z4getXv+0x56>
     f3c:	00 00       	nop
	_delay_ms(10);
	return (uint16_t) x;
     f3e:	c7 01       	movw	r24, r14
     f40:	b6 01       	movw	r22, r12
     f42:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__fixunssfsi>
}
     f46:	cb 01       	movw	r24, r22
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	08 95       	ret

00000f52 <_Z4getYv>:

uint16_t getY() {
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
	float y = 0;
     f5a:	c1 2c       	mov	r12, r1
     f5c:	d1 2c       	mov	r13, r1
     f5e:	76 01       	movw	r14, r12
	while(y <= 0 ){
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	a9 01       	movw	r20, r18
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	0e 94 bc 14 	call	0x2978	; 0x2978 <__cmpsf2>
     f6e:	18 16       	cp	r1, r24
     f70:	ec f0       	brlt	.+58     	; 0xfac <_Z4getYv+0x5a>
		SPI_Write(0XD0);
     f72:	80 ed       	ldi	r24, 0xD0	; 208
     f74:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <SPI_Write>
		y = SPI_Read() / 120.0 * 240;
     f78:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <SPI_Read>
     f7c:	68 2f       	mov	r22, r24
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 ef       	ldi	r20, 0xF0	; 240
     f8e:	52 e4       	ldi	r21, 0x42	; 66
     f90:	0e 94 c6 14 	call	0x298c	; 0x298c <__divsf3>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e7       	ldi	r20, 0x70	; 112
     f9a:	53 e4       	ldi	r21, 0x43	; 67
     f9c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
     fa0:	6b 01       	movw	r12, r22
     fa2:	7c 01       	movw	r14, r24
		SPI_Write(0);
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <SPI_Write>
	return (uint16_t) x;
}

uint16_t getY() {
	float y = 0;
	while(y <= 0 ){
     faa:	da cf       	rjmp	.-76     	; 0xf60 <_Z4getYv+0xe>
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	97 e4       	ldi	r25, 0x47	; 71
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <_Z4getYv+0x5e>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <_Z4getYv+0x64>
     fb6:	00 00       	nop
		SPI_Write(0XD0);
		y = SPI_Read() / 120.0 * 240;
		SPI_Write(0);
	}
	_delay_ms(10);
	return (uint16_t) y;
     fb8:	c7 01       	movw	r24, r14
     fba:	b6 01       	movw	r22, r12
     fbc:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__fixunssfsi>
}
     fc0:	cb 01       	movw	r24, r22
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	08 95       	ret

00000fcc <_Z9printTimev>:
bool started = 0;                         // ako nismo u igri koristi se za inicijalizaciju, ali i pauzira timer
uint8_t roundCounter = 0;                 // brojac koliko krugova igre smo odigrali                         TODO - resetira se kad se ide na glavni ekran (back button?)        
//uint8_t roundStreak = 0;                // TODO - povecava se prije reseta roundCountera, brise se s highscores reset


void printTime() {
     fcc:	cf 92       	push	r12
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
	display.printNumI(currentTime[0], 0, 120);
     fda:	c6 eb       	ldi	r28, 0xB6	; 182
     fdc:	d0 e0       	ldi	r29, 0x00	; 0
     fde:	48 81       	ld	r20, Y
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	68 94       	set
     fe8:	cc 24       	eor	r12, r12
     fea:	c5 f8       	bld	r12, 5
     fec:	e1 2c       	mov	r14, r1
     fee:	f1 2c       	mov	r15, r1
     ff0:	08 e7       	ldi	r16, 0x78	; 120
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8e ed       	ldi	r24, 0xDE	; 222
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	display.print("m", 30, 120);
    1000:	00 e0       	ldi	r16, 0x00	; 0
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	28 e7       	ldi	r18, 0x78	; 120
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4e e1       	ldi	r20, 0x1E	; 30
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	68 e6       	ldi	r22, 0x68	; 104
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	8e ed       	ldi	r24, 0xDE	; 222
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(currentTime[1], 0, 140);
    1018:	49 81       	ldd	r20, Y+1	; 0x01
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	0c e8       	ldi	r16, 0x8C	; 140
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8e ed       	ldi	r24, 0xDE	; 222
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	display.print("s", 30, 140);
    1030:	00 e0       	ldi	r16, 0x00	; 0
    1032:	10 e0       	ldi	r17, 0x00	; 0
    1034:	2c e8       	ldi	r18, 0x8C	; 140
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4e e1       	ldi	r20, 0x1E	; 30
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	6a e6       	ldi	r22, 0x6A	; 106
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	8e ed       	ldi	r24, 0xDE	; 222
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	cf 90       	pop	r12
    1056:	08 95       	ret

00001058 <__vector_19>:

// broji stotinke, sekunde i minute provedene u igri
ISR(TIMER0_COMP_vect) {
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	2f 93       	push	r18
    1064:	3f 93       	push	r19
    1066:	4f 93       	push	r20
    1068:	5f 93       	push	r21
    106a:	6f 93       	push	r22
    106c:	7f 93       	push	r23
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	ef 93       	push	r30
    1078:	ff 93       	push	r31
	if (started) {  //osigurava da se ne broji dok ne igramo
    107a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <started>
    107e:	88 23       	and	r24, r24
    1080:	c9 f0       	breq	.+50     	; 0x10b4 <__vector_19+0x5c>
		currentTime[2]++;
    1082:	e6 eb       	ldi	r30, 0xB6	; 182
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	82 83       	std	Z+2, r24	; 0x02

		if (currentTime[2] == 100) {
    108c:	84 36       	cpi	r24, 0x64	; 100
    108e:	91 f4       	brne	.+36     	; 0x10b4 <__vector_19+0x5c>
			currentTime[2] = 0;
    1090:	12 82       	std	Z+2, r1	; 0x02

			currentTime[1]++; 
    1092:	81 81       	ldd	r24, Z+1	; 0x01
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	81 83       	std	Z+1, r24	; 0x01
			if (currentTime[1] == 60) {
    1098:	8c 33       	cpi	r24, 0x3C	; 60
    109a:	21 f4       	brne	.+8      	; 0x10a4 <__vector_19+0x4c>
				currentTime[1] = 0;
    109c:	11 82       	std	Z+1, r1	; 0x01
				currentTime[0]++;
    109e:	80 81       	ld	r24, Z
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	80 83       	st	Z, r24
			}
			if (currentTime[0] == 60) {
    10a4:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <currentTime>
    10a8:	8c 33       	cpi	r24, 0x3C	; 60
    10aa:	11 f4       	brne	.+4      	; 0x10b0 <__vector_19+0x58>
				currentTime[0] = 0;
    10ac:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <currentTime>
			}
			printTime();
    10b0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <_Z9printTimev>
		}
	}
}
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <_Z9fillBoardv>:

// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
    10d6:	cf 93       	push	r28
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
    10d8:	c0 e0       	ldi	r28, 0x00	; 0
    10da:	c0 31       	cpi	r28, 0x10	; 16
    10dc:	08 f5       	brcc	.+66     	; 0x1120 <_Z9fillBoardv+0x4a>
		index = rand() % 16;
    10de:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <rand>
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	90 78       	andi	r25, 0x80	; 128
    10e6:	99 23       	and	r25, r25
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <_Z9fillBoardv+0x20>
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	80 6f       	ori	r24, 0xF0	; 240
    10ee:	9f 6f       	ori	r25, 0xFF	; 255
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <_Z9fillBoardv+0x20>
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
			index++;
			if (index > 15) {
				index = 0;
    10f4:	80 e0       	ldi	r24, 0x00	; 0
// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
		index = rand() % 16;
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	e2 53       	subi	r30, 0x32	; 50
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	90 81       	ld	r25, Z
    1102:	99 23       	and	r25, r25
    1104:	21 f0       	breq	.+8      	; 0x110e <_Z9fillBoardv+0x38>
			index++;
    1106:	8f 5f       	subi	r24, 0xFF	; 255
			if (index > 15) {
    1108:	80 31       	cpi	r24, 0x10	; 16
    110a:	a8 f3       	brcs	.-22     	; 0x10f6 <_Z9fillBoardv+0x20>
    110c:	f3 cf       	rjmp	.-26     	; 0x10f4 <_Z9fillBoardv+0x1e>
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
    110e:	f9 01       	movw	r30, r18
    1110:	e2 53       	subi	r30, 0x32	; 50
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	8c 2f       	mov	r24, r28
    1116:	87 70       	andi	r24, 0x07	; 7
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	80 83       	st	Z, r24
}

// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
    111c:	cf 5f       	subi	r28, 0xFF	; 255
    111e:	dd cf       	rjmp	.-70     	; 0x10da <_Z9fillBoardv+0x4>
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
	}
}
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <_Z14memoryGetInputv>:

// vraca indeks + 1 karte na koju smo kliknuli, 0 je za kad kliknemo izvan ploce
uint8_t memoryGetInput() {
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
	while(!Touched());
    1128:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z7Touchedv>
    112c:	88 23       	and	r24, r24
    112e:	e1 f3       	breq	.-8      	; 0x1128 <_Z14memoryGetInputv+0x4>
	uint16_t x = getX();
    1130:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z4getXv>
    1134:	ec 01       	movw	r28, r24
	uint16_t y = getY();
    1136:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z4getYv>
	
	     if ((x > X1_1) && (x < X2_1) && (y > Y1_1) && (y < Y2_1)) return 1;
    113a:	9e 01       	movw	r18, r28
    113c:	20 55       	subi	r18, 0x50	; 80
    113e:	31 09       	sbc	r19, r1
    1140:	27 33       	cpi	r18, 0x37	; 55
    1142:	31 05       	cpc	r19, r1
    1144:	30 f4       	brcc	.+12     	; 0x1152 <_Z14memoryGetInputv+0x2e>
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	21 f0       	breq	.+8      	; 0x1152 <_Z14memoryGetInputv+0x2e>
    114a:	88 33       	cpi	r24, 0x38	; 56
    114c:	91 05       	cpc	r25, r1
    114e:	08 f4       	brcc	.+2      	; 0x1152 <_Z14memoryGetInputv+0x2e>
    1150:	97 c0       	rjmp	.+302    	; 0x1280 <_Z14memoryGetInputv+0x15c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_1) && (y < Y2_1)) return 2;
    1152:	ae 01       	movw	r20, r28
    1154:	4d 58       	subi	r20, 0x8D	; 141
    1156:	51 09       	sbc	r21, r1
    1158:	47 33       	cpi	r20, 0x37	; 55
    115a:	51 05       	cpc	r21, r1
    115c:	30 f4       	brcc	.+12     	; 0x116a <_Z14memoryGetInputv+0x46>
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	21 f0       	breq	.+8      	; 0x116a <_Z14memoryGetInputv+0x46>
    1162:	88 33       	cpi	r24, 0x38	; 56
    1164:	91 05       	cpc	r25, r1
    1166:	08 f4       	brcc	.+2      	; 0x116a <_Z14memoryGetInputv+0x46>
    1168:	8d c0       	rjmp	.+282    	; 0x1284 <_Z14memoryGetInputv+0x160>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_1) && (y < Y2_1)) return 3;
    116a:	be 01       	movw	r22, r28
    116c:	6a 5c       	subi	r22, 0xCA	; 202
    116e:	71 09       	sbc	r23, r1
    1170:	67 33       	cpi	r22, 0x37	; 55
    1172:	71 05       	cpc	r23, r1
    1174:	30 f4       	brcc	.+12     	; 0x1182 <_Z14memoryGetInputv+0x5e>
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	21 f0       	breq	.+8      	; 0x1182 <_Z14memoryGetInputv+0x5e>
    117a:	88 33       	cpi	r24, 0x38	; 56
    117c:	91 05       	cpc	r25, r1
    117e:	08 f4       	brcc	.+2      	; 0x1182 <_Z14memoryGetInputv+0x5e>
    1180:	83 c0       	rjmp	.+262    	; 0x1288 <_Z14memoryGetInputv+0x164>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_1) && (y < Y2_1)) return 4;
    1182:	c7 50       	subi	r28, 0x07	; 7
    1184:	d1 40       	sbci	r29, 0x01	; 1
    1186:	c7 33       	cpi	r28, 0x37	; 55
    1188:	d1 05       	cpc	r29, r1
    118a:	30 f4       	brcc	.+12     	; 0x1198 <_Z14memoryGetInputv+0x74>
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	21 f0       	breq	.+8      	; 0x1198 <_Z14memoryGetInputv+0x74>
    1190:	88 33       	cpi	r24, 0x38	; 56
    1192:	91 05       	cpc	r25, r1
    1194:	08 f4       	brcc	.+2      	; 0x1198 <_Z14memoryGetInputv+0x74>
    1196:	7a c0       	rjmp	.+244    	; 0x128c <_Z14memoryGetInputv+0x168>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_2) && (y < Y2_2)) return 5;
    1198:	27 33       	cpi	r18, 0x37	; 55
    119a:	31 05       	cpc	r19, r1
    119c:	38 f4       	brcc	.+14     	; 0x11ac <_Z14memoryGetInputv+0x88>
    119e:	8e 33       	cpi	r24, 0x3E	; 62
    11a0:	91 05       	cpc	r25, r1
    11a2:	20 f0       	brcs	.+8      	; 0x11ac <_Z14memoryGetInputv+0x88>
    11a4:	85 37       	cpi	r24, 0x75	; 117
    11a6:	91 05       	cpc	r25, r1
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <_Z14memoryGetInputv+0x88>
    11aa:	72 c0       	rjmp	.+228    	; 0x1290 <_Z14memoryGetInputv+0x16c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_2) && (y < Y2_2)) return 6;
    11ac:	47 33       	cpi	r20, 0x37	; 55
    11ae:	51 05       	cpc	r21, r1
    11b0:	38 f4       	brcc	.+14     	; 0x11c0 <_Z14memoryGetInputv+0x9c>
    11b2:	8e 33       	cpi	r24, 0x3E	; 62
    11b4:	91 05       	cpc	r25, r1
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <_Z14memoryGetInputv+0x9c>
    11b8:	85 37       	cpi	r24, 0x75	; 117
    11ba:	91 05       	cpc	r25, r1
    11bc:	08 f4       	brcc	.+2      	; 0x11c0 <_Z14memoryGetInputv+0x9c>
    11be:	6a c0       	rjmp	.+212    	; 0x1294 <_Z14memoryGetInputv+0x170>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_2) && (y < Y2_2)) return 7;
    11c0:	67 33       	cpi	r22, 0x37	; 55
    11c2:	71 05       	cpc	r23, r1
    11c4:	38 f4       	brcc	.+14     	; 0x11d4 <_Z14memoryGetInputv+0xb0>
    11c6:	8e 33       	cpi	r24, 0x3E	; 62
    11c8:	91 05       	cpc	r25, r1
    11ca:	20 f0       	brcs	.+8      	; 0x11d4 <_Z14memoryGetInputv+0xb0>
    11cc:	85 37       	cpi	r24, 0x75	; 117
    11ce:	91 05       	cpc	r25, r1
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <_Z14memoryGetInputv+0xb0>
    11d2:	62 c0       	rjmp	.+196    	; 0x1298 <_Z14memoryGetInputv+0x174>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_2) && (y < Y2_2)) return 8;
    11d4:	c7 33       	cpi	r28, 0x37	; 55
    11d6:	d1 05       	cpc	r29, r1
    11d8:	38 f4       	brcc	.+14     	; 0x11e8 <_Z14memoryGetInputv+0xc4>
    11da:	8e 33       	cpi	r24, 0x3E	; 62
    11dc:	91 05       	cpc	r25, r1
    11de:	20 f0       	brcs	.+8      	; 0x11e8 <_Z14memoryGetInputv+0xc4>
    11e0:	85 37       	cpi	r24, 0x75	; 117
    11e2:	91 05       	cpc	r25, r1
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <_Z14memoryGetInputv+0xc4>
    11e6:	5a c0       	rjmp	.+180    	; 0x129c <_Z14memoryGetInputv+0x178>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_3) && (y < Y2_3)) return 9;
    11e8:	27 33       	cpi	r18, 0x37	; 55
    11ea:	31 05       	cpc	r19, r1
    11ec:	38 f4       	brcc	.+14     	; 0x11fc <_Z14memoryGetInputv+0xd8>
    11ee:	8b 37       	cpi	r24, 0x7B	; 123
    11f0:	91 05       	cpc	r25, r1
    11f2:	20 f0       	brcs	.+8      	; 0x11fc <_Z14memoryGetInputv+0xd8>
    11f4:	82 3b       	cpi	r24, 0xB2	; 178
    11f6:	91 05       	cpc	r25, r1
    11f8:	08 f4       	brcc	.+2      	; 0x11fc <_Z14memoryGetInputv+0xd8>
    11fa:	52 c0       	rjmp	.+164    	; 0x12a0 <_Z14memoryGetInputv+0x17c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_3) && (y < Y2_3)) return 10;
    11fc:	47 33       	cpi	r20, 0x37	; 55
    11fe:	51 05       	cpc	r21, r1
    1200:	38 f4       	brcc	.+14     	; 0x1210 <_Z14memoryGetInputv+0xec>
    1202:	8b 37       	cpi	r24, 0x7B	; 123
    1204:	91 05       	cpc	r25, r1
    1206:	20 f0       	brcs	.+8      	; 0x1210 <_Z14memoryGetInputv+0xec>
    1208:	82 3b       	cpi	r24, 0xB2	; 178
    120a:	91 05       	cpc	r25, r1
    120c:	08 f4       	brcc	.+2      	; 0x1210 <_Z14memoryGetInputv+0xec>
    120e:	4a c0       	rjmp	.+148    	; 0x12a4 <_Z14memoryGetInputv+0x180>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_3) && (y < Y2_3)) return 11;
    1210:	67 33       	cpi	r22, 0x37	; 55
    1212:	71 05       	cpc	r23, r1
    1214:	38 f4       	brcc	.+14     	; 0x1224 <_Z14memoryGetInputv+0x100>
    1216:	8b 37       	cpi	r24, 0x7B	; 123
    1218:	91 05       	cpc	r25, r1
    121a:	20 f0       	brcs	.+8      	; 0x1224 <_Z14memoryGetInputv+0x100>
    121c:	82 3b       	cpi	r24, 0xB2	; 178
    121e:	91 05       	cpc	r25, r1
    1220:	08 f4       	brcc	.+2      	; 0x1224 <_Z14memoryGetInputv+0x100>
    1222:	42 c0       	rjmp	.+132    	; 0x12a8 <_Z14memoryGetInputv+0x184>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
    1224:	c7 33       	cpi	r28, 0x37	; 55
    1226:	d1 05       	cpc	r29, r1
    1228:	30 f4       	brcc	.+12     	; 0x1236 <_Z14memoryGetInputv+0x112>
    122a:	8b 37       	cpi	r24, 0x7B	; 123
    122c:	91 05       	cpc	r25, r1
    122e:	18 f0       	brcs	.+6      	; 0x1236 <_Z14memoryGetInputv+0x112>
    1230:	82 3b       	cpi	r24, 0xB2	; 178
    1232:	91 05       	cpc	r25, r1
    1234:	d8 f1       	brcs	.+118    	; 0x12ac <_Z14memoryGetInputv+0x188>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
    1236:	27 33       	cpi	r18, 0x37	; 55
    1238:	31 05       	cpc	r19, r1
    123a:	30 f4       	brcc	.+12     	; 0x1248 <_Z14memoryGetInputv+0x124>
    123c:	88 3b       	cpi	r24, 0xB8	; 184
    123e:	91 05       	cpc	r25, r1
    1240:	18 f0       	brcs	.+6      	; 0x1248 <_Z14memoryGetInputv+0x124>
    1242:	8f 3e       	cpi	r24, 0xEF	; 239
    1244:	91 05       	cpc	r25, r1
    1246:	a0 f1       	brcs	.+104    	; 0x12b0 <_Z14memoryGetInputv+0x18c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
    1248:	47 33       	cpi	r20, 0x37	; 55
    124a:	51 05       	cpc	r21, r1
    124c:	30 f4       	brcc	.+12     	; 0x125a <_Z14memoryGetInputv+0x136>
    124e:	88 3b       	cpi	r24, 0xB8	; 184
    1250:	91 05       	cpc	r25, r1
    1252:	18 f0       	brcs	.+6      	; 0x125a <_Z14memoryGetInputv+0x136>
    1254:	8f 3e       	cpi	r24, 0xEF	; 239
    1256:	91 05       	cpc	r25, r1
    1258:	68 f1       	brcs	.+90     	; 0x12b4 <_Z14memoryGetInputv+0x190>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
    125a:	67 33       	cpi	r22, 0x37	; 55
    125c:	71 05       	cpc	r23, r1
    125e:	30 f4       	brcc	.+12     	; 0x126c <_Z14memoryGetInputv+0x148>
    1260:	88 3b       	cpi	r24, 0xB8	; 184
    1262:	91 05       	cpc	r25, r1
    1264:	18 f0       	brcs	.+6      	; 0x126c <_Z14memoryGetInputv+0x148>
    1266:	8f 3e       	cpi	r24, 0xEF	; 239
    1268:	91 05       	cpc	r25, r1
    126a:	30 f1       	brcs	.+76     	; 0x12b8 <_Z14memoryGetInputv+0x194>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
    126c:	e7 97       	sbiw	r28, 0x37	; 55
    126e:	30 f5       	brcc	.+76     	; 0x12bc <_Z14memoryGetInputv+0x198>
    1270:	88 3b       	cpi	r24, 0xB8	; 184
    1272:	91 05       	cpc	r25, r1
    1274:	28 f1       	brcs	.+74     	; 0x12c0 <_Z14memoryGetInputv+0x19c>
    1276:	8f 3e       	cpi	r24, 0xEF	; 239
    1278:	91 05       	cpc	r25, r1
    127a:	20 f1       	brcs	.+72     	; 0x12c4 <_Z14memoryGetInputv+0x1a0>
	else return 0;
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	23 c0       	rjmp	.+70     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
uint8_t memoryGetInput() {
	while(!Touched());
	uint16_t x = getX();
	uint16_t y = getY();
	
	     if ((x > X1_1) && (x < X2_1) && (y > Y1_1) && (y < Y2_1)) return 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	21 c0       	rjmp	.+66     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_1) && (y < Y2_1)) return 2;
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	1f c0       	rjmp	.+62     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_1) && (y < Y2_1)) return 3;
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	1d c0       	rjmp	.+58     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_1) && (y < Y2_1)) return 4;
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	1b c0       	rjmp	.+54     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_2) && (y < Y2_2)) return 5;
    1290:	85 e0       	ldi	r24, 0x05	; 5
    1292:	19 c0       	rjmp	.+50     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_2) && (y < Y2_2)) return 6;
    1294:	86 e0       	ldi	r24, 0x06	; 6
    1296:	17 c0       	rjmp	.+46     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_2) && (y < Y2_2)) return 7;
    1298:	87 e0       	ldi	r24, 0x07	; 7
    129a:	15 c0       	rjmp	.+42     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_2) && (y < Y2_2)) return 8;
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_3) && (y < Y2_3)) return 9;
    12a0:	89 e0       	ldi	r24, 0x09	; 9
    12a2:	11 c0       	rjmp	.+34     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_3) && (y < Y2_3)) return 10;
    12a4:	8a e0       	ldi	r24, 0x0A	; 10
    12a6:	0f c0       	rjmp	.+30     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_3) && (y < Y2_3)) return 11;
    12a8:	8b e0       	ldi	r24, 0x0B	; 11
    12aa:	0d c0       	rjmp	.+26     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
    12ac:	8c e0       	ldi	r24, 0x0C	; 12
    12ae:	0b c0       	rjmp	.+22     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
    12b0:	8d e0       	ldi	r24, 0x0D	; 13
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
    12b4:	8e e0       	ldi	r24, 0x0E	; 14
    12b6:	07 c0       	rjmp	.+14     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
    12b8:	8f e0       	ldi	r24, 0x0F	; 15
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
	else return 0;
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
    12c4:	80 e1       	ldi	r24, 0x10	; 16
	else return 0;
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <_Z9closeCardh>:

// "pokriva" kartu crtanjem crnog kvadrata preko simbola
void closeCard(uint8_t index) {
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	c8 2f       	mov	r28, r24
	display.setColor(0, 0, 0);
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	8e ed       	ldi	r24, 0xDE	; 222
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN4UTFT8setColorEhhh>
	switch(index) {
    12e2:	8c 2f       	mov	r24, r28
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	fc 01       	movw	r30, r24
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	e0 31       	cpi	r30, 0x10	; 16
    12ec:	f1 05       	cpc	r31, r1
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <_Z9closeCardh+0x26>
    12f0:	d3 c0       	rjmp	.+422    	; 0x1498 <_Z9closeCardh+0x1cc>
    12f2:	e6 5d       	subi	r30, 0xD6	; 214
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__tablejump2__>
		case 1:
			display.fillRect(X1_1 + 2, Y1_1 + 1, X2_1 - 1, Y2_1 - 1);
    12fa:	07 e3       	ldi	r16, 0x37	; 55
    12fc:	10 e0       	ldi	r17, 0x00	; 0
    12fe:	26 e8       	ldi	r18, 0x86	; 134
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	61 e5       	ldi	r22, 0x51	; 81
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	8e ed       	ldi	r24, 0xDE	; 222
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    1312:	c2 c0       	rjmp	.+388    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 2:
			display.fillRect(X1_2 + 2, Y1_1 + 1, X2_2 - 1, Y2_1 - 1);
    1314:	07 e3       	ldi	r16, 0x37	; 55
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	23 ec       	ldi	r18, 0xC3	; 195
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	6e e8       	ldi	r22, 0x8E	; 142
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	8e ed       	ldi	r24, 0xDE	; 222
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    132c:	b5 c0       	rjmp	.+362    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 3:
			display.fillRect(X1_3 + 2, Y1_1 + 1, X2_3 - 1, Y2_1 - 1);
    132e:	07 e3       	ldi	r16, 0x37	; 55
    1330:	10 e0       	ldi	r17, 0x00	; 0
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	31 e0       	ldi	r19, 0x01	; 1
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	6b ec       	ldi	r22, 0xCB	; 203
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	8e ed       	ldi	r24, 0xDE	; 222
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    1346:	a8 c0       	rjmp	.+336    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 4:
			display.fillRect(X1_4 + 2, Y1_1 + 1, X2_4 - 1, Y2_1 - 1);
    1348:	07 e3       	ldi	r16, 0x37	; 55
    134a:	10 e0       	ldi	r17, 0x00	; 0
    134c:	2d e3       	ldi	r18, 0x3D	; 61
    134e:	31 e0       	ldi	r19, 0x01	; 1
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	68 e0       	ldi	r22, 0x08	; 8
    1356:	71 e0       	ldi	r23, 0x01	; 1
    1358:	8e ed       	ldi	r24, 0xDE	; 222
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    1360:	9b c0       	rjmp	.+310    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 5:
			display.fillRect(X1_1 + 2, Y1_2 + 1, X2_1 - 1, Y2_2 - 1);
    1362:	04 e7       	ldi	r16, 0x74	; 116
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	26 e8       	ldi	r18, 0x86	; 134
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4e e3       	ldi	r20, 0x3E	; 62
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	61 e5       	ldi	r22, 0x51	; 81
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	8e ed       	ldi	r24, 0xDE	; 222
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    137a:	8e c0       	rjmp	.+284    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 6:
			display.fillRect(X1_2 + 2, Y1_2 + 1, X2_2 - 1, Y2_2 - 1);
    137c:	04 e7       	ldi	r16, 0x74	; 116
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	23 ec       	ldi	r18, 0xC3	; 195
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4e e3       	ldi	r20, 0x3E	; 62
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	6e e8       	ldi	r22, 0x8E	; 142
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	8e ed       	ldi	r24, 0xDE	; 222
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    1394:	81 c0       	rjmp	.+258    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 7:
			display.fillRect(X1_3 + 2, Y1_2 + 1, X2_3 - 1, Y2_2 - 1);
    1396:	04 e7       	ldi	r16, 0x74	; 116
    1398:	10 e0       	ldi	r17, 0x00	; 0
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	31 e0       	ldi	r19, 0x01	; 1
    139e:	4e e3       	ldi	r20, 0x3E	; 62
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	6b ec       	ldi	r22, 0xCB	; 203
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	8e ed       	ldi	r24, 0xDE	; 222
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    13ae:	74 c0       	rjmp	.+232    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 8:
			display.fillRect(X1_4 + 2, Y1_2 + 1, X2_4 - 1, Y2_2 - 1);
    13b0:	04 e7       	ldi	r16, 0x74	; 116
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	2d e3       	ldi	r18, 0x3D	; 61
    13b6:	31 e0       	ldi	r19, 0x01	; 1
    13b8:	4e e3       	ldi	r20, 0x3E	; 62
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	68 e0       	ldi	r22, 0x08	; 8
    13be:	71 e0       	ldi	r23, 0x01	; 1
    13c0:	8e ed       	ldi	r24, 0xDE	; 222
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;	
    13c8:	67 c0       	rjmp	.+206    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 9:
			display.fillRect(X1_1 + 2, Y1_3 + 1, X2_1 - 1, Y2_3 - 1);
    13ca:	01 eb       	ldi	r16, 0xB1	; 177
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	26 e8       	ldi	r18, 0x86	; 134
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4b e7       	ldi	r20, 0x7B	; 123
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	61 e5       	ldi	r22, 0x51	; 81
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	8e ed       	ldi	r24, 0xDE	; 222
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    13e2:	5a c0       	rjmp	.+180    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 10:
			display.fillRect(X1_2 + 2, Y1_3 + 1, X2_2 - 1, Y2_3 - 1);
    13e4:	01 eb       	ldi	r16, 0xB1	; 177
    13e6:	10 e0       	ldi	r17, 0x00	; 0
    13e8:	23 ec       	ldi	r18, 0xC3	; 195
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4b e7       	ldi	r20, 0x7B	; 123
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	6e e8       	ldi	r22, 0x8E	; 142
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	8e ed       	ldi	r24, 0xDE	; 222
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    13fc:	4d c0       	rjmp	.+154    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 11:
			display.fillRect(X1_3 + 2, Y1_3 + 1, X2_3 - 1, Y2_3 - 1);
    13fe:	01 eb       	ldi	r16, 0xB1	; 177
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	31 e0       	ldi	r19, 0x01	; 1
    1406:	4b e7       	ldi	r20, 0x7B	; 123
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	6b ec       	ldi	r22, 0xCB	; 203
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	8e ed       	ldi	r24, 0xDE	; 222
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    1416:	40 c0       	rjmp	.+128    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 12:
			display.fillRect(X1_4 + 2, Y1_3 + 1, X2_4 - 1, Y2_3 - 1);
    1418:	01 eb       	ldi	r16, 0xB1	; 177
    141a:	10 e0       	ldi	r17, 0x00	; 0
    141c:	2d e3       	ldi	r18, 0x3D	; 61
    141e:	31 e0       	ldi	r19, 0x01	; 1
    1420:	4b e7       	ldi	r20, 0x7B	; 123
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	68 e0       	ldi	r22, 0x08	; 8
    1426:	71 e0       	ldi	r23, 0x01	; 1
    1428:	8e ed       	ldi	r24, 0xDE	; 222
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    1430:	33 c0       	rjmp	.+102    	; 0x1498 <_Z9closeCardh+0x1cc>
		case 13:
			display.fillRect(X1_1 + 2, Y1_4 + 1, X2_1 - 1, Y2_4 - 1);
    1432:	0e ee       	ldi	r16, 0xEE	; 238
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	26 e8       	ldi	r18, 0x86	; 134
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	48 eb       	ldi	r20, 0xB8	; 184
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	61 e5       	ldi	r22, 0x51	; 81
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	8e ed       	ldi	r24, 0xDE	; 222
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    144a:	26 c0       	rjmp	.+76     	; 0x1498 <_Z9closeCardh+0x1cc>
		case 14:
			display.fillRect(X1_2 + 2, Y1_4 + 1, X2_2 - 1, Y2_4 - 1);
    144c:	0e ee       	ldi	r16, 0xEE	; 238
    144e:	10 e0       	ldi	r17, 0x00	; 0
    1450:	23 ec       	ldi	r18, 0xC3	; 195
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	48 eb       	ldi	r20, 0xB8	; 184
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	6e e8       	ldi	r22, 0x8E	; 142
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	8e ed       	ldi	r24, 0xDE	; 222
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    1464:	19 c0       	rjmp	.+50     	; 0x1498 <_Z9closeCardh+0x1cc>
		case 15:
			display.fillRect(X1_3 + 2, Y1_4 + 1, X2_3 - 1, Y2_4 - 1);
    1466:	0e ee       	ldi	r16, 0xEE	; 238
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	31 e0       	ldi	r19, 0x01	; 1
    146e:	48 eb       	ldi	r20, 0xB8	; 184
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	6b ec       	ldi	r22, 0xCB	; 203
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	8e ed       	ldi	r24, 0xDE	; 222
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
    147e:	0c c0       	rjmp	.+24     	; 0x1498 <_Z9closeCardh+0x1cc>
		case 16:
			display.fillRect(X1_4 + 2, Y1_4 + 1, X2_4 - 1, Y2_4 - 1);
    1480:	0e ee       	ldi	r16, 0xEE	; 238
    1482:	10 e0       	ldi	r17, 0x00	; 0
    1484:	2d e3       	ldi	r18, 0x3D	; 61
    1486:	31 e0       	ldi	r19, 0x01	; 1
    1488:	48 eb       	ldi	r20, 0xB8	; 184
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	68 e0       	ldi	r22, 0x08	; 8
    148e:	71 e0       	ldi	r23, 0x01	; 1
    1490:	8e ed       	ldi	r24, 0xDE	; 222
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
			break;
	}
}
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <_Z9checkOpenv>:

// provjera ako je memory karta vec okrenuta
void checkOpen() {
	if (board[c1 - 1] != board[c2 - 1] && control[c1 - 1] == 0 && control[c2 - 1] == 0) {  //ako su karte razlicite i kontrolno polje je 0 za obje
    14a0:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <c1>
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	fc 01       	movw	r30, r24
    14aa:	e2 53       	subi	r30, 0x32	; 50
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	50 81       	ld	r21, Z
    14b0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <c2>
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	21 50       	subi	r18, 0x01	; 1
    14b8:	31 09       	sbc	r19, r1
    14ba:	f9 01       	movw	r30, r18
    14bc:	e2 53       	subi	r30, 0x32	; 50
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	40 81       	ld	r20, Z
    14c2:	54 17       	cp	r21, r20
    14c4:	f1 f0       	breq	.+60     	; 0x1502 <_Z9checkOpenv+0x62>
    14c6:	fc 01       	movw	r30, r24
    14c8:	e2 54       	subi	r30, 0x42	; 66
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	40 81       	ld	r20, Z
    14ce:	41 11       	cpse	r20, r1
    14d0:	18 c0       	rjmp	.+48     	; 0x1502 <_Z9checkOpenv+0x62>
    14d2:	f9 01       	movw	r30, r18
    14d4:	e2 54       	subi	r30, 0x42	; 66
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	40 81       	ld	r20, Z
    14da:	41 11       	cpse	r20, r1
    14dc:	12 c0       	rjmp	.+36     	; 0x1502 <_Z9checkOpenv+0x62>
    14de:	2f ef       	ldi	r18, 0xFF	; 255
    14e0:	8f eb       	ldi	r24, 0xBF	; 191
    14e2:	96 e0       	ldi	r25, 0x06	; 6
    14e4:	21 50       	subi	r18, 0x01	; 1
    14e6:	80 40       	sbci	r24, 0x00	; 0
    14e8:	90 40       	sbci	r25, 0x00	; 0
    14ea:	e1 f7       	brne	.-8      	; 0x14e4 <_Z9checkOpenv+0x44>
    14ec:	00 c0       	rjmp	.+0      	; 0x14ee <_Z9checkOpenv+0x4e>
    14ee:	00 00       	nop
		_delay_ms(300); //cekaj ~trecinu sekunde da se zatvore karte
		closeCard(c1);
    14f0:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <c1>
    14f4:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z9closeCardh>
		closeCard(c2);
    14f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <c2>
    14fc:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z9closeCardh>
    1500:	0e c0       	rjmp	.+28     	; 0x151e <_Z9checkOpenv+0x7e>
	} else { //ako su isti okrenuti, postavi kontrolno polje u 1 i povecaj broj pogodjenih parova
		control[c1-1] = 1;
    1502:	fc 01       	movw	r30, r24
    1504:	e2 54       	subi	r30, 0x42	; 66
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	40 83       	st	Z, r20
		control[c2-1] = 1;
    150c:	f9 01       	movw	r30, r18
    150e:	e2 54       	subi	r30, 0x42	; 66
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	40 83       	st	Z, r20
		matched++;
    1514:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <matched>
    1518:	8f 5f       	subi	r24, 0xFF	; 255
    151a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <matched>
	}
	state = c1 = c2 = 0;
    151e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <c2>
    1522:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <c1>
    1526:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <state>
	moveCounter++;
    152a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <moveCounter>
    152e:	8f 5f       	subi	r24, 0xFF	; 255
    1530:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <moveCounter>
    1534:	08 95       	ret

00001536 <_Z10revealCardh>:
}

// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
    1536:	cf 92       	push	r12
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	98 2f       	mov	r25, r24
    1544:	93 70       	andi	r25, 0x03	; 3
	uint16_t x = 0, y = 0;
	
	if (input % 4 == 1) {                 // prvi stupac
    1546:	91 30       	cpi	r25, 0x01	; 1
    1548:	49 f0       	breq	.+18     	; 0x155c <_Z10revealCardh+0x26>
		x = X1_1;
		} else if (input % 4 == 2) {      // drugi stupac
    154a:	92 30       	cpi	r25, 0x02	; 2
    154c:	69 f0       	breq	.+26     	; 0x1568 <_Z10revealCardh+0x32>
		x = X1_2;
		} else if (input % 4 == 3) {      // treci stupac
    154e:	93 30       	cpi	r25, 0x03	; 3
    1550:	89 f0       	breq	.+34     	; 0x1574 <_Z10revealCardh+0x3e>
		x = X1_3;
		} else if (input % 4 == 0) {      // cetvrti stupac
    1552:	99 23       	and	r25, r25
    1554:	a9 f0       	breq	.+42     	; 0x1580 <_Z10revealCardh+0x4a>
	moveCounter++;
}

// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
	uint16_t x = 0, y = 0;
    1556:	e1 2c       	mov	r14, r1
    1558:	f1 2c       	mov	r15, r1
    155a:	18 c0       	rjmp	.+48     	; 0x158c <_Z10revealCardh+0x56>
	
	if (input % 4 == 1) {                 // prvi stupac
		x = X1_1;
    155c:	0f 2e       	mov	r0, r31
    155e:	ff e4       	ldi	r31, 0x4F	; 79
    1560:	ef 2e       	mov	r14, r31
    1562:	f1 2c       	mov	r15, r1
    1564:	f0 2d       	mov	r31, r0
    1566:	12 c0       	rjmp	.+36     	; 0x158c <_Z10revealCardh+0x56>
		} else if (input % 4 == 2) {      // drugi stupac
		x = X1_2;
    1568:	0f 2e       	mov	r0, r31
    156a:	fc e8       	ldi	r31, 0x8C	; 140
    156c:	ef 2e       	mov	r14, r31
    156e:	f1 2c       	mov	r15, r1
    1570:	f0 2d       	mov	r31, r0
    1572:	0c c0       	rjmp	.+24     	; 0x158c <_Z10revealCardh+0x56>
		} else if (input % 4 == 3) {      // treci stupac
		x = X1_3;
    1574:	0f 2e       	mov	r0, r31
    1576:	f9 ec       	ldi	r31, 0xC9	; 201
    1578:	ef 2e       	mov	r14, r31
    157a:	f1 2c       	mov	r15, r1
    157c:	f0 2d       	mov	r31, r0
    157e:	06 c0       	rjmp	.+12     	; 0x158c <_Z10revealCardh+0x56>
		} else if (input % 4 == 0) {      // cetvrti stupac
		x = X1_4;
    1580:	0f 2e       	mov	r0, r31
    1582:	f6 e0       	ldi	r31, 0x06	; 6
    1584:	ef 2e       	mov	r14, r31
    1586:	ff 24       	eor	r15, r15
    1588:	f3 94       	inc	r15
    158a:	f0 2d       	mov	r31, r0
	}
	
	if ((input > 0) && (input < 5)) {                   // prvi red
    158c:	9f ef       	ldi	r25, 0xFF	; 255
    158e:	98 0f       	add	r25, r24
    1590:	94 30       	cpi	r25, 0x04	; 4
    1592:	78 f0       	brcs	.+30     	; 0x15b2 <_Z10revealCardh+0x7c>
		y = Y1_1;
		} else if ((input > 4) && (input < 9)) {        // drugi stupac
    1594:	9b ef       	ldi	r25, 0xFB	; 251
    1596:	98 0f       	add	r25, r24
    1598:	94 30       	cpi	r25, 0x04	; 4
    159a:	70 f0       	brcs	.+28     	; 0x15b8 <_Z10revealCardh+0x82>
		y = Y1_2;
		} else if ((input > 8) && (input < 13)) {       // treci stupac
    159c:	97 ef       	ldi	r25, 0xF7	; 247
    159e:	98 0f       	add	r25, r24
    15a0:	94 30       	cpi	r25, 0x04	; 4
    15a2:	68 f0       	brcs	.+26     	; 0x15be <_Z10revealCardh+0x88>
		y = Y1_3;
		} else if ((input > 12) && (input < 17)) {      // cetvrti stupac
    15a4:	93 ef       	ldi	r25, 0xF3	; 243
    15a6:	98 0f       	add	r25, r24
    15a8:	94 30       	cpi	r25, 0x04	; 4
    15aa:	60 f0       	brcs	.+24     	; 0x15c4 <_Z10revealCardh+0x8e>
	moveCounter++;
}

// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
	uint16_t x = 0, y = 0;
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	0b c0       	rjmp	.+22     	; 0x15c8 <_Z10revealCardh+0x92>
		} else if (input % 4 == 0) {      // cetvrti stupac
		x = X1_4;
	}
	
	if ((input > 0) && (input < 5)) {                   // prvi red
		y = Y1_1;
    15b2:	00 e0       	ldi	r16, 0x00	; 0
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <_Z10revealCardh+0x92>
		} else if ((input > 4) && (input < 9)) {        // drugi stupac
		y = Y1_2;
    15b8:	0d e3       	ldi	r16, 0x3D	; 61
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <_Z10revealCardh+0x92>
		} else if ((input > 8) && (input < 13)) {       // treci stupac
		y = Y1_3;
    15be:	0a e7       	ldi	r16, 0x7A	; 122
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <_Z10revealCardh+0x92>
		} else if ((input > 12) && (input < 17)) {      // cetvrti stupac
		y = Y1_4;
    15c4:	07 eb       	ldi	r16, 0xB7	; 183
    15c6:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	uint8_t openSymbol = board[input - 1];
    15c8:	e8 2f       	mov	r30, r24
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	e3 53       	subi	r30, 0x33	; 51
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	c0 81       	ld	r28, Z
	
	display.setColor(255, 255, 255);
    15d2:	2f ef       	ldi	r18, 0xFF	; 255
    15d4:	4f ef       	ldi	r20, 0xFF	; 255
    15d6:	6f ef       	ldi	r22, 0xFF	; 255
    15d8:	8e ed       	ldi	r24, 0xDE	; 222
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN4UTFT8setColorEhhh>
	display.setFont(BigFont);
    15e0:	62 e9       	ldi	r22, 0x92	; 146
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	8e ed       	ldi	r24, 0xDE	; 222
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 34 14 	call	0x2868	; 0x2868 <_ZN4UTFT7setFontEPKh>
	display.printNumI(openSymbol, x + 20, y + 20);
    15ec:	0c 5e       	subi	r16, 0xEC	; 236
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	97 01       	movw	r18, r14
    15f2:	2c 5e       	subi	r18, 0xEC	; 236
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	4c 2f       	mov	r20, r28
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	68 94       	set
    1600:	cc 24       	eor	r12, r12
    1602:	c5 f8       	bld	r12, 5
    1604:	e1 2c       	mov	r14, r1
    1606:	f1 2c       	mov	r15, r1
    1608:	8e ed       	ldi	r24, 0xDE	; 222
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
    1610:	2f ef       	ldi	r18, 0xFF	; 255
    1612:	8f e7       	ldi	r24, 0x7F	; 127
    1614:	94 e0       	ldi	r25, 0x04	; 4
    1616:	21 50       	subi	r18, 0x01	; 1
    1618:	80 40       	sbci	r24, 0x00	; 0
    161a:	90 40       	sbci	r25, 0x00	; 0
    161c:	e1 f7       	brne	.-8      	; 0x1616 <_Z10revealCardh+0xe0>
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <_Z10revealCardh+0xea>
    1620:	00 00       	nop
	
	_delay_ms(200);                                     // Debounce cekanjem
}
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	cf 90       	pop	r12
    162e:	08 95       	ret

00001630 <_Z10memoryInitv>:

// inicijalno stanje memory igre - generiranje sadrzaja polja i crtanje ploce
void memoryInit() {
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
	fillBoard();
    1634:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_Z9fillBoardv>
	
	display.clrScr();
    1638:	8e ed       	ldi	r24, 0xDE	; 222
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN4UTFT6clrScrEv>

	//back button
	//display.print("Moves", 0, 60); //broj poteza
	
	//crtanje ploce za memory
	display.fillRect(BORDER_L, BOARD_Y1, BORDER_L + BORDER_WIDTH, BOARD_Y2);
    1640:	0f ee       	ldi	r16, 0xEF	; 239
    1642:	10 e0       	ldi	r17, 0x00	; 0
    1644:	2d e8       	ldi	r18, 0x8D	; 141
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	68 e8       	ldi	r22, 0x88	; 136
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	8e ed       	ldi	r24, 0xDE	; 222
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_C, BOARD_Y1, BORDER_C + BORDER_WIDTH, BOARD_Y2);
    1658:	2a ec       	ldi	r18, 0xCA	; 202
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	65 ec       	ldi	r22, 0xC5	; 197
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	8e ed       	ldi	r24, 0xDE	; 222
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_R, BOARD_Y1, BORDER_R + BORDER_WIDTH, BOARD_Y2);
    166c:	27 e0       	ldi	r18, 0x07	; 7
    166e:	31 e0       	ldi	r19, 0x01	; 1
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	62 e0       	ldi	r22, 0x02	; 2
    1676:	71 e0       	ldi	r23, 0x01	; 1
    1678:	8e ed       	ldi	r24, 0xDE	; 222
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_T, BOARD_X2, BORDER_T + BORDER_WIDTH);
    1680:	0d e3       	ldi	r16, 0x3D	; 61
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	2e e3       	ldi	r18, 0x3E	; 62
    1686:	31 e0       	ldi	r19, 0x01	; 1
    1688:	48 e3       	ldi	r20, 0x38	; 56
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	6f e4       	ldi	r22, 0x4F	; 79
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	8e ed       	ldi	r24, 0xDE	; 222
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_M, BOARD_X2, BORDER_M + BORDER_WIDTH);
    1698:	0a e7       	ldi	r16, 0x7A	; 122
    169a:	10 e0       	ldi	r17, 0x00	; 0
    169c:	2e e3       	ldi	r18, 0x3E	; 62
    169e:	31 e0       	ldi	r19, 0x01	; 1
    16a0:	45 e7       	ldi	r20, 0x75	; 117
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	6f e4       	ldi	r22, 0x4F	; 79
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	8e ed       	ldi	r24, 0xDE	; 222
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_B, BOARD_X2, BORDER_B + BORDER_WIDTH);
    16b0:	07 eb       	ldi	r16, 0xB7	; 183
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	2e e3       	ldi	r18, 0x3E	; 62
    16b6:	31 e0       	ldi	r19, 0x01	; 1
    16b8:	42 eb       	ldi	r20, 0xB2	; 178
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	6f e4       	ldi	r22, 0x4F	; 79
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	8e ed       	ldi	r24, 0xDE	; 222
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN4UTFT8fillRectEiiii>
}
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	08 95       	ret

000016ce <_Z20memoryResetVariablesv>:

// postavlja varijable u pocetne vrijednosti (ne highscores)
void memoryResetVariables() {
	  for (uint8_t i = 0; i < 16; i++) {
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	20 31       	cpi	r18, 0x10	; 16
    16d2:	60 f4       	brcc	.+24     	; 0x16ec <_Z20memoryResetVariablesv+0x1e>
		  board[i] = 0;
    16d4:	82 2f       	mov	r24, r18
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	fc 01       	movw	r30, r24
    16da:	e2 53       	subi	r30, 0x32	; 50
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	10 82       	st	Z, r1
		  control[i] = 0;
    16e0:	fc 01       	movw	r30, r24
    16e2:	e2 54       	subi	r30, 0x42	; 66
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	10 82       	st	Z, r1
	display.fillRect(BOARD_X1, BORDER_B, BOARD_X2, BORDER_B + BORDER_WIDTH);
}

// postavlja varijable u pocetne vrijednosti (ne highscores)
void memoryResetVariables() {
	  for (uint8_t i = 0; i < 16; i++) {
    16e8:	2f 5f       	subi	r18, 0xFF	; 255
    16ea:	f2 cf       	rjmp	.-28     	; 0x16d0 <_Z20memoryResetVariablesv+0x2>
		  board[i] = 0;
		  control[i] = 0;
	  }
	  c1 = c2 = 0;
    16ec:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <c2>
    16f0:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <c1>
	  state = 0;
    16f4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <state>
	  matched = 0;
    16f8:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <matched>
	  moveCounter = 0;
    16fc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <moveCounter>
	  currentTime[0] = currentTime[1] = currentTime[2] = 0;
    1700:	e6 eb       	ldi	r30, 0xB6	; 182
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	12 82       	std	Z+2, r1	; 0x02
    1706:	11 82       	std	Z+1, r1	; 0x01
    1708:	10 82       	st	Z, r1
    170a:	08 95       	ret

0000170c <_Z13memoryEndGamev>:
}

// iscrtava ekran za kraj igre
void memoryEndGame() {
    170c:	cf 92       	push	r12
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
	roundCounter++;
    171a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
    171e:	8f 5f       	subi	r24, 0xFF	; 255
    1720:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end>
	started = 0;
    1724:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <started>
		
	if (moveCounter < bestMoves) bestMoves = moveCounter;
    1728:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <moveCounter>
    172c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <bestMoves>
    1730:	89 17       	cp	r24, r25
    1732:	10 f4       	brcc	.+4      	; 0x1738 <_Z13memoryEndGamev+0x2c>
    1734:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <bestMoves>
	
	if (currentTime[0] <= bestTime[0]) {
    1738:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <currentTime>
    173c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <bestTime>
    1740:	98 17       	cp	r25, r24
    1742:	78 f0       	brcs	.+30     	; 0x1762 <_Z13memoryEndGamev+0x56>
		if (currentTime[1] <= bestTime[1]) {
    1744:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <currentTime+0x1>
    1748:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <bestTime+0x1>
    174c:	32 17       	cp	r19, r18
    174e:	48 f0       	brcs	.+18     	; 0x1762 <_Z13memoryEndGamev+0x56>
			if (currentTime[0] < bestTime[0]) {
    1750:	89 17       	cp	r24, r25
    1752:	38 f4       	brcc	.+14     	; 0x1762 <_Z13memoryEndGamev+0x56>
				bestTime[0] = currentTime[0];
    1754:	e4 e6       	ldi	r30, 0x64	; 100
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 83       	st	Z, r24
				bestTime[1] = currentTime[1];
    175a:	21 83       	std	Z+1, r18	; 0x01
				bestTime[2] = currentTime[2];
    175c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <currentTime+0x2>
    1760:	82 83       	std	Z+2, r24	; 0x02
			}
		}
	}
	
	display.clrScr();
    1762:	8e ed       	ldi	r24, 0xDE	; 222
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN4UTFT6clrScrEv>
	
	display.print("Round:", 100, 10);
    176a:	00 e0       	ldi	r16, 0x00	; 0
    176c:	10 e0       	ldi	r17, 0x00	; 0
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	44 e6       	ldi	r20, 0x64	; 100
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	6c e6       	ldi	r22, 0x6C	; 108
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	8e ed       	ldi	r24, 0xDE	; 222
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(roundCounter, 200, 10);
    1782:	40 91 b4 00 	lds	r20, 0x00B4	; 0x8000b4 <__data_end>
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	68 94       	set
    178e:	cc 24       	eor	r12, r12
    1790:	c5 f8       	bld	r12, 5
    1792:	e1 2c       	mov	r14, r1
    1794:	f1 2c       	mov	r15, r1
    1796:	0a e0       	ldi	r16, 0x0A	; 10
    1798:	10 e0       	ldi	r17, 0x00	; 0
    179a:	28 ec       	ldi	r18, 0xC8	; 200
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	8e ed       	ldi	r24, 0xDE	; 222
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	
	display.print("Moves:", 90, 40);
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	28 e2       	ldi	r18, 0x28	; 40
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a e5       	ldi	r20, 0x5A	; 90
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	63 e7       	ldi	r22, 0x73	; 115
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	8e ed       	ldi	r24, 0xDE	; 222
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(moveCounter, 190, 40);
    17be:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <moveCounter>
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	08 e2       	ldi	r16, 0x28	; 40
    17ca:	10 e0       	ldi	r17, 0x00	; 0
    17cc:	2e eb       	ldi	r18, 0xBE	; 190
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	8e ed       	ldi	r24, 0xDE	; 222
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	display.print("Best moves:", 40, 60);
    17d8:	00 e0       	ldi	r16, 0x00	; 0
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	2c e3       	ldi	r18, 0x3C	; 60
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	48 e2       	ldi	r20, 0x28	; 40
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	6a e7       	ldi	r22, 0x7A	; 122
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	8e ed       	ldi	r24, 0xDE	; 222
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(bestMoves, 240, 60);
    17f0:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <bestMoves>
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0c e3       	ldi	r16, 0x3C	; 60
    17fc:	10 e0       	ldi	r17, 0x00	; 0
    17fe:	20 ef       	ldi	r18, 0xF0	; 240
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8e ed       	ldi	r24, 0xDE	; 222
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
		
	display.print("Time:", 60, 90);
    180a:	00 e0       	ldi	r16, 0x00	; 0
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	2a e5       	ldi	r18, 0x5A	; 90
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4c e3       	ldi	r20, 0x3C	; 60
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	66 e8       	ldi	r22, 0x86	; 134
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	8e ed       	ldi	r24, 0xDE	; 222
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(currentTime[0], 140, 90);
    1822:	c6 eb       	ldi	r28, 0xB6	; 182
    1824:	d0 e0       	ldi	r29, 0x00	; 0
    1826:	48 81       	ld	r20, Y
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	0a e5       	ldi	r16, 0x5A	; 90
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	2c e8       	ldi	r18, 0x8C	; 140
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8e ed       	ldi	r24, 0xDE	; 222
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	display.print(":", 170, 90);
    183e:	00 e0       	ldi	r16, 0x00	; 0
    1840:	10 e0       	ldi	r17, 0x00	; 0
    1842:	2a e5       	ldi	r18, 0x5A	; 90
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a ea       	ldi	r20, 0xAA	; 170
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	61 e7       	ldi	r22, 0x71	; 113
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	8e ed       	ldi	r24, 0xDE	; 222
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(currentTime[1], 180, 90);
    1856:	49 81       	ldd	r20, Y+1	; 0x01
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	0a e5       	ldi	r16, 0x5A	; 90
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	24 eb       	ldi	r18, 0xB4	; 180
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	8e ed       	ldi	r24, 0xDE	; 222
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	display.print(":", 210, 90);
    186e:	00 e0       	ldi	r16, 0x00	; 0
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	2a e5       	ldi	r18, 0x5A	; 90
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	42 ed       	ldi	r20, 0xD2	; 210
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	61 e7       	ldi	r22, 0x71	; 113
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	8e ed       	ldi	r24, 0xDE	; 222
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(currentTime[2], 220, 90);
    1886:	4a 81       	ldd	r20, Y+2	; 0x02
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	0a e5       	ldi	r16, 0x5A	; 90
    1890:	10 e0       	ldi	r17, 0x00	; 0
    1892:	2c ed       	ldi	r18, 0xDC	; 220
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8e ed       	ldi	r24, 0xDE	; 222
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
		
	display.print("Best time:", 20, 110);
    189e:	00 e0       	ldi	r16, 0x00	; 0
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	2e e6       	ldi	r18, 0x6E	; 110
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	44 e1       	ldi	r20, 0x14	; 20
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	6c e8       	ldi	r22, 0x8C	; 140
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	8e ed       	ldi	r24, 0xDE	; 222
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(bestTime[0], 180, 110);
    18b6:	c4 e6       	ldi	r28, 0x64	; 100
    18b8:	d0 e0       	ldi	r29, 0x00	; 0
    18ba:	48 81       	ld	r20, Y
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	0e e6       	ldi	r16, 0x6E	; 110
    18c4:	10 e0       	ldi	r17, 0x00	; 0
    18c6:	24 eb       	ldi	r18, 0xB4	; 180
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8e ed       	ldi	r24, 0xDE	; 222
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	display.print(":", 210, 110);
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	10 e0       	ldi	r17, 0x00	; 0
    18d6:	2e e6       	ldi	r18, 0x6E	; 110
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	42 ed       	ldi	r20, 0xD2	; 210
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	61 e7       	ldi	r22, 0x71	; 113
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	8e ed       	ldi	r24, 0xDE	; 222
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(bestTime[1], 220, 110);
    18ea:	49 81       	ldd	r20, Y+1	; 0x01
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	0e e6       	ldi	r16, 0x6E	; 110
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	2c ed       	ldi	r18, 0xDC	; 220
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	8e ed       	ldi	r24, 0xDE	; 222
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
	display.print(":", 250, 110);
    1902:	00 e0       	ldi	r16, 0x00	; 0
    1904:	10 e0       	ldi	r17, 0x00	; 0
    1906:	2e e6       	ldi	r18, 0x6E	; 110
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4a ef       	ldi	r20, 0xFA	; 250
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	61 e7       	ldi	r22, 0x71	; 113
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	8e ed       	ldi	r24, 0xDE	; 222
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
	display.printNumI(bestTime[2], 260, 110);
    191a:	4a 81       	ldd	r20, Y+2	; 0x02
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	0e e6       	ldi	r16, 0x6E	; 110
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	24 e0       	ldi	r18, 0x04	; 4
    1928:	31 e0       	ldi	r19, 0x01	; 1
    192a:	8e ed       	ldi	r24, 0xDE	; 222
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
		
	display.print("Continue", CENTER, 180);
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	24 eb       	ldi	r18, 0xB4	; 180
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	4e e0       	ldi	r20, 0x0E	; 14
    193c:	57 e2       	ldi	r21, 0x27	; 39
    193e:	67 e9       	ldi	r22, 0x97	; 151
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	8e ed       	ldi	r24, 0xDE	; 222
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
		
	memoryResetVariables();	  
    194a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <_Z20memoryResetVariablesv>
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	cf 90       	pop	r12
    195c:	08 95       	ret

0000195e <_Z10memoryGamev>:
// glavni game loop
void memoryGame() {
	uint16_t input;
	
	while(1) {
		if (state == 2) {
    195e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <state>
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	d9 f4       	brne	.+54     	; 0x199c <_Z10memoryGamev+0x3e>
			checkOpen();
    1966:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_Z9checkOpenv>
			display.setColor(255, 255, 255);
    196a:	2f ef       	ldi	r18, 0xFF	; 255
    196c:	4f ef       	ldi	r20, 0xFF	; 255
    196e:	6f ef       	ldi	r22, 0xFF	; 255
    1970:	8e ed       	ldi	r24, 0xDE	; 222
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN4UTFT8setColorEhhh>
			display.printNumI(moveCounter, 0, 100);
    1978:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <moveCounter>
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	68 94       	set
    1984:	cc 24       	eor	r12, r12
    1986:	c5 f8       	bld	r12, 5
    1988:	e1 2c       	mov	r14, r1
    198a:	f1 2c       	mov	r15, r1
    198c:	04 e6       	ldi	r16, 0x64	; 100
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	8e ed       	ldi	r24, 0xDE	; 222
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN4UTFT9printNumIEliiic>
		}
		if (matched == 8) {
    199c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <matched>
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <_Z10memoryGamev+0x4a>
			memoryEndGame();
    19a4:	0e 94 86 0b 	call	0x170c	; 0x170c <_Z13memoryEndGamev>
		}
		
		input = memoryGetInput(); //svakih pola sekunde provjeri input 
    19a8:	0e 94 92 08 	call	0x1124	; 0x1124 <_Z14memoryGetInputv>
    19ac:	18 2f       	mov	r17, r24
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0

		if (!started) { //inicijalizira stanje igre pri prvom pokretanju
    19b2:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <started>
    19b6:	81 11       	cpse	r24, r1
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <_Z10memoryGamev+0x7a>
			//display.print("Tap to start", CENTER, 119);
			
			// sluzi kao workaroun za vrijeme - generira random seed na temelju gdje smo dodirnuli
			uint16_t x = getX();
    19ba:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z4getXv>
    19be:	ec 01       	movw	r28, r24
			uint16_t y = getY();
    19c0:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z4getYv>
			srand(x + y);
    19c4:	8c 0f       	add	r24, r28
    19c6:	9d 1f       	adc	r25, r29
    19c8:	0e 94 e7 17 	call	0x2fce	; 0x2fce <srand>

			memoryInit();
    19cc:	0e 94 18 0b 	call	0x1630	; 0x1630 <_Z10memoryInitv>
			started = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <started>
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <_Z10memoryGamev+0xf8>
		} else if (input > 0 && started && !(control[input-1])) { // ako igra vec traje, pritisnut je ekran i karta nije vec pogodjena, otvori kartu
    19d8:	21 15       	cp	r18, r1
    19da:	31 05       	cpc	r19, r1
    19dc:	e1 f1       	breq	.+120    	; 0x1a56 <_Z10memoryGamev+0xf8>
    19de:	88 23       	and	r24, r24
    19e0:	d1 f1       	breq	.+116    	; 0x1a56 <_Z10memoryGamev+0xf8>
    19e2:	e9 01       	movw	r28, r18
    19e4:	21 97       	sbiw	r28, 0x01	; 1
    19e6:	fe 01       	movw	r30, r28
    19e8:	e2 54       	subi	r30, 0x42	; 66
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	81 11       	cpse	r24, r1
    19f0:	32 c0       	rjmp	.+100    	; 0x1a56 <_Z10memoryGamev+0xf8>
			revealCard(input);
    19f2:	81 2f       	mov	r24, r17
    19f4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_Z10revealCardh>
			
			if (state == 0 && control[input-1] == 0) { // nisu trenutno otvorene karte, ne smijemo otvarati vec otvorenu kartu
    19f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <state>
    19fc:	81 11       	cpse	r24, r1
    19fe:	12 c0       	rjmp	.+36     	; 0x1a24 <_Z10memoryGamev+0xc6>
    1a00:	c2 54       	subi	r28, 0x42	; 66
    1a02:	df 4f       	sbci	r29, 0xFF	; 255
    1a04:	98 81       	ld	r25, Y
    1a06:	91 11       	cpse	r25, r1
    1a08:	0d c0       	rjmp	.+26     	; 0x1a24 <_Z10memoryGamev+0xc6>
				c1 = input;
    1a0a:	10 93 bd 00 	sts	0x00BD, r17	; 0x8000bd <c1>
			    if (control[c1-1] == 0) state = 1;  // promjena stanja jedino ako je u c1 spremljena karta koja nije pogodjena
    1a0e:	e1 2f       	mov	r30, r17
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	e3 54       	subi	r30, 0x43	; 67
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	81 11       	cpse	r24, r1
    1a1a:	1d c0       	rjmp	.+58     	; 0x1a56 <_Z10memoryGamev+0xf8>
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <state>
    1a22:	19 c0       	rjmp	.+50     	; 0x1a56 <_Z10memoryGamev+0xf8>
			}
			else if (state == 1 && control[c1-1] == 0) { // otvorena jedna karta, ne smijemo otvarati vec otvorenu kartu
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	b9 f4       	brne	.+46     	; 0x1a56 <_Z10memoryGamev+0xf8>
    1a28:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <c1>
    1a2c:	e8 2f       	mov	r30, r24
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	e3 54       	subi	r30, 0x43	; 67
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	90 81       	ld	r25, Z
    1a36:	91 11       	cpse	r25, r1
    1a38:	0e c0       	rjmp	.+28     	; 0x1a56 <_Z10memoryGamev+0xf8>
					c2 = input;
    1a3a:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <c2>
					if (c1 != c2 && control[c2-1] == 0) state = 2; // promjena stanja jedino ako je u c1 spremljena karta koja nije pogodjena i c1 i c2 su razliciti
    1a3e:	18 17       	cp	r17, r24
    1a40:	51 f0       	breq	.+20     	; 0x1a56 <_Z10memoryGamev+0xf8>
    1a42:	e1 2f       	mov	r30, r17
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	e3 54       	subi	r30, 0x43	; 67
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <_Z10memoryGamev+0xf8>
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <state>
    1a56:	2f ef       	ldi	r18, 0xFF	; 255
    1a58:	8f e3       	ldi	r24, 0x3F	; 63
    1a5a:	9b e0       	ldi	r25, 0x0B	; 11
    1a5c:	21 50       	subi	r18, 0x01	; 1
    1a5e:	80 40       	sbci	r24, 0x00	; 0
    1a60:	90 40       	sbci	r25, 0x00	; 0
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <_Z10memoryGamev+0xfe>
    1a64:	00 c0       	rjmp	.+0      	; 0x1a66 <_Z10memoryGamev+0x108>
    1a66:	00 00       	nop
    1a68:	7a cf       	rjmp	.-268    	; 0x195e <_Z10memoryGamev>

00001a6a <main>:
}

int main(void) {
	
	//T-IRQ spojen na PINB3 kao ulazni te je nizak samo pri dodiru, inace visok
	DDRB &= ~_BV(T_IRQ);
    1a6a:	87 b3       	in	r24, 0x17	; 23
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
    1a6e:	87 bb       	out	0x17, r24	; 23
	
	// timer za brojanje vremena
	TCCR0 = _BV(WGM01) | _BV(CS02) | _BV(CS00);
    1a70:	8d e0       	ldi	r24, 0x0D	; 13
    1a72:	83 bf       	out	0x33, r24	; 51
	OCR0 = 72;
    1a74:	88 e4       	ldi	r24, 0x48	; 72
    1a76:	8c bf       	out	0x3c, r24	; 60
	TIMSK = _BV(OCIE0);
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	89 bf       	out	0x39, r24	; 57
	sei();
    1a7c:	78 94       	sei

	SPI_Init();
    1a7e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <SPI_Init>
	SS_Enable;
    1a82:	88 b3       	in	r24, 0x18	; 24
    1a84:	8f 7e       	andi	r24, 0xEF	; 239
    1a86:	88 bb       	out	0x18, r24	; 24
	
	display.InitLCD(LANDSCAPE);
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	8e ed       	ldi	r24, 0xDE	; 222
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZN4UTFT7InitLCDEh>
	display.clrScr();
    1a92:	8e ed       	ldi	r24, 0xDE	; 222
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN4UTFT6clrScrEv>
	display.setFont(BigFont);
    1a9a:	62 e9       	ldi	r22, 0x92	; 146
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	8e ed       	ldi	r24, 0xDE	; 222
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 34 14 	call	0x2868	; 0x2868 <_ZN4UTFT7setFontEPKh>
	
	while (1) {
		display.print("Memory", CENTER, 20);
    1aa6:	00 e0       	ldi	r16, 0x00	; 0
    1aa8:	10 e0       	ldi	r17, 0x00	; 0
    1aaa:	24 e1       	ldi	r18, 0x14	; 20
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4e e0       	ldi	r20, 0x0E	; 14
    1ab0:	57 e2       	ldi	r21, 0x27	; 39
    1ab2:	60 ea       	ldi	r22, 0xA0	; 160
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	8e ed       	ldi	r24, 0xDE	; 222
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
		//display.print("Best moves: ", 40, 60); za kasnije main menu
		//if (bestMoves < 255) display.printNumI(bestMoves, 240, 60); // prikazi samo ako postoji high score
		display.print("Tap to start", CENTER, 120);
    1abe:	28 e7       	ldi	r18, 0x78	; 120
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4e e0       	ldi	r20, 0x0E	; 14
    1ac4:	57 e2       	ldi	r21, 0x27	; 39
    1ac6:	67 ea       	ldi	r22, 0xA7	; 167
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	8e ed       	ldi	r24, 0xDE	; 222
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
		
		memoryGame();
    1ad2:	0e 94 af 0c 	call	0x195e	; 0x195e <_Z10memoryGamev>

00001ad6 <_GLOBAL__sub_I_display>:
	}
}
    1ad6:	6f ef       	ldi	r22, 0xFF	; 255
    1ad8:	7f ef       	ldi	r23, 0xFF	; 255
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 63 07 	call	0xec6	; 0xec6 <_Z41__static_initialization_and_destruction_0ii>
    1ae2:	08 95       	ret

00001ae4 <SPI_Init>:
#include "SPI_Master_H_file.h"				/* Include SPI Master header file */


void SPI_Init()								/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);		/* Make MOSI, SCK, 0th pin direction as output pins */
    1ae4:	87 b3       	in	r24, 0x17	; 23
    1ae6:	80 6b       	ori	r24, 0xB0	; 176
    1ae8:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);						/* Make MISO pin as input pin */
    1aea:	87 b3       	in	r24, 0x17	; 23
    1aec:	8f 7b       	andi	r24, 0xBF	; 191
    1aee:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS);						/* Disable slave initially by making high on SS pin */
    1af0:	88 b3       	in	r24, 0x18	; 24
    1af2:	80 61       	ori	r24, 0x10	; 16
    1af4:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI, Enable in master mode, with Fosc/16 SCK frequency */
    1af6:	81 e5       	ldi	r24, 0x51	; 81
    1af8:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);					/* Disable speed doubler */
    1afa:	8e b1       	in	r24, 0x0e	; 14
    1afc:	8e 7f       	andi	r24, 0xFE	; 254
    1afe:	8e b9       	out	0x0e, r24	; 14
    1b00:	08 95       	ret

00001b02 <SPI_Write>:
}

void SPI_Write(char data)					/* SPI write data function */
{
	char flush_buffer;
	SPDR = data;							/* Write data to SPI data register */
    1b02:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
    1b04:	77 9b       	sbis	0x0e, 7	; 14
    1b06:	fe cf       	rjmp	.-4      	; 0x1b04 <SPI_Write+0x2>
	flush_buffer = SPDR;					/* Flush received data */
    1b08:	8f b1       	in	r24, 0x0f	; 15
    1b0a:	08 95       	ret

00001b0c <SPI_Read>:
/* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
}

char SPI_Read()								/* SPI read data function */
{
	SPDR = 0xFF;
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
    1b10:	77 9b       	sbis	0x0e, 7	; 14
    1b12:	fe cf       	rjmp	.-4      	; 0x1b10 <SPI_Read+0x4>
	return(SPDR);							/* return received data */
    1b14:	8f b1       	in	r24, 0x0f	; 15
}
    1b16:	08 95       	ret

00001b18 <SSD1289_init>:



void SSD1289_init()
{	
	DATA_PORT_LOW_DDR = 0xff;
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	81 bb       	out	0x11, r24	; 17
	DATA_PORT_HIGH_DDR = 0xff;
    1b1c:	8a bb       	out	0x1a, r24	; 26
			
	RS_PORT_DDR |= _BV( RS_PIN);
    1b1e:	84 b3       	in	r24, 0x14	; 20
    1b20:	80 68       	ori	r24, 0x80	; 128
    1b22:	84 bb       	out	0x14, r24	; 20
				
	WR_PORT_DDR |= _BV(WR_PIN);
    1b24:	84 b3       	in	r24, 0x14	; 20
    1b26:	80 64       	ori	r24, 0x40	; 64
    1b28:	84 bb       	out	0x14, r24	; 20

	CS_PORT_DDR |= _BV(CS_PIN);
    1b2a:	84 b3       	in	r24, 0x14	; 20
    1b2c:	81 60       	ori	r24, 0x01	; 1
    1b2e:	84 bb       	out	0x14, r24	; 20
		
	RD_PORT_DDR |= _BV(RD_PIN);
    1b30:	87 b3       	in	r24, 0x17	; 23
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	87 bb       	out	0x17, r24	; 23
	RD_PORT |= _BV(RD_PIN);
    1b36:	88 b3       	in	r24, 0x18	; 24
    1b38:	81 60       	ori	r24, 0x01	; 1
    1b3a:	88 bb       	out	0x18, r24	; 24
		
	RESET_PORT_DDR |= _BV(RESET_PIN);
    1b3c:	84 b3       	in	r24, 0x14	; 20
    1b3e:	82 60       	ori	r24, 0x02	; 2
    1b40:	84 bb       	out	0x14, r24	; 20
		
	BACK_LIGHT_PORT |= _BV(BACK_LIGHT_PIN);
    1b42:	88 b3       	in	r24, 0x18	; 24
    1b44:	82 60       	ori	r24, 0x02	; 2
    1b46:	88 bb       	out	0x18, r24	; 24
	
	BACK_LIGHT_DDR |= _BV(BACK_LIGHT_PIN);			
    1b48:	87 b3       	in	r24, 0x17	; 23
    1b4a:	82 60       	ori	r24, 0x02	; 2
    1b4c:	87 bb       	out	0x17, r24	; 23
	
	sbi(RESET_PORT, RESET_PIN);
    1b4e:	85 b3       	in	r24, 0x15	; 21
    1b50:	82 60       	ori	r24, 0x02	; 2
    1b52:	85 bb       	out	0x15, r24	; 21
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	93 e2       	ldi	r25, 0x23	; 35
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <SSD1289_init+0x40>
    1b5c:	00 c0       	rjmp	.+0      	; 0x1b5e <SSD1289_init+0x46>
    1b5e:	00 00       	nop
	_delay_ms(5);
	cbi(RESET_PORT, RESET_PIN);
    1b60:	85 b3       	in	r24, 0x15	; 21
    1b62:	8d 7f       	andi	r24, 0xFD	; 253
    1b64:	85 bb       	out	0x15, r24	; 21
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	9b e6       	ldi	r25, 0x6B	; 107
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <SSD1289_init+0x52>
    1b6e:	00 c0       	rjmp	.+0      	; 0x1b70 <SSD1289_init+0x58>
    1b70:	00 00       	nop
	_delay_ms(15);
	sbi(RESET_PORT, RESET_PIN);
    1b72:	85 b3       	in	r24, 0x15	; 21
    1b74:	82 60       	ori	r24, 0x02	; 2
    1b76:	85 bb       	out	0x15, r24	; 21
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	9b e6       	ldi	r25, 0x6B	; 107
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <SSD1289_init+0x64>
    1b80:	00 c0       	rjmp	.+0      	; 0x1b82 <SSD1289_init+0x6a>
    1b82:	00 00       	nop
	_delay_ms(15);

	cbi(CS_PORT, CS_PIN);
    1b84:	85 b3       	in	r24, 0x15	; 21
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	85 bb       	out	0x15, r24	; 21

	LCD_Write_COM_DATA(0x00,0x0001);
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x03,0xA8A4);
    1b94:	64 ea       	ldi	r22, 0xA4	; 164
    1b96:	78 ea       	ldi	r23, 0xA8	; 168
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0C,0x0000);
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	8c e0       	ldi	r24, 0x0C	; 12
    1ba4:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0D,0x080C);
    1ba8:	6c e0       	ldi	r22, 0x0C	; 12
    1baa:	78 e0       	ldi	r23, 0x08	; 8
    1bac:	8d e0       	ldi	r24, 0x0D	; 13
    1bae:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0E,0x2B00);
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	7b e2       	ldi	r23, 0x2B	; 43
    1bb6:	8e e0       	ldi	r24, 0x0E	; 14
    1bb8:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x1E,0x00B7);
    1bbc:	67 eb       	ldi	r22, 0xB7	; 183
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	8e e1       	ldi	r24, 0x1E	; 30
    1bc2:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x01,0x2B3F);
    1bc6:	6f e3       	ldi	r22, 0x3F	; 63
    1bc8:	7b e2       	ldi	r23, 0x2B	; 43
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x02,0x0600);
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	76 e0       	ldi	r23, 0x06	; 6
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x10,0x0000);
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	80 e1       	ldi	r24, 0x10	; 16
    1be0:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x11,0x6070);
    1be4:	60 e7       	ldi	r22, 0x70	; 112
    1be6:	70 e6       	ldi	r23, 0x60	; 96
    1be8:	81 e1       	ldi	r24, 0x11	; 17
    1bea:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x05,0x0000);
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x06,0x0000);
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	86 e0       	ldi	r24, 0x06	; 6
    1bfe:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x16,0xEF1C);
    1c02:	6c e1       	ldi	r22, 0x1C	; 28
    1c04:	7f ee       	ldi	r23, 0xEF	; 239
    1c06:	86 e1       	ldi	r24, 0x16	; 22
    1c08:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x17,0x0003);
    1c0c:	63 e0       	ldi	r22, 0x03	; 3
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	87 e1       	ldi	r24, 0x17	; 23
    1c12:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x07,0x0233);
    1c16:	63 e3       	ldi	r22, 0x33	; 51
    1c18:	72 e0       	ldi	r23, 0x02	; 2
    1c1a:	87 e0       	ldi	r24, 0x07	; 7
    1c1c:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0B,0x0000);
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	8b e0       	ldi	r24, 0x0B	; 11
    1c26:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0F,0x0000);
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	8f e0       	ldi	r24, 0x0F	; 15
    1c30:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x41,0x0000);
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	81 e4       	ldi	r24, 0x41	; 65
    1c3a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x42,0x0000);
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	82 e4       	ldi	r24, 0x42	; 66
    1c44:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x48,0x0000);
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	88 e4       	ldi	r24, 0x48	; 72
    1c4e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x49,0x013F);
    1c52:	6f e3       	ldi	r22, 0x3F	; 63
    1c54:	71 e0       	ldi	r23, 0x01	; 1
    1c56:	89 e4       	ldi	r24, 0x49	; 73
    1c58:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4A,0x0000);
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	8a e4       	ldi	r24, 0x4A	; 74
    1c62:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4B,0x0000);
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	8b e4       	ldi	r24, 0x4B	; 75
    1c6c:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x44,0xEF00);
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	7f ee       	ldi	r23, 0xEF	; 239
    1c74:	84 e4       	ldi	r24, 0x44	; 68
    1c76:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x45,0x0000);
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	85 e4       	ldi	r24, 0x45	; 69
    1c80:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x46,0x013F);
    1c84:	6f e3       	ldi	r22, 0x3F	; 63
    1c86:	71 e0       	ldi	r23, 0x01	; 1
    1c88:	86 e4       	ldi	r24, 0x46	; 70
    1c8a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x30,0x0707);
    1c8e:	67 e0       	ldi	r22, 0x07	; 7
    1c90:	77 e0       	ldi	r23, 0x07	; 7
    1c92:	80 e3       	ldi	r24, 0x30	; 48
    1c94:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x31,0x0204);
    1c98:	64 e0       	ldi	r22, 0x04	; 4
    1c9a:	72 e0       	ldi	r23, 0x02	; 2
    1c9c:	81 e3       	ldi	r24, 0x31	; 49
    1c9e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x32,0x0204);
    1ca2:	64 e0       	ldi	r22, 0x04	; 4
    1ca4:	72 e0       	ldi	r23, 0x02	; 2
    1ca6:	82 e3       	ldi	r24, 0x32	; 50
    1ca8:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x33,0x0502);
    1cac:	62 e0       	ldi	r22, 0x02	; 2
    1cae:	75 e0       	ldi	r23, 0x05	; 5
    1cb0:	83 e3       	ldi	r24, 0x33	; 51
    1cb2:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x34,0x0507);
    1cb6:	67 e0       	ldi	r22, 0x07	; 7
    1cb8:	75 e0       	ldi	r23, 0x05	; 5
    1cba:	84 e3       	ldi	r24, 0x34	; 52
    1cbc:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x35,0x0204);
    1cc0:	64 e0       	ldi	r22, 0x04	; 4
    1cc2:	72 e0       	ldi	r23, 0x02	; 2
    1cc4:	85 e3       	ldi	r24, 0x35	; 53
    1cc6:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x36,0x0204);
    1cca:	64 e0       	ldi	r22, 0x04	; 4
    1ccc:	72 e0       	ldi	r23, 0x02	; 2
    1cce:	86 e3       	ldi	r24, 0x36	; 54
    1cd0:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x37,0x0502);
    1cd4:	62 e0       	ldi	r22, 0x02	; 2
    1cd6:	75 e0       	ldi	r23, 0x05	; 5
    1cd8:	87 e3       	ldi	r24, 0x37	; 55
    1cda:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3A,0x0302);
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	73 e0       	ldi	r23, 0x03	; 3
    1ce2:	8a e3       	ldi	r24, 0x3A	; 58
    1ce4:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3B,0x0302);
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	73 e0       	ldi	r23, 0x03	; 3
    1cec:	8b e3       	ldi	r24, 0x3B	; 59
    1cee:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x23,0x0000);
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	83 e2       	ldi	r24, 0x23	; 35
    1cf8:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x24,0x0000);
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	84 e2       	ldi	r24, 0x24	; 36
    1d02:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x25,0x8000);
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e8       	ldi	r23, 0x80	; 128
    1d0a:	85 e2       	ldi	r24, 0x25	; 37
    1d0c:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4f,0x0000);
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	8f e4       	ldi	r24, 0x4F	; 79
    1d16:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4e,0x0000);
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	8e e4       	ldi	r24, 0x4E	; 78
    1d20:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM(0x22);
    1d24:	82 e2       	ldi	r24, 0x22	; 34
    1d26:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>


	sbi(CS_PORT, CS_PIN);
    1d2a:	85 b3       	in	r24, 0x15	; 21
    1d2c:	81 60       	ori	r24, 0x01	; 1
    1d2e:	85 bb       	out	0x15, r24	; 21
    1d30:	08 95       	ret

00001d32 <_ZN4UTFTC1Ev>:
		}
		st[c2+f]=0;
	}

	print(st,x,y);
}
    1d32:	4f ee       	ldi	r20, 0xEF	; 239
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	45 83       	std	Z+5, r20	; 0x05
    1d3e:	56 83       	std	Z+6, r21	; 0x06
    1d40:	67 83       	std	Z+7, r22	; 0x07
    1d42:	70 87       	std	Z+8, r23	; 0x08
    1d44:	4f e3       	ldi	r20, 0x3F	; 63
    1d46:	51 e0       	ldi	r21, 0x01	; 1
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	41 87       	std	Z+9, r20	; 0x09
    1d4e:	52 87       	std	Z+10, r21	; 0x0a
    1d50:	63 87       	std	Z+11, r22	; 0x0b
    1d52:	74 87       	std	Z+12, r23	; 0x0c
    1d54:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <SSD1289_init>
    1d58:	08 95       	ret

00001d5a <_ZN4UTFT5setXYEjjjj>:
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	eb 01       	movw	r28, r22
    1d68:	e4 2e       	mov	r14, r20
    1d6a:	f5 2e       	mov	r15, r21
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	44 81       	ldd	r20, Z+4	; 0x04
    1d70:	41 30       	cpi	r20, 0x01	; 1
    1d72:	89 f4       	brne	.+34     	; 0x1d96 <_ZN4UTFT5setXYEjjjj+0x3c>
    1d74:	81 85       	ldd	r24, Z+9	; 0x09
    1d76:	92 85       	ldd	r25, Z+10	; 0x0a
    1d78:	a3 85       	ldd	r26, Z+11	; 0x0b
    1d7a:	b4 85       	ldd	r27, Z+12	; 0x0c
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	46 1b       	sub	r20, r22
    1d80:	57 0b       	sbc	r21, r23
    1d82:	82 1b       	sub	r24, r18
    1d84:	93 0b       	sbc	r25, r19
    1d86:	20 2f       	mov	r18, r16
    1d88:	31 2f       	mov	r19, r17
    1d8a:	04 2f       	mov	r16, r20
    1d8c:	15 2f       	mov	r17, r21
    1d8e:	ce 2d       	mov	r28, r14
    1d90:	df 2d       	mov	r29, r15
    1d92:	e8 2e       	mov	r14, r24
    1d94:	f9 2e       	mov	r15, r25
    1d96:	32 2f       	mov	r19, r18
    1d98:	22 27       	eor	r18, r18
    1d9a:	be 01       	movw	r22, r28
    1d9c:	62 0f       	add	r22, r18
    1d9e:	73 1f       	adc	r23, r19
    1da0:	84 e4       	ldi	r24, 0x44	; 68
    1da2:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1da6:	6e 2d       	mov	r22, r14
    1da8:	7f 2d       	mov	r23, r15
    1daa:	85 e4       	ldi	r24, 0x45	; 69
    1dac:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1db0:	60 2f       	mov	r22, r16
    1db2:	71 2f       	mov	r23, r17
    1db4:	86 e4       	ldi	r24, 0x46	; 70
    1db6:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1dba:	be 01       	movw	r22, r28
    1dbc:	8e e4       	ldi	r24, 0x4E	; 78
    1dbe:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1dc2:	6e 2d       	mov	r22, r14
    1dc4:	7f 2d       	mov	r23, r15
    1dc6:	8f e4       	ldi	r24, 0x4F	; 79
    1dc8:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1dcc:	82 e2       	ldi	r24, 0x22	; 34
    1dce:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    1dd2:	85 b3       	in	r24, 0x15	; 21
    1dd4:	80 68       	ori	r24, 0x80	; 128
    1dd6:	85 bb       	out	0x15, r24	; 21
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	08 95       	ret

00001de6 <_ZN4UTFT8fillRectEiiii>:
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	4c 01       	movw	r8, r24
    1e00:	5b 01       	movw	r10, r22
    1e02:	7a 01       	movw	r14, r20
    1e04:	69 01       	movw	r12, r18
    1e06:	e8 01       	movw	r28, r16
    1e08:	26 17       	cp	r18, r22
    1e0a:	37 07       	cpc	r19, r23
    1e0c:	24 f4       	brge	.+8      	; 0x1e16 <_ZN4UTFT8fillRectEiiii+0x30>
    1e0e:	8b 2d       	mov	r24, r11
    1e10:	59 01       	movw	r10, r18
    1e12:	c6 2e       	mov	r12, r22
    1e14:	d8 2e       	mov	r13, r24
    1e16:	ce 15       	cp	r28, r14
    1e18:	df 05       	cpc	r29, r15
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <_ZN4UTFT8fillRectEiiii+0x40>
    1e1c:	9e 2d       	mov	r25, r14
    1e1e:	8f 2d       	mov	r24, r15
    1e20:	7e 01       	movw	r14, r28
    1e22:	c9 2f       	mov	r28, r25
    1e24:	d8 2f       	mov	r29, r24
    1e26:	85 b3       	in	r24, 0x15	; 21
    1e28:	8e 7f       	andi	r24, 0xFE	; 254
    1e2a:	85 bb       	out	0x15, r24	; 21
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	96 01       	movw	r18, r12
    1e30:	a7 01       	movw	r20, r14
    1e32:	b5 01       	movw	r22, r10
    1e34:	c4 01       	movw	r24, r8
    1e36:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN4UTFT5setXYEjjjj>
    1e3a:	f4 01       	movw	r30, r8
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8b bb       	out	0x1b, r24	; 27
    1e40:	81 81       	ldd	r24, Z+1	; 0x01
    1e42:	82 bb       	out	0x12, r24	; 18
    1e44:	96 01       	movw	r18, r12
    1e46:	2a 19       	sub	r18, r10
    1e48:	3b 09       	sbc	r19, r11
    1e4a:	c9 01       	movw	r24, r18
    1e4c:	33 0f       	add	r19, r19
    1e4e:	aa 0b       	sbc	r26, r26
    1e50:	bb 0b       	sbc	r27, r27
    1e52:	9c 01       	movw	r18, r24
    1e54:	ad 01       	movw	r20, r26
    1e56:	2f 5f       	subi	r18, 0xFF	; 255
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	be 01       	movw	r22, r28
    1e60:	6e 19       	sub	r22, r14
    1e62:	7f 09       	sbc	r23, r15
    1e64:	cb 01       	movw	r24, r22
    1e66:	77 0f       	add	r23, r23
    1e68:	aa 0b       	sbc	r26, r26
    1e6a:	bb 0b       	sbc	r27, r27
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	6f 5f       	subi	r22, 0xFF	; 255
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	8f 4f       	sbci	r24, 0xFF	; 255
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsi3>
    1e7c:	0e 94 f5 06 	call	0xdea	; 0xdea <fastfill>
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	82 bb       	out	0x12, r24	; 18
    1e84:	8b bb       	out	0x1b, r24	; 27
    1e86:	85 b3       	in	r24, 0x15	; 21
    1e88:	8e 7f       	andi	r24, 0xFE	; 254
    1e8a:	85 bb       	out	0x15, r24	; 21
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	08 95       	ret

00001ea6 <_ZN4UTFT6clrScrEv>:
    1ea6:	85 b3       	in	r24, 0x15	; 21
    1ea8:	8e 7f       	andi	r24, 0xFE	; 254
    1eaa:	85 bb       	out	0x15, r24	; 21
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	7f ee       	ldi	r23, 0xEF	; 239
    1eb0:	84 e4       	ldi	r24, 0x44	; 68
    1eb2:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	85 e4       	ldi	r24, 0x45	; 69
    1ebc:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1ec0:	6f e3       	ldi	r22, 0x3F	; 63
    1ec2:	71 e0       	ldi	r23, 0x01	; 1
    1ec4:	86 e4       	ldi	r24, 0x46	; 70
    1ec6:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	8e e4       	ldi	r24, 0x4E	; 78
    1ed0:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	8f e4       	ldi	r24, 0x4F	; 79
    1eda:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1ede:	68 e7       	ldi	r22, 0x78	; 120
    1ee0:	70 e6       	ldi	r23, 0x60	; 96
    1ee2:	81 e1       	ldi	r24, 0x11	; 17
    1ee4:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1ee8:	82 e2       	ldi	r24, 0x22	; 34
    1eea:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    1eee:	85 b3       	in	r24, 0x15	; 21
    1ef0:	80 68       	ori	r24, 0x80	; 128
    1ef2:	85 bb       	out	0x15, r24	; 21
    1ef4:	12 ba       	out	0x12, r1	; 18
    1ef6:	1b ba       	out	0x1b, r1	; 27
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	7c e2       	ldi	r23, 0x2C	; 44
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 f5 06 	call	0xdea	; 0xdea <fastfill>
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	82 bb       	out	0x12, r24	; 18
    1f08:	8b bb       	out	0x1b, r24	; 27
    1f0a:	85 b3       	in	r24, 0x15	; 21
    1f0c:	8e 7f       	andi	r24, 0xFE	; 254
    1f0e:	85 bb       	out	0x15, r24	; 21
    1f10:	08 95       	ret

00001f12 <_ZN4UTFT8setColorEhhh>:
    1f12:	e4 2f       	mov	r30, r20
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	f5 95       	asr	r31
    1f18:	e7 95       	ror	r30
    1f1a:	f5 95       	asr	r31
    1f1c:	e7 95       	ror	r30
    1f1e:	f5 95       	asr	r31
    1f20:	e7 95       	ror	r30
    1f22:	f5 95       	asr	r31
    1f24:	e7 95       	ror	r30
    1f26:	f5 95       	asr	r31
    1f28:	e7 95       	ror	r30
    1f2a:	68 7f       	andi	r22, 0xF8	; 248
    1f2c:	e6 2b       	or	r30, r22
    1f2e:	dc 01       	movw	r26, r24
    1f30:	ec 93       	st	X, r30
    1f32:	4c 71       	andi	r20, 0x1C	; 28
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	44 0f       	add	r20, r20
    1f3c:	55 1f       	adc	r21, r21
    1f3e:	44 0f       	add	r20, r20
    1f40:	55 1f       	adc	r21, r21
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	35 95       	asr	r19
    1f46:	27 95       	ror	r18
    1f48:	35 95       	asr	r19
    1f4a:	27 95       	ror	r18
    1f4c:	35 95       	asr	r19
    1f4e:	27 95       	ror	r18
    1f50:	42 2b       	or	r20, r18
    1f52:	11 96       	adiw	r26, 0x01	; 1
    1f54:	4c 93       	st	X, r20
    1f56:	08 95       	ret

00001f58 <_ZN4UTFT12setBackColorEhhh>:
    1f58:	e4 2f       	mov	r30, r20
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	f5 95       	asr	r31
    1f5e:	e7 95       	ror	r30
    1f60:	f5 95       	asr	r31
    1f62:	e7 95       	ror	r30
    1f64:	f5 95       	asr	r31
    1f66:	e7 95       	ror	r30
    1f68:	f5 95       	asr	r31
    1f6a:	e7 95       	ror	r30
    1f6c:	f5 95       	asr	r31
    1f6e:	e7 95       	ror	r30
    1f70:	68 7f       	andi	r22, 0xF8	; 248
    1f72:	e6 2b       	or	r30, r22
    1f74:	dc 01       	movw	r26, r24
    1f76:	12 96       	adiw	r26, 0x02	; 2
    1f78:	ec 93       	st	X, r30
    1f7a:	12 97       	sbiw	r26, 0x02	; 2
    1f7c:	4c 71       	andi	r20, 0x1C	; 28
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	44 0f       	add	r20, r20
    1f82:	55 1f       	adc	r21, r21
    1f84:	44 0f       	add	r20, r20
    1f86:	55 1f       	adc	r21, r21
    1f88:	44 0f       	add	r20, r20
    1f8a:	55 1f       	adc	r21, r21
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	35 95       	asr	r19
    1f90:	27 95       	ror	r18
    1f92:	35 95       	asr	r19
    1f94:	27 95       	ror	r18
    1f96:	35 95       	asr	r19
    1f98:	27 95       	ror	r18
    1f9a:	42 2b       	or	r20, r18
    1f9c:	13 96       	adiw	r26, 0x03	; 3
    1f9e:	4c 93       	st	X, r20
    1fa0:	08 95       	ret

00001fa2 <_ZN4UTFT7InitLCDEh>:
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	ec 01       	movw	r28, r24
    1fa8:	6c 83       	std	Y+4, r22	; 0x04
    1faa:	2f ef       	ldi	r18, 0xFF	; 255
    1fac:	4f ef       	ldi	r20, 0xFF	; 255
    1fae:	6f ef       	ldi	r22, 0xFF	; 255
    1fb0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN4UTFT8setColorEhhh>
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	ce 01       	movw	r24, r28
    1fbc:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN4UTFT12setBackColorEhhh>
    1fc0:	1e 86       	std	Y+14, r1	; 0x0e
    1fc2:	1d 86       	std	Y+13, r1	; 0x0d
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	08 95       	ret

00001fca <_ZN4UTFT8setPixelEj>:
    1fca:	87 2f       	mov	r24, r23
    1fcc:	0e 94 45 07 	call	0xe8a	; 0xe8a <LCD_Write_DATA>
    1fd0:	08 95       	ret

00001fd2 <_ZN4UTFT9printCharEhii>:
    1fd2:	af 92       	push	r10
    1fd4:	bf 92       	push	r11
    1fd6:	cf 92       	push	r12
    1fd8:	df 92       	push	r13
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	ec 01       	movw	r28, r24
    1fe8:	7a 01       	movw	r14, r20
    1fea:	89 01       	movw	r16, r18
    1fec:	85 b3       	in	r24, 0x15	; 21
    1fee:	8e 7f       	andi	r24, 0xFE	; 254
    1ff0:	85 bb       	out	0x15, r24	; 21
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	81 11       	cpse	r24, r1
    1ff6:	69 c0       	rjmp	.+210    	; 0x20ca <_ZN4UTFT9printCharEhii+0xf8>
    1ff8:	29 89       	ldd	r18, Y+17	; 0x11
    1ffa:	86 2f       	mov	r24, r22
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	82 1b       	sub	r24, r18
    2000:	91 09       	sbc	r25, r1
    2002:	4f 85       	ldd	r20, Y+15	; 0x0f
    2004:	54 2f       	mov	r21, r20
    2006:	56 95       	lsr	r21
    2008:	56 95       	lsr	r21
    200a:	56 95       	lsr	r21
    200c:	28 89       	ldd	r18, Y+16	; 0x10
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	52 9f       	mul	r21, r18
    2012:	b0 01       	movw	r22, r0
    2014:	53 9f       	mul	r21, r19
    2016:	70 0d       	add	r23, r0
    2018:	11 24       	eor	r1, r1
    201a:	86 9f       	mul	r24, r22
    201c:	60 01       	movw	r12, r0
    201e:	87 9f       	mul	r24, r23
    2020:	d0 0c       	add	r13, r0
    2022:	96 9f       	mul	r25, r22
    2024:	d0 0c       	add	r13, r0
    2026:	11 24       	eor	r1, r1
    2028:	84 e0       	ldi	r24, 0x04	; 4
    202a:	c8 0e       	add	r12, r24
    202c:	d1 1c       	adc	r13, r1
    202e:	c7 01       	movw	r24, r14
    2030:	84 0f       	add	r24, r20
    2032:	91 1d       	adc	r25, r1
    2034:	20 0f       	add	r18, r16
    2036:	31 1f       	adc	r19, r17
    2038:	59 01       	movw	r10, r18
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	a4 1a       	sub	r10, r20
    203e:	b1 08       	sbc	r11, r1
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	7f ef       	ldi	r23, 0xFF	; 255
    2046:	78 0f       	add	r23, r24
    2048:	6e 0d       	add	r22, r14
    204a:	7f 1d       	adc	r23, r15
    204c:	84 e4       	ldi	r24, 0x44	; 68
    204e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    2052:	b8 01       	movw	r22, r16
    2054:	85 e4       	ldi	r24, 0x45	; 69
    2056:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    205a:	b5 01       	movw	r22, r10
    205c:	86 e4       	ldi	r24, 0x46	; 70
    205e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    2062:	b7 01       	movw	r22, r14
    2064:	8e e4       	ldi	r24, 0x4E	; 78
    2066:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    206a:	b8 01       	movw	r22, r16
    206c:	8f e4       	ldi	r24, 0x4F	; 79
    206e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    2072:	60 e7       	ldi	r22, 0x70	; 112
    2074:	70 e6       	ldi	r23, 0x60	; 96
    2076:	81 e1       	ldi	r24, 0x11	; 17
    2078:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    207c:	82 e2       	ldi	r24, 0x22	; 34
    207e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    2082:	85 b3       	in	r24, 0x15	; 21
    2084:	80 68       	ori	r24, 0x80	; 128
    2086:	85 bb       	out	0x15, r24	; 21
    2088:	2a 81       	ldd	r18, Y+2	; 0x02
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	32 2f       	mov	r19, r18
    208e:	22 27       	eor	r18, r18
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	28 2b       	or	r18, r24
    2094:	48 81       	ld	r20, Y
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	54 2f       	mov	r21, r20
    209a:	44 27       	eor	r20, r20
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	48 2b       	or	r20, r24
    20a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    20a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    20a4:	6c 0d       	add	r22, r12
    20a6:	7d 1d       	adc	r23, r13
    20a8:	88 89       	ldd	r24, Y+16	; 0x10
    20aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ac:	89 9f       	mul	r24, r25
    20ae:	c0 01       	movw	r24, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	99 23       	and	r25, r25
    20b4:	0c f4       	brge	.+2      	; 0x20b8 <_ZN4UTFT9printCharEhii+0xe6>
    20b6:	07 96       	adiw	r24, 0x07	; 7
    20b8:	95 95       	asr	r25
    20ba:	87 95       	ror	r24
    20bc:	95 95       	asr	r25
    20be:	87 95       	ror	r24
    20c0:	95 95       	asr	r25
    20c2:	87 95       	ror	r24
    20c4:	0e 94 66 06 	call	0xccc	; 0xccc <fastbitmap_1bit>
    20c8:	6f c0       	rjmp	.+222    	; 0x21a8 <_ZN4UTFT9printCharEhii+0x1d6>
    20ca:	29 89       	ldd	r18, Y+17	; 0x11
    20cc:	86 2f       	mov	r24, r22
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	82 1b       	sub	r24, r18
    20d2:	91 09       	sbc	r25, r1
    20d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    20d6:	54 2f       	mov	r21, r20
    20d8:	56 95       	lsr	r21
    20da:	56 95       	lsr	r21
    20dc:	56 95       	lsr	r21
    20de:	28 89       	ldd	r18, Y+16	; 0x10
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	52 9f       	mul	r21, r18
    20e4:	b0 01       	movw	r22, r0
    20e6:	53 9f       	mul	r21, r19
    20e8:	70 0d       	add	r23, r0
    20ea:	11 24       	eor	r1, r1
    20ec:	86 9f       	mul	r24, r22
    20ee:	60 01       	movw	r12, r0
    20f0:	87 9f       	mul	r24, r23
    20f2:	d0 0c       	add	r13, r0
    20f4:	96 9f       	mul	r25, r22
    20f6:	d0 0c       	add	r13, r0
    20f8:	11 24       	eor	r1, r1
    20fa:	84 e0       	ldi	r24, 0x04	; 4
    20fc:	c8 0e       	add	r12, r24
    20fe:	d1 1c       	adc	r13, r1
    2100:	c7 01       	movw	r24, r14
    2102:	84 0f       	add	r24, r20
    2104:	91 1d       	adc	r25, r1
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	20 0f       	add	r18, r16
    210a:	31 1f       	adc	r19, r17
    210c:	49 85       	ldd	r20, Y+9	; 0x09
    210e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2110:	6b 85       	ldd	r22, Y+11	; 0x0b
    2112:	7c 85       	ldd	r23, Y+12	; 0x0c
    2114:	5a 01       	movw	r10, r20
    2116:	ae 18       	sub	r10, r14
    2118:	bf 08       	sbc	r11, r15
    211a:	7a 01       	movw	r14, r20
    211c:	e8 1a       	sub	r14, r24
    211e:	f9 0a       	sbc	r15, r25
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	7f ef       	ldi	r23, 0xFF	; 255
    2126:	72 0f       	add	r23, r18
    2128:	60 0f       	add	r22, r16
    212a:	71 1f       	adc	r23, r17
    212c:	84 e4       	ldi	r24, 0x44	; 68
    212e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    2132:	b7 01       	movw	r22, r14
    2134:	85 e4       	ldi	r24, 0x45	; 69
    2136:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    213a:	b5 01       	movw	r22, r10
    213c:	86 e4       	ldi	r24, 0x46	; 70
    213e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    2142:	b8 01       	movw	r22, r16
    2144:	8e e4       	ldi	r24, 0x4E	; 78
    2146:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    214a:	b5 01       	movw	r22, r10
    214c:	8f e4       	ldi	r24, 0x4F	; 79
    214e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    2152:	68 e5       	ldi	r22, 0x58	; 88
    2154:	70 e6       	ldi	r23, 0x60	; 96
    2156:	81 e1       	ldi	r24, 0x11	; 17
    2158:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    215c:	82 e2       	ldi	r24, 0x22	; 34
    215e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    2162:	85 b3       	in	r24, 0x15	; 21
    2164:	80 68       	ori	r24, 0x80	; 128
    2166:	85 bb       	out	0x15, r24	; 21
    2168:	2a 81       	ldd	r18, Y+2	; 0x02
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	32 2f       	mov	r19, r18
    216e:	22 27       	eor	r18, r18
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	28 2b       	or	r18, r24
    2174:	48 81       	ld	r20, Y
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	54 2f       	mov	r21, r20
    217a:	44 27       	eor	r20, r20
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	48 2b       	or	r20, r24
    2180:	6d 85       	ldd	r22, Y+13	; 0x0d
    2182:	7e 85       	ldd	r23, Y+14	; 0x0e
    2184:	6c 0d       	add	r22, r12
    2186:	7d 1d       	adc	r23, r13
    2188:	88 89       	ldd	r24, Y+16	; 0x10
    218a:	9f 85       	ldd	r25, Y+15	; 0x0f
    218c:	89 9f       	mul	r24, r25
    218e:	c0 01       	movw	r24, r0
    2190:	11 24       	eor	r1, r1
    2192:	99 23       	and	r25, r25
    2194:	0c f4       	brge	.+2      	; 0x2198 <_ZN4UTFT9printCharEhii+0x1c6>
    2196:	07 96       	adiw	r24, 0x07	; 7
    2198:	95 95       	asr	r25
    219a:	87 95       	ror	r24
    219c:	95 95       	asr	r25
    219e:	87 95       	ror	r24
    21a0:	95 95       	asr	r25
    21a2:	87 95       	ror	r24
    21a4:	0e 94 66 06 	call	0xccc	; 0xccc <fastbitmap_1bit>
    21a8:	85 b3       	in	r24, 0x15	; 21
    21aa:	81 60       	ori	r24, 0x01	; 1
    21ac:	85 bb       	out	0x15, r24	; 21
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	bf 90       	pop	r11
    21c0:	af 90       	pop	r10
    21c2:	08 95       	ret

000021c4 <_ZN4UTFT10rotateCharEhiiii>:
    21c4:	2f 92       	push	r2
    21c6:	3f 92       	push	r3
    21c8:	4f 92       	push	r4
    21ca:	5f 92       	push	r5
    21cc:	6f 92       	push	r6
    21ce:	7f 92       	push	r7
    21d0:	8f 92       	push	r8
    21d2:	9f 92       	push	r9
    21d4:	af 92       	push	r10
    21d6:	bf 92       	push	r11
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	6b 97       	sbiw	r28, 0x1b	; 27
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	5c 01       	movw	r10, r24
    21fa:	69 83       	std	Y+1, r22	; 0x01
    21fc:	3a 01       	movw	r6, r20
    21fe:	49 01       	movw	r8, r18
    2200:	1f 8b       	std	Y+23, r17	; 0x17
    2202:	0e 8b       	std	Y+22, r16	; 0x16
    2204:	b7 01       	movw	r22, r14
    2206:	ff 0c       	add	r15, r15
    2208:	88 0b       	sbc	r24, r24
    220a:	99 0b       	sbc	r25, r25
    220c:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
    2210:	29 e2       	ldi	r18, 0x29	; 41
    2212:	3c e5       	ldi	r19, 0x5C	; 92
    2214:	4f e8       	ldi	r20, 0x8F	; 143
    2216:	5c e3       	ldi	r21, 0x3C	; 60
    2218:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
    221c:	69 8b       	std	Y+17, r22	; 0x11
    221e:	7a 8b       	std	Y+18, r23	; 0x12
    2220:	8b 8b       	std	Y+19, r24	; 0x13
    2222:	9c 8b       	std	Y+20, r25	; 0x14
    2224:	85 b3       	in	r24, 0x15	; 21
    2226:	8e 7f       	andi	r24, 0xFE	; 254
    2228:	85 bb       	out	0x15, r24	; 21
    222a:	d5 01       	movw	r26, r10
    222c:	51 96       	adiw	r26, 0x11	; 17
    222e:	8c 91       	ld	r24, X
    2230:	b9 81       	ldd	r27, Y+1	; 0x01
    2232:	2b 2f       	mov	r18, r27
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	28 1b       	sub	r18, r24
    2238:	31 09       	sbc	r19, r1
    223a:	f5 01       	movw	r30, r10
    223c:	87 85       	ldd	r24, Z+15	; 0x0f
    223e:	86 95       	lsr	r24
    2240:	86 95       	lsr	r24
    2242:	86 95       	lsr	r24
    2244:	90 89       	ldd	r25, Z+16	; 0x10
    2246:	89 9f       	mul	r24, r25
    2248:	c0 01       	movw	r24, r0
    224a:	11 24       	eor	r1, r1
    224c:	28 9f       	mul	r18, r24
    224e:	a0 01       	movw	r20, r0
    2250:	29 9f       	mul	r18, r25
    2252:	50 0d       	add	r21, r0
    2254:	38 9f       	mul	r19, r24
    2256:	50 0d       	add	r21, r0
    2258:	11 24       	eor	r1, r1
    225a:	9a 01       	movw	r18, r20
    225c:	2c 5f       	subi	r18, 0xFC	; 252
    225e:	3f 4f       	sbci	r19, 0xFF	; 255
    2260:	39 8f       	std	Y+25, r19	; 0x19
    2262:	28 8f       	std	Y+24, r18	; 0x18
    2264:	1d 8a       	std	Y+21, r1	; 0x15
    2266:	d5 01       	movw	r26, r10
    2268:	50 96       	adiw	r26, 0x10	; 16
    226a:	8c 91       	ld	r24, X
    226c:	bd 89       	ldd	r27, Y+21	; 0x15
    226e:	b8 17       	cp	r27, r24
    2270:	08 f0       	brcs	.+2      	; 0x2274 <_ZN4UTFT10rotateCharEhiiii+0xb0>
    2272:	fb c0       	rjmp	.+502    	; 0x246a <_ZN4UTFT10rotateCharEhiiii+0x2a6>
    2274:	41 2c       	mov	r4, r1
    2276:	51 2c       	mov	r5, r1
    2278:	f5 01       	movw	r30, r10
    227a:	87 85       	ldd	r24, Z+15	; 0x0f
    227c:	86 95       	lsr	r24
    227e:	86 95       	lsr	r24
    2280:	86 95       	lsr	r24
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	42 16       	cp	r4, r18
    2288:	53 06       	cpc	r5, r19
    228a:	0c f0       	brlt	.+2      	; 0x228e <_ZN4UTFT10rotateCharEhiiii+0xca>
    228c:	e4 c0       	rjmp	.+456    	; 0x2456 <_ZN4UTFT10rotateCharEhiiii+0x292>
    228e:	05 84       	ldd	r0, Z+13	; 0x0d
    2290:	f6 85       	ldd	r31, Z+14	; 0x0e
    2292:	e0 2d       	mov	r30, r0
    2294:	88 8d       	ldd	r24, Y+24	; 0x18
    2296:	99 8d       	ldd	r25, Y+25	; 0x19
    2298:	84 0d       	add	r24, r4
    229a:	95 1d       	adc	r25, r5
    229c:	e8 0f       	add	r30, r24
    229e:	f9 1f       	adc	r31, r25
    22a0:	24 90       	lpm	r2, Z
    22a2:	31 2c       	mov	r3, r1
    22a4:	3a 8e       	std	Y+26, r3	; 0x1a
    22a6:	2b 8e       	std	Y+27, r2	; 0x1b
    22a8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    22aa:	f8 30       	cpi	r31, 0x08	; 8
    22ac:	08 f0       	brcs	.+2      	; 0x22b0 <_ZN4UTFT10rotateCharEhiiii+0xec>
    22ae:	cf c0       	rjmp	.+414    	; 0x244e <_ZN4UTFT10rotateCharEhiiii+0x28a>
    22b0:	2f 2e       	mov	r2, r31
    22b2:	31 2c       	mov	r3, r1
    22b4:	b2 01       	movw	r22, r4
    22b6:	66 0f       	add	r22, r22
    22b8:	77 1f       	adc	r23, r23
    22ba:	66 0f       	add	r22, r22
    22bc:	77 1f       	adc	r23, r23
    22be:	66 0f       	add	r22, r22
    22c0:	77 1f       	adc	r23, r23
    22c2:	62 0d       	add	r22, r2
    22c4:	73 1d       	adc	r23, r3
    22c6:	d5 01       	movw	r26, r10
    22c8:	1f 96       	adiw	r26, 0x0f	; 15
    22ca:	2c 91       	ld	r18, X
    22cc:	ee 89       	ldd	r30, Y+22	; 0x16
    22ce:	ff 89       	ldd	r31, Y+23	; 0x17
    22d0:	2e 9f       	mul	r18, r30
    22d2:	c0 01       	movw	r24, r0
    22d4:	2f 9f       	mul	r18, r31
    22d6:	90 0d       	add	r25, r0
    22d8:	11 24       	eor	r1, r1
    22da:	68 0f       	add	r22, r24
    22dc:	79 1f       	adc	r23, r25
    22de:	07 2e       	mov	r0, r23
    22e0:	00 0c       	add	r0, r0
    22e2:	88 0b       	sbc	r24, r24
    22e4:	99 0b       	sbc	r25, r25
    22e6:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
    22ea:	69 83       	std	Y+1, r22	; 0x01
    22ec:	7a 83       	std	Y+2, r23	; 0x02
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	69 89       	ldd	r22, Y+17	; 0x11
    22f4:	7a 89       	ldd	r23, Y+18	; 0x12
    22f6:	8b 89       	ldd	r24, Y+19	; 0x13
    22f8:	9c 89       	ldd	r25, Y+20	; 0x14
    22fa:	0e 94 c1 14 	call	0x2982	; 0x2982 <cos>
    22fe:	6d 83       	std	Y+5, r22	; 0x05
    2300:	7e 83       	std	Y+6, r23	; 0x06
    2302:	8f 83       	std	Y+7, r24	; 0x07
    2304:	98 87       	std	Y+8, r25	; 0x08
    2306:	9b 01       	movw	r18, r22
    2308:	ac 01       	movw	r20, r24
    230a:	69 81       	ldd	r22, Y+1	; 0x01
    230c:	7a 81       	ldd	r23, Y+2	; 0x02
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
    2316:	6b 01       	movw	r12, r22
    2318:	7c 01       	movw	r14, r24
    231a:	fd 89       	ldd	r31, Y+21	; 0x15
    231c:	6f 2f       	mov	r22, r31
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
    2328:	69 87       	std	Y+9, r22	; 0x09
    232a:	7a 87       	std	Y+10, r23	; 0x0a
    232c:	8b 87       	std	Y+11, r24	; 0x0b
    232e:	9c 87       	std	Y+12, r25	; 0x0c
    2330:	69 89       	ldd	r22, Y+17	; 0x11
    2332:	7a 89       	ldd	r23, Y+18	; 0x12
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <sin>
    233c:	6d 87       	std	Y+13, r22	; 0x0d
    233e:	7e 87       	std	Y+14, r23	; 0x0e
    2340:	8f 87       	std	Y+15, r24	; 0x0f
    2342:	98 8b       	std	Y+16, r25	; 0x10
    2344:	9b 01       	movw	r18, r22
    2346:	ac 01       	movw	r20, r24
    2348:	69 85       	ldd	r22, Y+9	; 0x09
    234a:	7a 85       	ldd	r23, Y+10	; 0x0a
    234c:	8b 85       	ldd	r24, Y+11	; 0x0b
    234e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2350:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
    2354:	9b 01       	movw	r18, r22
    2356:	ac 01       	movw	r20, r24
    2358:	c7 01       	movw	r24, r14
    235a:	b6 01       	movw	r22, r12
    235c:	0e 94 4f 14 	call	0x289e	; 0x289e <__subsf3>
    2360:	6b 01       	movw	r12, r22
    2362:	7c 01       	movw	r14, r24
    2364:	b3 01       	movw	r22, r6
    2366:	07 2c       	mov	r0, r7
    2368:	00 0c       	add	r0, r0
    236a:	88 0b       	sbc	r24, r24
    236c:	99 0b       	sbc	r25, r25
    236e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
    2372:	a7 01       	movw	r20, r14
    2374:	96 01       	movw	r18, r12
    2376:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__addsf3>
    237a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__fixsfsi>
    237e:	6b 01       	movw	r12, r22
    2380:	7c 01       	movw	r14, r24
    2382:	29 85       	ldd	r18, Y+9	; 0x09
    2384:	3a 85       	ldd	r19, Y+10	; 0x0a
    2386:	4b 85       	ldd	r20, Y+11	; 0x0b
    2388:	5c 85       	ldd	r21, Y+12	; 0x0c
    238a:	6d 81       	ldd	r22, Y+5	; 0x05
    238c:	7e 81       	ldd	r23, Y+6	; 0x06
    238e:	8f 81       	ldd	r24, Y+7	; 0x07
    2390:	98 85       	ldd	r25, Y+8	; 0x08
    2392:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
    2396:	6d 83       	std	Y+5, r22	; 0x05
    2398:	7e 83       	std	Y+6, r23	; 0x06
    239a:	8f 83       	std	Y+7, r24	; 0x07
    239c:	98 87       	std	Y+8, r25	; 0x08
    239e:	2d 85       	ldd	r18, Y+13	; 0x0d
    23a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    23a2:	4f 85       	ldd	r20, Y+15	; 0x0f
    23a4:	58 89       	ldd	r21, Y+16	; 0x10
    23a6:	69 81       	ldd	r22, Y+1	; 0x01
    23a8:	7a 81       	ldd	r23, Y+2	; 0x02
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
    23b2:	9b 01       	movw	r18, r22
    23b4:	ac 01       	movw	r20, r24
    23b6:	6d 81       	ldd	r22, Y+5	; 0x05
    23b8:	7e 81       	ldd	r23, Y+6	; 0x06
    23ba:	8f 81       	ldd	r24, Y+7	; 0x07
    23bc:	98 85       	ldd	r25, Y+8	; 0x08
    23be:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__addsf3>
    23c2:	69 83       	std	Y+1, r22	; 0x01
    23c4:	7a 83       	std	Y+2, r23	; 0x02
    23c6:	8b 83       	std	Y+3, r24	; 0x03
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	b4 01       	movw	r22, r8
    23cc:	09 2c       	mov	r0, r9
    23ce:	00 0c       	add	r0, r0
    23d0:	88 0b       	sbc	r24, r24
    23d2:	99 0b       	sbc	r25, r25
    23d4:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
    23d8:	29 81       	ldd	r18, Y+1	; 0x01
    23da:	3a 81       	ldd	r19, Y+2	; 0x02
    23dc:	4b 81       	ldd	r20, Y+3	; 0x03
    23de:	5c 81       	ldd	r21, Y+4	; 0x04
    23e0:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__addsf3>
    23e4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__fixsfsi>
    23e8:	8b 01       	movw	r16, r22
    23ea:	0f 5f       	subi	r16, 0xFF	; 255
    23ec:	1f 4f       	sbci	r17, 0xFF	; 255
    23ee:	96 01       	movw	r18, r12
    23f0:	2f 5f       	subi	r18, 0xFF	; 255
    23f2:	3f 4f       	sbci	r19, 0xFF	; 255
    23f4:	ab 01       	movw	r20, r22
    23f6:	b6 01       	movw	r22, r12
    23f8:	c5 01       	movw	r24, r10
    23fa:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN4UTFT5setXYEjjjj>
    23fe:	27 e0       	ldi	r18, 0x07	; 7
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	22 19       	sub	r18, r2
    2404:	33 09       	sbc	r19, r3
    2406:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2408:	84 2f       	mov	r24, r20
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <_ZN4UTFT10rotateCharEhiiii+0x24e>
    240e:	95 95       	asr	r25
    2410:	87 95       	ror	r24
    2412:	2a 95       	dec	r18
    2414:	e2 f7       	brpl	.-8      	; 0x240e <_ZN4UTFT10rotateCharEhiiii+0x24a>
    2416:	80 ff       	sbrs	r24, 0
    2418:	0c c0       	rjmp	.+24     	; 0x2432 <_ZN4UTFT10rotateCharEhiiii+0x26e>
    241a:	d5 01       	movw	r26, r10
    241c:	6c 91       	ld	r22, X
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	76 2f       	mov	r23, r22
    2422:	66 27       	eor	r22, r22
    2424:	11 96       	adiw	r26, 0x01	; 1
    2426:	8c 91       	ld	r24, X
    2428:	68 2b       	or	r22, r24
    242a:	c5 01       	movw	r24, r10
    242c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN4UTFT8setPixelEj>
    2430:	0a c0       	rjmp	.+20     	; 0x2446 <_ZN4UTFT10rotateCharEhiiii+0x282>
    2432:	f5 01       	movw	r30, r10
    2434:	62 81       	ldd	r22, Z+2	; 0x02
    2436:	70 e0       	ldi	r23, 0x00	; 0
    2438:	76 2f       	mov	r23, r22
    243a:	66 27       	eor	r22, r22
    243c:	83 81       	ldd	r24, Z+3	; 0x03
    243e:	68 2b       	or	r22, r24
    2440:	c5 01       	movw	r24, r10
    2442:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN4UTFT8setPixelEj>
    2446:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2448:	ff 5f       	subi	r31, 0xFF	; 255
    244a:	fa 8f       	std	Y+26, r31	; 0x1a
    244c:	2d cf       	rjmp	.-422    	; 0x22a8 <_ZN4UTFT10rotateCharEhiiii+0xe4>
    244e:	2f ef       	ldi	r18, 0xFF	; 255
    2450:	42 1a       	sub	r4, r18
    2452:	52 0a       	sbc	r5, r18
    2454:	11 cf       	rjmp	.-478    	; 0x2278 <_ZN4UTFT10rotateCharEhiiii+0xb4>
    2456:	48 8d       	ldd	r20, Y+24	; 0x18
    2458:	59 8d       	ldd	r21, Y+25	; 0x19
    245a:	48 0f       	add	r20, r24
    245c:	51 1d       	adc	r21, r1
    245e:	59 8f       	std	Y+25, r21	; 0x19
    2460:	48 8f       	std	Y+24, r20	; 0x18
    2462:	5d 89       	ldd	r21, Y+21	; 0x15
    2464:	5f 5f       	subi	r21, 0xFF	; 255
    2466:	5d 8b       	std	Y+21, r21	; 0x15
    2468:	fe ce       	rjmp	.-516    	; 0x2266 <_ZN4UTFT10rotateCharEhiiii+0xa2>
    246a:	85 b3       	in	r24, 0x15	; 21
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	85 bb       	out	0x15, r24	; 21
    2470:	6b 96       	adiw	r28, 0x1b	; 27
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	7f 90       	pop	r7
    2496:	6f 90       	pop	r6
    2498:	5f 90       	pop	r5
    249a:	4f 90       	pop	r4
    249c:	3f 90       	pop	r3
    249e:	2f 90       	pop	r2
    24a0:	08 95       	ret

000024a2 <_ZN4UTFT5printEPKciii>:
    24a2:	2f 92       	push	r2
    24a4:	3f 92       	push	r3
    24a6:	4f 92       	push	r4
    24a8:	5f 92       	push	r5
    24aa:	6f 92       	push	r6
    24ac:	7f 92       	push	r7
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	ec 01       	movw	r28, r24
    24c8:	fb 01       	movw	r30, r22
    24ca:	5a 01       	movw	r10, r20
    24cc:	29 01       	movw	r4, r18
    24ce:	68 01       	movw	r12, r16
    24d0:	db 01       	movw	r26, r22
    24d2:	0d 90       	ld	r0, X+
    24d4:	00 20       	and	r0, r0
    24d6:	e9 f7       	brne	.-6      	; 0x24d2 <_ZN4UTFT5printEPKciii+0x30>
    24d8:	11 97       	sbiw	r26, 0x01	; 1
    24da:	a6 1b       	sub	r26, r22
    24dc:	b7 0b       	sbc	r27, r23
    24de:	4d 01       	movw	r8, r26
    24e0:	8c 81       	ldd	r24, Y+4	; 0x04
    24e2:	81 11       	cpse	r24, r1
    24e4:	3e c0       	rjmp	.+124    	; 0x2562 <_ZN4UTFT5printEPKciii+0xc0>
    24e6:	4f 30       	cpi	r20, 0x0F	; 15
    24e8:	57 42       	sbci	r21, 0x27	; 39
    24ea:	81 f4       	brne	.+32     	; 0x250c <_ZN4UTFT5printEPKciii+0x6a>
    24ec:	4d 81       	ldd	r20, Y+5	; 0x05
    24ee:	5e 81       	ldd	r21, Y+6	; 0x06
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    24f6:	2a 9f       	mul	r18, r26
    24f8:	c0 01       	movw	r24, r0
    24fa:	2b 9f       	mul	r18, r27
    24fc:	90 0d       	add	r25, r0
    24fe:	11 24       	eor	r1, r1
    2500:	48 1b       	sub	r20, r24
    2502:	59 0b       	sbc	r21, r25
    2504:	5a 01       	movw	r10, r20
    2506:	1f ef       	ldi	r17, 0xFF	; 255
    2508:	a1 1a       	sub	r10, r17
    250a:	b1 0a       	sbc	r11, r17
    250c:	2e e0       	ldi	r18, 0x0E	; 14
    250e:	a2 16       	cp	r10, r18
    2510:	27 e2       	ldi	r18, 0x27	; 39
    2512:	b2 06       	cpc	r11, r18
    2514:	09 f0       	breq	.+2      	; 0x2518 <_ZN4UTFT5printEPKciii+0x76>
    2516:	61 c0       	rjmp	.+194    	; 0x25da <_ZN4UTFT5printEPKciii+0x138>
    2518:	4d 81       	ldd	r20, Y+5	; 0x05
    251a:	5e 81       	ldd	r21, Y+6	; 0x06
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	4f 5f       	subi	r20, 0xFF	; 255
    2522:	5f 4f       	sbci	r21, 0xFF	; 255
    2524:	6f 4f       	sbci	r22, 0xFF	; 255
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	2f 85       	ldd	r18, Y+15	; 0x0f
    252a:	2a 9f       	mul	r18, r26
    252c:	c0 01       	movw	r24, r0
    252e:	2b 9f       	mul	r18, r27
    2530:	90 0d       	add	r25, r0
    2532:	11 24       	eor	r1, r1
    2534:	09 2e       	mov	r0, r25
    2536:	00 0c       	add	r0, r0
    2538:	aa 0b       	sbc	r26, r26
    253a:	bb 0b       	sbc	r27, r27
    253c:	8a 01       	movw	r16, r20
    253e:	9b 01       	movw	r18, r22
    2540:	08 1b       	sub	r16, r24
    2542:	19 0b       	sbc	r17, r25
    2544:	2a 0b       	sbc	r18, r26
    2546:	3b 0b       	sbc	r19, r27
    2548:	b9 01       	movw	r22, r18
    254a:	a8 01       	movw	r20, r16
    254c:	22 f4       	brpl	.+8      	; 0x2556 <_ZN4UTFT5printEPKciii+0xb4>
    254e:	4f 5f       	subi	r20, 0xFF	; 255
    2550:	5f 4f       	sbci	r21, 0xFF	; 255
    2552:	6f 4f       	sbci	r22, 0xFF	; 255
    2554:	7f 4f       	sbci	r23, 0xFF	; 255
    2556:	75 95       	asr	r23
    2558:	67 95       	ror	r22
    255a:	57 95       	ror	r21
    255c:	47 95       	ror	r20
    255e:	5a 01       	movw	r10, r20
    2560:	3c c0       	rjmp	.+120    	; 0x25da <_ZN4UTFT5printEPKciii+0x138>
    2562:	4f 30       	cpi	r20, 0x0F	; 15
    2564:	57 42       	sbci	r21, 0x27	; 39
    2566:	81 f4       	brne	.+32     	; 0x2588 <_ZN4UTFT5printEPKciii+0xe6>
    2568:	49 85       	ldd	r20, Y+9	; 0x09
    256a:	5a 85       	ldd	r21, Y+10	; 0x0a
    256c:	6b 85       	ldd	r22, Y+11	; 0x0b
    256e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2570:	2f 85       	ldd	r18, Y+15	; 0x0f
    2572:	2a 9f       	mul	r18, r26
    2574:	c0 01       	movw	r24, r0
    2576:	2b 9f       	mul	r18, r27
    2578:	90 0d       	add	r25, r0
    257a:	11 24       	eor	r1, r1
    257c:	48 1b       	sub	r20, r24
    257e:	59 0b       	sbc	r21, r25
    2580:	5a 01       	movw	r10, r20
    2582:	2f ef       	ldi	r18, 0xFF	; 255
    2584:	a2 1a       	sub	r10, r18
    2586:	b2 0a       	sbc	r11, r18
    2588:	3e e0       	ldi	r19, 0x0E	; 14
    258a:	a3 16       	cp	r10, r19
    258c:	37 e2       	ldi	r19, 0x27	; 39
    258e:	b3 06       	cpc	r11, r19
    2590:	21 f5       	brne	.+72     	; 0x25da <_ZN4UTFT5printEPKciii+0x138>
    2592:	49 85       	ldd	r20, Y+9	; 0x09
    2594:	5a 85       	ldd	r21, Y+10	; 0x0a
    2596:	6b 85       	ldd	r22, Y+11	; 0x0b
    2598:	7c 85       	ldd	r23, Y+12	; 0x0c
    259a:	4f 5f       	subi	r20, 0xFF	; 255
    259c:	5f 4f       	sbci	r21, 0xFF	; 255
    259e:	6f 4f       	sbci	r22, 0xFF	; 255
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255
    25a2:	2f 85       	ldd	r18, Y+15	; 0x0f
    25a4:	2a 9f       	mul	r18, r26
    25a6:	c0 01       	movw	r24, r0
    25a8:	2b 9f       	mul	r18, r27
    25aa:	90 0d       	add	r25, r0
    25ac:	11 24       	eor	r1, r1
    25ae:	09 2e       	mov	r0, r25
    25b0:	00 0c       	add	r0, r0
    25b2:	aa 0b       	sbc	r26, r26
    25b4:	bb 0b       	sbc	r27, r27
    25b6:	8a 01       	movw	r16, r20
    25b8:	9b 01       	movw	r18, r22
    25ba:	08 1b       	sub	r16, r24
    25bc:	19 0b       	sbc	r17, r25
    25be:	2a 0b       	sbc	r18, r26
    25c0:	3b 0b       	sbc	r19, r27
    25c2:	b9 01       	movw	r22, r18
    25c4:	a8 01       	movw	r20, r16
    25c6:	22 f4       	brpl	.+8      	; 0x25d0 <_ZN4UTFT5printEPKciii+0x12e>
    25c8:	4f 5f       	subi	r20, 0xFF	; 255
    25ca:	5f 4f       	sbci	r21, 0xFF	; 255
    25cc:	6f 4f       	sbci	r22, 0xFF	; 255
    25ce:	7f 4f       	sbci	r23, 0xFF	; 255
    25d0:	75 95       	asr	r23
    25d2:	67 95       	ror	r22
    25d4:	57 95       	ror	r21
    25d6:	47 95       	ror	r20
    25d8:	5a 01       	movw	r10, r20
    25da:	61 2c       	mov	r6, r1
    25dc:	71 2c       	mov	r7, r1
    25de:	68 14       	cp	r6, r8
    25e0:	79 04       	cpc	r7, r9
    25e2:	3c f5       	brge	.+78     	; 0x2632 <_ZN4UTFT5printEPKciii+0x190>
    25e4:	c1 14       	cp	r12, r1
    25e6:	d1 04       	cpc	r13, r1
    25e8:	99 f4       	brne	.+38     	; 0x2610 <_ZN4UTFT5printEPKciii+0x16e>
    25ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ec:	86 9d       	mul	r24, r6
    25ee:	a0 01       	movw	r20, r0
    25f0:	87 9d       	mul	r24, r7
    25f2:	50 0d       	add	r21, r0
    25f4:	11 24       	eor	r1, r1
    25f6:	4a 0d       	add	r20, r10
    25f8:	5b 1d       	adc	r21, r11
    25fa:	1f 01       	movw	r2, r30
    25fc:	1f ef       	ldi	r17, 0xFF	; 255
    25fe:	21 1a       	sub	r2, r17
    2600:	31 0a       	sbc	r3, r17
    2602:	60 81       	ld	r22, Z
    2604:	92 01       	movw	r18, r4
    2606:	ce 01       	movw	r24, r28
    2608:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN4UTFT9printCharEhii>
    260c:	f1 01       	movw	r30, r2
    260e:	0d c0       	rjmp	.+26     	; 0x262a <_ZN4UTFT5printEPKciii+0x188>
    2610:	1f 01       	movw	r2, r30
    2612:	2f ef       	ldi	r18, 0xFF	; 255
    2614:	22 1a       	sub	r2, r18
    2616:	32 0a       	sbc	r3, r18
    2618:	60 81       	ld	r22, Z
    261a:	76 01       	movw	r14, r12
    261c:	83 01       	movw	r16, r6
    261e:	92 01       	movw	r18, r4
    2620:	a5 01       	movw	r20, r10
    2622:	ce 01       	movw	r24, r28
    2624:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN4UTFT10rotateCharEhiiii>
    2628:	f1 01       	movw	r30, r2
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	63 1a       	sub	r6, r19
    262e:	73 0a       	sbc	r7, r19
    2630:	d6 cf       	rjmp	.-84     	; 0x25de <_ZN4UTFT5printEPKciii+0x13c>
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	bf 90       	pop	r11
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	8f 90       	pop	r8
    264a:	7f 90       	pop	r7
    264c:	6f 90       	pop	r6
    264e:	5f 90       	pop	r5
    2650:	4f 90       	pop	r4
    2652:	3f 90       	pop	r3
    2654:	2f 90       	pop	r2
    2656:	08 95       	ret

00002658 <_ZN4UTFT9printNumIEliiic>:
    2658:	2f 92       	push	r2
    265a:	3f 92       	push	r3
    265c:	4f 92       	push	r4
    265e:	5f 92       	push	r5
    2660:	6f 92       	push	r6
    2662:	7f 92       	push	r7
    2664:	8f 92       	push	r8
    2666:	9f 92       	push	r9
    2668:	af 92       	push	r10
    266a:	bf 92       	push	r11
    266c:	cf 92       	push	r12
    266e:	df 92       	push	r13
    2670:	ef 92       	push	r14
    2672:	ff 92       	push	r15
    2674:	0f 93       	push	r16
    2676:	1f 93       	push	r17
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	e8 97       	sbiw	r28, 0x38	; 56
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	1c 01       	movw	r2, r24
    268e:	4a 01       	movw	r8, r20
    2690:	5b 01       	movw	r10, r22
    2692:	3e ab       	std	Y+54, r19	; 0x36
    2694:	2d ab       	std	Y+53, r18	; 0x35
    2696:	18 af       	std	Y+56, r17	; 0x38
    2698:	0f ab       	std	Y+55, r16	; 0x37
    269a:	41 15       	cp	r20, r1
    269c:	51 05       	cpc	r21, r1
    269e:	61 05       	cpc	r22, r1
    26a0:	71 05       	cpc	r23, r1
    26a2:	49 f5       	brne	.+82     	; 0x26f6 <_ZN4UTFT9printNumIEliiic+0x9e>
    26a4:	e1 14       	cp	r14, r1
    26a6:	f1 04       	cpc	r15, r1
    26a8:	11 f1       	breq	.+68     	; 0x26ee <_ZN4UTFT9printNumIEliiic+0x96>
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	97 01       	movw	r18, r14
    26b0:	21 50       	subi	r18, 0x01	; 1
    26b2:	31 09       	sbc	r19, r1
    26b4:	82 17       	cp	r24, r18
    26b6:	93 07       	cpc	r25, r19
    26b8:	4c f4       	brge	.+18     	; 0x26cc <_ZN4UTFT9printNumIEliiic+0x74>
    26ba:	ea e1       	ldi	r30, 0x1A	; 26
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	ec 0f       	add	r30, r28
    26c0:	fd 1f       	adc	r31, r29
    26c2:	e8 0f       	add	r30, r24
    26c4:	f9 1f       	adc	r31, r25
    26c6:	c0 82       	st	Z, r12
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	f1 cf       	rjmp	.-30     	; 0x26ae <_ZN4UTFT9printNumIEliiic+0x56>
    26cc:	ea e1       	ldi	r30, 0x1A	; 26
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	ec 0f       	add	r30, r28
    26d2:	fd 1f       	adc	r31, r29
    26d4:	e8 0f       	add	r30, r24
    26d6:	f9 1f       	adc	r31, r25
    26d8:	20 e3       	ldi	r18, 0x30	; 48
    26da:	20 83       	st	Z, r18
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	ea e1       	ldi	r30, 0x1A	; 26
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	ec 0f       	add	r30, r28
    26e4:	fd 1f       	adc	r31, r29
    26e6:	e8 0f       	add	r30, r24
    26e8:	f9 1f       	adc	r31, r25
    26ea:	10 82       	st	Z, r1
    26ec:	98 c0       	rjmp	.+304    	; 0x281e <_ZN4UTFT9printNumIEliiic+0x1c6>
    26ee:	80 e3       	ldi	r24, 0x30	; 48
    26f0:	8a 8f       	std	Y+26, r24	; 0x1a
    26f2:	1b 8e       	std	Y+27, r1	; 0x1b
    26f4:	94 c0       	rjmp	.+296    	; 0x281e <_ZN4UTFT9printNumIEliiic+0x1c6>
    26f6:	77 23       	and	r23, r23
    26f8:	5c f4       	brge	.+22     	; 0x2710 <_ZN4UTFT9printNumIEliiic+0xb8>
    26fa:	b0 94       	com	r11
    26fc:	a0 94       	com	r10
    26fe:	90 94       	com	r9
    2700:	80 94       	com	r8
    2702:	81 1c       	adc	r8, r1
    2704:	91 1c       	adc	r9, r1
    2706:	a1 1c       	adc	r10, r1
    2708:	b1 1c       	adc	r11, r1
    270a:	dd 24       	eor	r13, r13
    270c:	d3 94       	inc	r13
    270e:	01 c0       	rjmp	.+2      	; 0x2712 <_ZN4UTFT9printNumIEliiic+0xba>
    2710:	d1 2c       	mov	r13, r1
    2712:	00 e0       	ldi	r16, 0x00	; 0
    2714:	10 e0       	ldi	r17, 0x00	; 0
    2716:	18 14       	cp	r1, r8
    2718:	19 04       	cpc	r1, r9
    271a:	1a 04       	cpc	r1, r10
    271c:	1b 04       	cpc	r1, r11
    271e:	3c f5       	brge	.+78     	; 0x276e <_ZN4UTFT9printNumIEliiic+0x116>
    2720:	0f 2e       	mov	r0, r31
    2722:	fa e0       	ldi	r31, 0x0A	; 10
    2724:	4f 2e       	mov	r4, r31
    2726:	51 2c       	mov	r5, r1
    2728:	61 2c       	mov	r6, r1
    272a:	71 2c       	mov	r7, r1
    272c:	f0 2d       	mov	r31, r0
    272e:	c5 01       	movw	r24, r10
    2730:	b4 01       	movw	r22, r8
    2732:	a3 01       	movw	r20, r6
    2734:	92 01       	movw	r18, r4
    2736:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__divmodsi4>
    273a:	e1 e0       	ldi	r30, 0x01	; 1
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	ec 0f       	add	r30, r28
    2740:	fd 1f       	adc	r31, r29
    2742:	e0 0f       	add	r30, r16
    2744:	f1 1f       	adc	r31, r17
    2746:	20 e3       	ldi	r18, 0x30	; 48
    2748:	26 0f       	add	r18, r22
    274a:	20 83       	st	Z, r18
    274c:	0f 5f       	subi	r16, 0xFF	; 255
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	a5 01       	movw	r20, r10
    2752:	94 01       	movw	r18, r8
    2754:	26 1b       	sub	r18, r22
    2756:	37 0b       	sbc	r19, r23
    2758:	48 0b       	sbc	r20, r24
    275a:	59 0b       	sbc	r21, r25
    275c:	ca 01       	movw	r24, r20
    275e:	b9 01       	movw	r22, r18
    2760:	a3 01       	movw	r20, r6
    2762:	92 01       	movw	r18, r4
    2764:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__divmodsi4>
    2768:	49 01       	movw	r8, r18
    276a:	5a 01       	movw	r10, r20
    276c:	d4 cf       	rjmp	.-88     	; 0x2716 <_ZN4UTFT9printNumIEliiic+0xbe>
    276e:	e1 e0       	ldi	r30, 0x01	; 1
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	ec 0f       	add	r30, r28
    2774:	fd 1f       	adc	r31, r29
    2776:	e0 0f       	add	r30, r16
    2778:	f1 1f       	adc	r31, r17
    277a:	10 82       	st	Z, r1
    277c:	dd 20       	and	r13, r13
    277e:	11 f0       	breq	.+4      	; 0x2784 <_ZN4UTFT9printNumIEliiic+0x12c>
    2780:	8d e2       	ldi	r24, 0x2D	; 45
    2782:	8a 8f       	std	Y+26, r24	; 0x1a
    2784:	2d 2d       	mov	r18, r13
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	b8 01       	movw	r22, r16
    278a:	62 0f       	add	r22, r18
    278c:	73 1f       	adc	r23, r19
    278e:	6e 15       	cp	r22, r14
    2790:	7f 05       	cpc	r23, r15
    2792:	d4 f4       	brge	.+52     	; 0x27c8 <_ZN4UTFT9printNumIEliiic+0x170>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	f7 01       	movw	r30, r14
    279e:	e0 1b       	sub	r30, r16
    27a0:	f1 0b       	sbc	r31, r17
    27a2:	e2 1b       	sub	r30, r18
    27a4:	f3 0b       	sbc	r31, r19
    27a6:	8e 17       	cp	r24, r30
    27a8:	9f 07       	cpc	r25, r31
    27aa:	84 f4       	brge	.+32     	; 0x27cc <_ZN4UTFT9printNumIEliiic+0x174>
    27ac:	fc 01       	movw	r30, r24
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	aa e1       	ldi	r26, 0x1A	; 26
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ac 0f       	add	r26, r28
    27b8:	bd 1f       	adc	r27, r29
    27ba:	ea 0f       	add	r30, r26
    27bc:	fb 1f       	adc	r31, r27
    27be:	c0 82       	st	Z, r12
    27c0:	4f 5f       	subi	r20, 0xFF	; 255
    27c2:	5f 4f       	sbci	r21, 0xFF	; 255
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	ea cf       	rjmp	.-44     	; 0x279c <_ZN4UTFT9printNumIEliiic+0x144>
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	50 e0       	ldi	r21, 0x00	; 0
    27cc:	a0 e0       	ldi	r26, 0x00	; 0
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	a0 17       	cp	r26, r16
    27d2:	b1 07       	cpc	r27, r17
    27d4:	dc f4       	brge	.+54     	; 0x280c <_ZN4UTFT9printNumIEliiic+0x1b4>
    27d6:	fd 01       	movw	r30, r26
    27d8:	e2 0f       	add	r30, r18
    27da:	f3 1f       	adc	r31, r19
    27dc:	6f 01       	movw	r12, r30
    27de:	c4 0e       	add	r12, r20
    27e0:	d5 1e       	adc	r13, r21
    27e2:	c8 01       	movw	r24, r16
    27e4:	8a 1b       	sub	r24, r26
    27e6:	9b 0b       	sbc	r25, r27
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	e1 e0       	ldi	r30, 0x01	; 1
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	ec 0f       	add	r30, r28
    27f0:	fd 1f       	adc	r31, r29
    27f2:	8e 0f       	add	r24, r30
    27f4:	9f 1f       	adc	r25, r31
    27f6:	fc 01       	movw	r30, r24
    27f8:	80 81       	ld	r24, Z
    27fa:	ea e1       	ldi	r30, 0x1A	; 26
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	ec 0f       	add	r30, r28
    2800:	fd 1f       	adc	r31, r29
    2802:	ec 0d       	add	r30, r12
    2804:	fd 1d       	adc	r31, r13
    2806:	80 83       	st	Z, r24
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	e2 cf       	rjmp	.-60     	; 0x27d0 <_ZN4UTFT9printNumIEliiic+0x178>
    280c:	46 0f       	add	r20, r22
    280e:	57 1f       	adc	r21, r23
    2810:	ea e1       	ldi	r30, 0x1A	; 26
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	ec 0f       	add	r30, r28
    2816:	fd 1f       	adc	r31, r29
    2818:	e4 0f       	add	r30, r20
    281a:	f5 1f       	adc	r31, r21
    281c:	10 82       	st	Z, r1
    281e:	00 e0       	ldi	r16, 0x00	; 0
    2820:	10 e0       	ldi	r17, 0x00	; 0
    2822:	2f a9       	ldd	r18, Y+55	; 0x37
    2824:	38 ad       	ldd	r19, Y+56	; 0x38
    2826:	4d a9       	ldd	r20, Y+53	; 0x35
    2828:	5e a9       	ldd	r21, Y+54	; 0x36
    282a:	be 01       	movw	r22, r28
    282c:	66 5e       	subi	r22, 0xE6	; 230
    282e:	7f 4f       	sbci	r23, 0xFF	; 255
    2830:	c1 01       	movw	r24, r2
    2832:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN4UTFT5printEPKciii>
    2836:	e8 96       	adiw	r28, 0x38	; 56
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	df 90       	pop	r13
    2850:	cf 90       	pop	r12
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	9f 90       	pop	r9
    2858:	8f 90       	pop	r8
    285a:	7f 90       	pop	r7
    285c:	6f 90       	pop	r6
    285e:	5f 90       	pop	r5
    2860:	4f 90       	pop	r4
    2862:	3f 90       	pop	r3
    2864:	2f 90       	pop	r2
    2866:	08 95       	ret

00002868 <_ZN4UTFT7setFontEPKh>:

void UTFT::setFont(const uint8_t* font)
{
    2868:	dc 01       	movw	r26, r24
	cfont.font=font;
    286a:	1e 96       	adiw	r26, 0x0e	; 14
    286c:	7c 93       	st	X, r23
    286e:	6e 93       	st	-X, r22
    2870:	1d 97       	sbiw	r26, 0x0d	; 13
	cfont.x_size=fontbyte(0);
    2872:	fb 01       	movw	r30, r22
    2874:	84 91       	lpm	r24, Z
    2876:	1f 96       	adiw	r26, 0x0f	; 15
    2878:	8c 93       	st	X, r24
    287a:	1f 97       	sbiw	r26, 0x0f	; 15
	cfont.y_size=fontbyte(1);
    287c:	31 96       	adiw	r30, 0x01	; 1
    287e:	e4 91       	lpm	r30, Z
    2880:	50 96       	adiw	r26, 0x10	; 16
    2882:	ec 93       	st	X, r30
    2884:	50 97       	sbiw	r26, 0x10	; 16
	cfont.offset=fontbyte(2);
    2886:	fb 01       	movw	r30, r22
    2888:	32 96       	adiw	r30, 0x02	; 2
    288a:	e4 91       	lpm	r30, Z
    288c:	51 96       	adiw	r26, 0x11	; 17
    288e:	ec 93       	st	X, r30
    2890:	51 97       	sbiw	r26, 0x11	; 17
	cfont.numchars=fontbyte(3);
    2892:	fb 01       	movw	r30, r22
    2894:	33 96       	adiw	r30, 0x03	; 3
    2896:	64 91       	lpm	r22, Z
    2898:	52 96       	adiw	r26, 0x12	; 18
    289a:	6c 93       	st	X, r22
    289c:	08 95       	ret

0000289e <__subsf3>:
    289e:	50 58       	subi	r21, 0x80	; 128

000028a0 <__addsf3>:
    28a0:	bb 27       	eor	r27, r27
    28a2:	aa 27       	eor	r26, r26
    28a4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__addsf3x>
    28a8:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__fp_round>
    28ac:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__fp_pscA>
    28b0:	38 f0       	brcs	.+14     	; 0x28c0 <__addsf3+0x20>
    28b2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__fp_pscB>
    28b6:	20 f0       	brcs	.+8      	; 0x28c0 <__addsf3+0x20>
    28b8:	39 f4       	brne	.+14     	; 0x28c8 <__addsf3+0x28>
    28ba:	9f 3f       	cpi	r25, 0xFF	; 255
    28bc:	19 f4       	brne	.+6      	; 0x28c4 <__addsf3+0x24>
    28be:	26 f4       	brtc	.+8      	; 0x28c8 <__addsf3+0x28>
    28c0:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__fp_nan>
    28c4:	0e f4       	brtc	.+2      	; 0x28c8 <__addsf3+0x28>
    28c6:	e0 95       	com	r30
    28c8:	e7 fb       	bst	r30, 7
    28ca:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__fp_inf>

000028ce <__addsf3x>:
    28ce:	e9 2f       	mov	r30, r25
    28d0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__fp_split3>
    28d4:	58 f3       	brcs	.-42     	; 0x28ac <__addsf3+0xc>
    28d6:	ba 17       	cp	r27, r26
    28d8:	62 07       	cpc	r22, r18
    28da:	73 07       	cpc	r23, r19
    28dc:	84 07       	cpc	r24, r20
    28de:	95 07       	cpc	r25, r21
    28e0:	20 f0       	brcs	.+8      	; 0x28ea <__addsf3x+0x1c>
    28e2:	79 f4       	brne	.+30     	; 0x2902 <__addsf3x+0x34>
    28e4:	a6 f5       	brtc	.+104    	; 0x294e <__addsf3x+0x80>
    28e6:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__fp_zero>
    28ea:	0e f4       	brtc	.+2      	; 0x28ee <__addsf3x+0x20>
    28ec:	e0 95       	com	r30
    28ee:	0b 2e       	mov	r0, r27
    28f0:	ba 2f       	mov	r27, r26
    28f2:	a0 2d       	mov	r26, r0
    28f4:	0b 01       	movw	r0, r22
    28f6:	b9 01       	movw	r22, r18
    28f8:	90 01       	movw	r18, r0
    28fa:	0c 01       	movw	r0, r24
    28fc:	ca 01       	movw	r24, r20
    28fe:	a0 01       	movw	r20, r0
    2900:	11 24       	eor	r1, r1
    2902:	ff 27       	eor	r31, r31
    2904:	59 1b       	sub	r21, r25
    2906:	99 f0       	breq	.+38     	; 0x292e <__addsf3x+0x60>
    2908:	59 3f       	cpi	r21, 0xF9	; 249
    290a:	50 f4       	brcc	.+20     	; 0x2920 <__addsf3x+0x52>
    290c:	50 3e       	cpi	r21, 0xE0	; 224
    290e:	68 f1       	brcs	.+90     	; 0x296a <__addsf3x+0x9c>
    2910:	1a 16       	cp	r1, r26
    2912:	f0 40       	sbci	r31, 0x00	; 0
    2914:	a2 2f       	mov	r26, r18
    2916:	23 2f       	mov	r18, r19
    2918:	34 2f       	mov	r19, r20
    291a:	44 27       	eor	r20, r20
    291c:	58 5f       	subi	r21, 0xF8	; 248
    291e:	f3 cf       	rjmp	.-26     	; 0x2906 <__addsf3x+0x38>
    2920:	46 95       	lsr	r20
    2922:	37 95       	ror	r19
    2924:	27 95       	ror	r18
    2926:	a7 95       	ror	r26
    2928:	f0 40       	sbci	r31, 0x00	; 0
    292a:	53 95       	inc	r21
    292c:	c9 f7       	brne	.-14     	; 0x2920 <__addsf3x+0x52>
    292e:	7e f4       	brtc	.+30     	; 0x294e <__addsf3x+0x80>
    2930:	1f 16       	cp	r1, r31
    2932:	ba 0b       	sbc	r27, r26
    2934:	62 0b       	sbc	r22, r18
    2936:	73 0b       	sbc	r23, r19
    2938:	84 0b       	sbc	r24, r20
    293a:	ba f0       	brmi	.+46     	; 0x296a <__addsf3x+0x9c>
    293c:	91 50       	subi	r25, 0x01	; 1
    293e:	a1 f0       	breq	.+40     	; 0x2968 <__addsf3x+0x9a>
    2940:	ff 0f       	add	r31, r31
    2942:	bb 1f       	adc	r27, r27
    2944:	66 1f       	adc	r22, r22
    2946:	77 1f       	adc	r23, r23
    2948:	88 1f       	adc	r24, r24
    294a:	c2 f7       	brpl	.-16     	; 0x293c <__addsf3x+0x6e>
    294c:	0e c0       	rjmp	.+28     	; 0x296a <__addsf3x+0x9c>
    294e:	ba 0f       	add	r27, r26
    2950:	62 1f       	adc	r22, r18
    2952:	73 1f       	adc	r23, r19
    2954:	84 1f       	adc	r24, r20
    2956:	48 f4       	brcc	.+18     	; 0x296a <__addsf3x+0x9c>
    2958:	87 95       	ror	r24
    295a:	77 95       	ror	r23
    295c:	67 95       	ror	r22
    295e:	b7 95       	ror	r27
    2960:	f7 95       	ror	r31
    2962:	9e 3f       	cpi	r25, 0xFE	; 254
    2964:	08 f0       	brcs	.+2      	; 0x2968 <__addsf3x+0x9a>
    2966:	b0 cf       	rjmp	.-160    	; 0x28c8 <__addsf3+0x28>
    2968:	93 95       	inc	r25
    296a:	88 0f       	add	r24, r24
    296c:	08 f0       	brcs	.+2      	; 0x2970 <__addsf3x+0xa2>
    296e:	99 27       	eor	r25, r25
    2970:	ee 0f       	add	r30, r30
    2972:	97 95       	ror	r25
    2974:	87 95       	ror	r24
    2976:	08 95       	ret

00002978 <__cmpsf2>:
    2978:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <__fp_cmp>
    297c:	08 f4       	brcc	.+2      	; 0x2980 <__cmpsf2+0x8>
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	08 95       	ret

00002982 <cos>:
    2982:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__fp_rempio2>
    2986:	e3 95       	inc	r30
    2988:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_sinus>

0000298c <__divsf3>:
    298c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3x>
    2990:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__fp_round>
    2994:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__fp_pscB>
    2998:	58 f0       	brcs	.+22     	; 0x29b0 <__divsf3+0x24>
    299a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__fp_pscA>
    299e:	40 f0       	brcs	.+16     	; 0x29b0 <__divsf3+0x24>
    29a0:	29 f4       	brne	.+10     	; 0x29ac <__divsf3+0x20>
    29a2:	5f 3f       	cpi	r21, 0xFF	; 255
    29a4:	29 f0       	breq	.+10     	; 0x29b0 <__divsf3+0x24>
    29a6:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__fp_inf>
    29aa:	51 11       	cpse	r21, r1
    29ac:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__fp_szero>
    29b0:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__fp_nan>

000029b4 <__divsf3x>:
    29b4:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__fp_split3>
    29b8:	68 f3       	brcs	.-38     	; 0x2994 <__divsf3+0x8>

000029ba <__divsf3_pse>:
    29ba:	99 23       	and	r25, r25
    29bc:	b1 f3       	breq	.-20     	; 0x29aa <__divsf3+0x1e>
    29be:	55 23       	and	r21, r21
    29c0:	91 f3       	breq	.-28     	; 0x29a6 <__divsf3+0x1a>
    29c2:	95 1b       	sub	r25, r21
    29c4:	55 0b       	sbc	r21, r21
    29c6:	bb 27       	eor	r27, r27
    29c8:	aa 27       	eor	r26, r26
    29ca:	62 17       	cp	r22, r18
    29cc:	73 07       	cpc	r23, r19
    29ce:	84 07       	cpc	r24, r20
    29d0:	38 f0       	brcs	.+14     	; 0x29e0 <__divsf3_pse+0x26>
    29d2:	9f 5f       	subi	r25, 0xFF	; 255
    29d4:	5f 4f       	sbci	r21, 0xFF	; 255
    29d6:	22 0f       	add	r18, r18
    29d8:	33 1f       	adc	r19, r19
    29da:	44 1f       	adc	r20, r20
    29dc:	aa 1f       	adc	r26, r26
    29de:	a9 f3       	breq	.-22     	; 0x29ca <__divsf3_pse+0x10>
    29e0:	35 d0       	rcall	.+106    	; 0x2a4c <__divsf3_pse+0x92>
    29e2:	0e 2e       	mov	r0, r30
    29e4:	3a f0       	brmi	.+14     	; 0x29f4 <__divsf3_pse+0x3a>
    29e6:	e0 e8       	ldi	r30, 0x80	; 128
    29e8:	32 d0       	rcall	.+100    	; 0x2a4e <__divsf3_pse+0x94>
    29ea:	91 50       	subi	r25, 0x01	; 1
    29ec:	50 40       	sbci	r21, 0x00	; 0
    29ee:	e6 95       	lsr	r30
    29f0:	00 1c       	adc	r0, r0
    29f2:	ca f7       	brpl	.-14     	; 0x29e6 <__divsf3_pse+0x2c>
    29f4:	2b d0       	rcall	.+86     	; 0x2a4c <__divsf3_pse+0x92>
    29f6:	fe 2f       	mov	r31, r30
    29f8:	29 d0       	rcall	.+82     	; 0x2a4c <__divsf3_pse+0x92>
    29fa:	66 0f       	add	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	bb 1f       	adc	r27, r27
    2a02:	26 17       	cp	r18, r22
    2a04:	37 07       	cpc	r19, r23
    2a06:	48 07       	cpc	r20, r24
    2a08:	ab 07       	cpc	r26, r27
    2a0a:	b0 e8       	ldi	r27, 0x80	; 128
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <__divsf3_pse+0x56>
    2a0e:	bb 0b       	sbc	r27, r27
    2a10:	80 2d       	mov	r24, r0
    2a12:	bf 01       	movw	r22, r30
    2a14:	ff 27       	eor	r31, r31
    2a16:	93 58       	subi	r25, 0x83	; 131
    2a18:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1a:	3a f0       	brmi	.+14     	; 0x2a2a <__divsf3_pse+0x70>
    2a1c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a1e:	51 05       	cpc	r21, r1
    2a20:	78 f0       	brcs	.+30     	; 0x2a40 <__divsf3_pse+0x86>
    2a22:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__fp_inf>
    2a26:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__fp_szero>
    2a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a2c:	e4 f3       	brlt	.-8      	; 0x2a26 <__divsf3_pse+0x6c>
    2a2e:	98 3e       	cpi	r25, 0xE8	; 232
    2a30:	d4 f3       	brlt	.-12     	; 0x2a26 <__divsf3_pse+0x6c>
    2a32:	86 95       	lsr	r24
    2a34:	77 95       	ror	r23
    2a36:	67 95       	ror	r22
    2a38:	b7 95       	ror	r27
    2a3a:	f7 95       	ror	r31
    2a3c:	9f 5f       	subi	r25, 0xFF	; 255
    2a3e:	c9 f7       	brne	.-14     	; 0x2a32 <__divsf3_pse+0x78>
    2a40:	88 0f       	add	r24, r24
    2a42:	91 1d       	adc	r25, r1
    2a44:	96 95       	lsr	r25
    2a46:	87 95       	ror	r24
    2a48:	97 f9       	bld	r25, 7
    2a4a:	08 95       	ret
    2a4c:	e1 e0       	ldi	r30, 0x01	; 1
    2a4e:	66 0f       	add	r22, r22
    2a50:	77 1f       	adc	r23, r23
    2a52:	88 1f       	adc	r24, r24
    2a54:	bb 1f       	adc	r27, r27
    2a56:	62 17       	cp	r22, r18
    2a58:	73 07       	cpc	r23, r19
    2a5a:	84 07       	cpc	r24, r20
    2a5c:	ba 07       	cpc	r27, r26
    2a5e:	20 f0       	brcs	.+8      	; 0x2a68 <__divsf3_pse+0xae>
    2a60:	62 1b       	sub	r22, r18
    2a62:	73 0b       	sbc	r23, r19
    2a64:	84 0b       	sbc	r24, r20
    2a66:	ba 0b       	sbc	r27, r26
    2a68:	ee 1f       	adc	r30, r30
    2a6a:	88 f7       	brcc	.-30     	; 0x2a4e <__divsf3_pse+0x94>
    2a6c:	e0 95       	com	r30
    2a6e:	08 95       	ret

00002a70 <__fixsfsi>:
    2a70:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__fixunssfsi>
    2a74:	68 94       	set
    2a76:	b1 11       	cpse	r27, r1
    2a78:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__fp_szero>
    2a7c:	08 95       	ret

00002a7e <__fixunssfsi>:
    2a7e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__fp_splitA>
    2a82:	88 f0       	brcs	.+34     	; 0x2aa6 <__fixunssfsi+0x28>
    2a84:	9f 57       	subi	r25, 0x7F	; 127
    2a86:	98 f0       	brcs	.+38     	; 0x2aae <__fixunssfsi+0x30>
    2a88:	b9 2f       	mov	r27, r25
    2a8a:	99 27       	eor	r25, r25
    2a8c:	b7 51       	subi	r27, 0x17	; 23
    2a8e:	b0 f0       	brcs	.+44     	; 0x2abc <__fixunssfsi+0x3e>
    2a90:	e1 f0       	breq	.+56     	; 0x2aca <__fixunssfsi+0x4c>
    2a92:	66 0f       	add	r22, r22
    2a94:	77 1f       	adc	r23, r23
    2a96:	88 1f       	adc	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	1a f0       	brmi	.+6      	; 0x2aa2 <__fixunssfsi+0x24>
    2a9c:	ba 95       	dec	r27
    2a9e:	c9 f7       	brne	.-14     	; 0x2a92 <__fixunssfsi+0x14>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <__fixunssfsi+0x4c>
    2aa2:	b1 30       	cpi	r27, 0x01	; 1
    2aa4:	91 f0       	breq	.+36     	; 0x2aca <__fixunssfsi+0x4c>
    2aa6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__fp_zero>
    2aaa:	b1 e0       	ldi	r27, 0x01	; 1
    2aac:	08 95       	ret
    2aae:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__fp_zero>
    2ab2:	67 2f       	mov	r22, r23
    2ab4:	78 2f       	mov	r23, r24
    2ab6:	88 27       	eor	r24, r24
    2ab8:	b8 5f       	subi	r27, 0xF8	; 248
    2aba:	39 f0       	breq	.+14     	; 0x2aca <__fixunssfsi+0x4c>
    2abc:	b9 3f       	cpi	r27, 0xF9	; 249
    2abe:	cc f3       	brlt	.-14     	; 0x2ab2 <__fixunssfsi+0x34>
    2ac0:	86 95       	lsr	r24
    2ac2:	77 95       	ror	r23
    2ac4:	67 95       	ror	r22
    2ac6:	b3 95       	inc	r27
    2ac8:	d9 f7       	brne	.-10     	; 0x2ac0 <__fixunssfsi+0x42>
    2aca:	3e f4       	brtc	.+14     	; 0x2ada <__fixunssfsi+0x5c>
    2acc:	90 95       	com	r25
    2ace:	80 95       	com	r24
    2ad0:	70 95       	com	r23
    2ad2:	61 95       	neg	r22
    2ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ada:	08 95       	ret

00002adc <__floatunsisf>:
    2adc:	e8 94       	clt
    2ade:	09 c0       	rjmp	.+18     	; 0x2af2 <__floatsisf+0x12>

00002ae0 <__floatsisf>:
    2ae0:	97 fb       	bst	r25, 7
    2ae2:	3e f4       	brtc	.+14     	; 0x2af2 <__floatsisf+0x12>
    2ae4:	90 95       	com	r25
    2ae6:	80 95       	com	r24
    2ae8:	70 95       	com	r23
    2aea:	61 95       	neg	r22
    2aec:	7f 4f       	sbci	r23, 0xFF	; 255
    2aee:	8f 4f       	sbci	r24, 0xFF	; 255
    2af0:	9f 4f       	sbci	r25, 0xFF	; 255
    2af2:	99 23       	and	r25, r25
    2af4:	a9 f0       	breq	.+42     	; 0x2b20 <__floatsisf+0x40>
    2af6:	f9 2f       	mov	r31, r25
    2af8:	96 e9       	ldi	r25, 0x96	; 150
    2afa:	bb 27       	eor	r27, r27
    2afc:	93 95       	inc	r25
    2afe:	f6 95       	lsr	r31
    2b00:	87 95       	ror	r24
    2b02:	77 95       	ror	r23
    2b04:	67 95       	ror	r22
    2b06:	b7 95       	ror	r27
    2b08:	f1 11       	cpse	r31, r1
    2b0a:	f8 cf       	rjmp	.-16     	; 0x2afc <__floatsisf+0x1c>
    2b0c:	fa f4       	brpl	.+62     	; 0x2b4c <__floatsisf+0x6c>
    2b0e:	bb 0f       	add	r27, r27
    2b10:	11 f4       	brne	.+4      	; 0x2b16 <__floatsisf+0x36>
    2b12:	60 ff       	sbrs	r22, 0
    2b14:	1b c0       	rjmp	.+54     	; 0x2b4c <__floatsisf+0x6c>
    2b16:	6f 5f       	subi	r22, 0xFF	; 255
    2b18:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1e:	16 c0       	rjmp	.+44     	; 0x2b4c <__floatsisf+0x6c>
    2b20:	88 23       	and	r24, r24
    2b22:	11 f0       	breq	.+4      	; 0x2b28 <__floatsisf+0x48>
    2b24:	96 e9       	ldi	r25, 0x96	; 150
    2b26:	11 c0       	rjmp	.+34     	; 0x2b4a <__floatsisf+0x6a>
    2b28:	77 23       	and	r23, r23
    2b2a:	21 f0       	breq	.+8      	; 0x2b34 <__floatsisf+0x54>
    2b2c:	9e e8       	ldi	r25, 0x8E	; 142
    2b2e:	87 2f       	mov	r24, r23
    2b30:	76 2f       	mov	r23, r22
    2b32:	05 c0       	rjmp	.+10     	; 0x2b3e <__floatsisf+0x5e>
    2b34:	66 23       	and	r22, r22
    2b36:	71 f0       	breq	.+28     	; 0x2b54 <__floatsisf+0x74>
    2b38:	96 e8       	ldi	r25, 0x86	; 134
    2b3a:	86 2f       	mov	r24, r22
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	2a f0       	brmi	.+10     	; 0x2b4c <__floatsisf+0x6c>
    2b42:	9a 95       	dec	r25
    2b44:	66 0f       	add	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	88 1f       	adc	r24, r24
    2b4a:	da f7       	brpl	.-10     	; 0x2b42 <__floatsisf+0x62>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	96 95       	lsr	r25
    2b50:	87 95       	ror	r24
    2b52:	97 f9       	bld	r25, 7
    2b54:	08 95       	ret

00002b56 <__fp_cmp>:
    2b56:	99 0f       	add	r25, r25
    2b58:	00 08       	sbc	r0, r0
    2b5a:	55 0f       	add	r21, r21
    2b5c:	aa 0b       	sbc	r26, r26
    2b5e:	e0 e8       	ldi	r30, 0x80	; 128
    2b60:	fe ef       	ldi	r31, 0xFE	; 254
    2b62:	16 16       	cp	r1, r22
    2b64:	17 06       	cpc	r1, r23
    2b66:	e8 07       	cpc	r30, r24
    2b68:	f9 07       	cpc	r31, r25
    2b6a:	c0 f0       	brcs	.+48     	; 0x2b9c <__fp_cmp+0x46>
    2b6c:	12 16       	cp	r1, r18
    2b6e:	13 06       	cpc	r1, r19
    2b70:	e4 07       	cpc	r30, r20
    2b72:	f5 07       	cpc	r31, r21
    2b74:	98 f0       	brcs	.+38     	; 0x2b9c <__fp_cmp+0x46>
    2b76:	62 1b       	sub	r22, r18
    2b78:	73 0b       	sbc	r23, r19
    2b7a:	84 0b       	sbc	r24, r20
    2b7c:	95 0b       	sbc	r25, r21
    2b7e:	39 f4       	brne	.+14     	; 0x2b8e <__fp_cmp+0x38>
    2b80:	0a 26       	eor	r0, r26
    2b82:	61 f0       	breq	.+24     	; 0x2b9c <__fp_cmp+0x46>
    2b84:	23 2b       	or	r18, r19
    2b86:	24 2b       	or	r18, r20
    2b88:	25 2b       	or	r18, r21
    2b8a:	21 f4       	brne	.+8      	; 0x2b94 <__fp_cmp+0x3e>
    2b8c:	08 95       	ret
    2b8e:	0a 26       	eor	r0, r26
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <__fp_cmp+0x3e>
    2b92:	a1 40       	sbci	r26, 0x01	; 1
    2b94:	a6 95       	lsr	r26
    2b96:	8f ef       	ldi	r24, 0xFF	; 255
    2b98:	81 1d       	adc	r24, r1
    2b9a:	81 1d       	adc	r24, r1
    2b9c:	08 95       	ret

00002b9e <__fp_inf>:
    2b9e:	97 f9       	bld	r25, 7
    2ba0:	9f 67       	ori	r25, 0x7F	; 127
    2ba2:	80 e8       	ldi	r24, 0x80	; 128
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	60 e0       	ldi	r22, 0x00	; 0
    2ba8:	08 95       	ret

00002baa <__fp_nan>:
    2baa:	9f ef       	ldi	r25, 0xFF	; 255
    2bac:	80 ec       	ldi	r24, 0xC0	; 192
    2bae:	08 95       	ret

00002bb0 <__fp_pscA>:
    2bb0:	00 24       	eor	r0, r0
    2bb2:	0a 94       	dec	r0
    2bb4:	16 16       	cp	r1, r22
    2bb6:	17 06       	cpc	r1, r23
    2bb8:	18 06       	cpc	r1, r24
    2bba:	09 06       	cpc	r0, r25
    2bbc:	08 95       	ret

00002bbe <__fp_pscB>:
    2bbe:	00 24       	eor	r0, r0
    2bc0:	0a 94       	dec	r0
    2bc2:	12 16       	cp	r1, r18
    2bc4:	13 06       	cpc	r1, r19
    2bc6:	14 06       	cpc	r1, r20
    2bc8:	05 06       	cpc	r0, r21
    2bca:	08 95       	ret
    2bcc:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__fp_nan>

00002bd0 <__fp_rempio2>:
    2bd0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__fp_splitA>
    2bd4:	d8 f3       	brcs	.-10     	; 0x2bcc <__fp_pscB+0xe>
    2bd6:	e8 94       	clt
    2bd8:	e0 e0       	ldi	r30, 0x00	; 0
    2bda:	bb 27       	eor	r27, r27
    2bdc:	9f 57       	subi	r25, 0x7F	; 127
    2bde:	f0 f0       	brcs	.+60     	; 0x2c1c <__fp_rempio2+0x4c>
    2be0:	2a ed       	ldi	r18, 0xDA	; 218
    2be2:	3f e0       	ldi	r19, 0x0F	; 15
    2be4:	49 ec       	ldi	r20, 0xC9	; 201
    2be6:	06 c0       	rjmp	.+12     	; 0x2bf4 <__fp_rempio2+0x24>
    2be8:	ee 0f       	add	r30, r30
    2bea:	bb 0f       	add	r27, r27
    2bec:	66 1f       	adc	r22, r22
    2bee:	77 1f       	adc	r23, r23
    2bf0:	88 1f       	adc	r24, r24
    2bf2:	28 f0       	brcs	.+10     	; 0x2bfe <__fp_rempio2+0x2e>
    2bf4:	b2 3a       	cpi	r27, 0xA2	; 162
    2bf6:	62 07       	cpc	r22, r18
    2bf8:	73 07       	cpc	r23, r19
    2bfa:	84 07       	cpc	r24, r20
    2bfc:	28 f0       	brcs	.+10     	; 0x2c08 <__fp_rempio2+0x38>
    2bfe:	b2 5a       	subi	r27, 0xA2	; 162
    2c00:	62 0b       	sbc	r22, r18
    2c02:	73 0b       	sbc	r23, r19
    2c04:	84 0b       	sbc	r24, r20
    2c06:	e3 95       	inc	r30
    2c08:	9a 95       	dec	r25
    2c0a:	72 f7       	brpl	.-36     	; 0x2be8 <__fp_rempio2+0x18>
    2c0c:	80 38       	cpi	r24, 0x80	; 128
    2c0e:	30 f4       	brcc	.+12     	; 0x2c1c <__fp_rempio2+0x4c>
    2c10:	9a 95       	dec	r25
    2c12:	bb 0f       	add	r27, r27
    2c14:	66 1f       	adc	r22, r22
    2c16:	77 1f       	adc	r23, r23
    2c18:	88 1f       	adc	r24, r24
    2c1a:	d2 f7       	brpl	.-12     	; 0x2c10 <__fp_rempio2+0x40>
    2c1c:	90 48       	sbci	r25, 0x80	; 128
    2c1e:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__fp_mpack_finite>

00002c22 <__fp_round>:
    2c22:	09 2e       	mov	r0, r25
    2c24:	03 94       	inc	r0
    2c26:	00 0c       	add	r0, r0
    2c28:	11 f4       	brne	.+4      	; 0x2c2e <__fp_round+0xc>
    2c2a:	88 23       	and	r24, r24
    2c2c:	52 f0       	brmi	.+20     	; 0x2c42 <__fp_round+0x20>
    2c2e:	bb 0f       	add	r27, r27
    2c30:	40 f4       	brcc	.+16     	; 0x2c42 <__fp_round+0x20>
    2c32:	bf 2b       	or	r27, r31
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <__fp_round+0x18>
    2c36:	60 ff       	sbrs	r22, 0
    2c38:	04 c0       	rjmp	.+8      	; 0x2c42 <__fp_round+0x20>
    2c3a:	6f 5f       	subi	r22, 0xFF	; 255
    2c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c40:	9f 4f       	sbci	r25, 0xFF	; 255
    2c42:	08 95       	ret

00002c44 <__fp_sinus>:
    2c44:	ef 93       	push	r30
    2c46:	e0 ff       	sbrs	r30, 0
    2c48:	07 c0       	rjmp	.+14     	; 0x2c58 <__fp_sinus+0x14>
    2c4a:	a2 ea       	ldi	r26, 0xA2	; 162
    2c4c:	2a ed       	ldi	r18, 0xDA	; 218
    2c4e:	3f e0       	ldi	r19, 0x0F	; 15
    2c50:	49 ec       	ldi	r20, 0xC9	; 201
    2c52:	5f eb       	ldi	r21, 0xBF	; 191
    2c54:	0e 94 67 14 	call	0x28ce	; 0x28ce <__addsf3x>
    2c58:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_round>
    2c5c:	0f 90       	pop	r0
    2c5e:	03 94       	inc	r0
    2c60:	01 fc       	sbrc	r0, 1
    2c62:	90 58       	subi	r25, 0x80	; 128
    2c64:	e4 e7       	ldi	r30, 0x74	; 116
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__fp_powsodd>

00002c6c <__fp_split3>:
    2c6c:	57 fd       	sbrc	r21, 7
    2c6e:	90 58       	subi	r25, 0x80	; 128
    2c70:	44 0f       	add	r20, r20
    2c72:	55 1f       	adc	r21, r21
    2c74:	59 f0       	breq	.+22     	; 0x2c8c <__fp_splitA+0x10>
    2c76:	5f 3f       	cpi	r21, 0xFF	; 255
    2c78:	71 f0       	breq	.+28     	; 0x2c96 <__fp_splitA+0x1a>
    2c7a:	47 95       	ror	r20

00002c7c <__fp_splitA>:
    2c7c:	88 0f       	add	r24, r24
    2c7e:	97 fb       	bst	r25, 7
    2c80:	99 1f       	adc	r25, r25
    2c82:	61 f0       	breq	.+24     	; 0x2c9c <__fp_splitA+0x20>
    2c84:	9f 3f       	cpi	r25, 0xFF	; 255
    2c86:	79 f0       	breq	.+30     	; 0x2ca6 <__fp_splitA+0x2a>
    2c88:	87 95       	ror	r24
    2c8a:	08 95       	ret
    2c8c:	12 16       	cp	r1, r18
    2c8e:	13 06       	cpc	r1, r19
    2c90:	14 06       	cpc	r1, r20
    2c92:	55 1f       	adc	r21, r21
    2c94:	f2 cf       	rjmp	.-28     	; 0x2c7a <__fp_split3+0xe>
    2c96:	46 95       	lsr	r20
    2c98:	f1 df       	rcall	.-30     	; 0x2c7c <__fp_splitA>
    2c9a:	08 c0       	rjmp	.+16     	; 0x2cac <__fp_splitA+0x30>
    2c9c:	16 16       	cp	r1, r22
    2c9e:	17 06       	cpc	r1, r23
    2ca0:	18 06       	cpc	r1, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	f1 cf       	rjmp	.-30     	; 0x2c88 <__fp_splitA+0xc>
    2ca6:	86 95       	lsr	r24
    2ca8:	71 05       	cpc	r23, r1
    2caa:	61 05       	cpc	r22, r1
    2cac:	08 94       	sec
    2cae:	08 95       	ret

00002cb0 <__fp_zero>:
    2cb0:	e8 94       	clt

00002cb2 <__fp_szero>:
    2cb2:	bb 27       	eor	r27, r27
    2cb4:	66 27       	eor	r22, r22
    2cb6:	77 27       	eor	r23, r23
    2cb8:	cb 01       	movw	r24, r22
    2cba:	97 f9       	bld	r25, 7
    2cbc:	08 95       	ret

00002cbe <__mulsf3>:
    2cbe:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__mulsf3x>
    2cc2:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__fp_round>
    2cc6:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__fp_pscA>
    2cca:	38 f0       	brcs	.+14     	; 0x2cda <__mulsf3+0x1c>
    2ccc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__fp_pscB>
    2cd0:	20 f0       	brcs	.+8      	; 0x2cda <__mulsf3+0x1c>
    2cd2:	95 23       	and	r25, r21
    2cd4:	11 f0       	breq	.+4      	; 0x2cda <__mulsf3+0x1c>
    2cd6:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__fp_inf>
    2cda:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__fp_nan>
    2cde:	11 24       	eor	r1, r1
    2ce0:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__fp_szero>

00002ce4 <__mulsf3x>:
    2ce4:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__fp_split3>
    2ce8:	70 f3       	brcs	.-36     	; 0x2cc6 <__mulsf3+0x8>

00002cea <__mulsf3_pse>:
    2cea:	95 9f       	mul	r25, r21
    2cec:	c1 f3       	breq	.-16     	; 0x2cde <__mulsf3+0x20>
    2cee:	95 0f       	add	r25, r21
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	55 1f       	adc	r21, r21
    2cf4:	62 9f       	mul	r22, r18
    2cf6:	f0 01       	movw	r30, r0
    2cf8:	72 9f       	mul	r23, r18
    2cfa:	bb 27       	eor	r27, r27
    2cfc:	f0 0d       	add	r31, r0
    2cfe:	b1 1d       	adc	r27, r1
    2d00:	63 9f       	mul	r22, r19
    2d02:	aa 27       	eor	r26, r26
    2d04:	f0 0d       	add	r31, r0
    2d06:	b1 1d       	adc	r27, r1
    2d08:	aa 1f       	adc	r26, r26
    2d0a:	64 9f       	mul	r22, r20
    2d0c:	66 27       	eor	r22, r22
    2d0e:	b0 0d       	add	r27, r0
    2d10:	a1 1d       	adc	r26, r1
    2d12:	66 1f       	adc	r22, r22
    2d14:	82 9f       	mul	r24, r18
    2d16:	22 27       	eor	r18, r18
    2d18:	b0 0d       	add	r27, r0
    2d1a:	a1 1d       	adc	r26, r1
    2d1c:	62 1f       	adc	r22, r18
    2d1e:	73 9f       	mul	r23, r19
    2d20:	b0 0d       	add	r27, r0
    2d22:	a1 1d       	adc	r26, r1
    2d24:	62 1f       	adc	r22, r18
    2d26:	83 9f       	mul	r24, r19
    2d28:	a0 0d       	add	r26, r0
    2d2a:	61 1d       	adc	r22, r1
    2d2c:	22 1f       	adc	r18, r18
    2d2e:	74 9f       	mul	r23, r20
    2d30:	33 27       	eor	r19, r19
    2d32:	a0 0d       	add	r26, r0
    2d34:	61 1d       	adc	r22, r1
    2d36:	23 1f       	adc	r18, r19
    2d38:	84 9f       	mul	r24, r20
    2d3a:	60 0d       	add	r22, r0
    2d3c:	21 1d       	adc	r18, r1
    2d3e:	82 2f       	mov	r24, r18
    2d40:	76 2f       	mov	r23, r22
    2d42:	6a 2f       	mov	r22, r26
    2d44:	11 24       	eor	r1, r1
    2d46:	9f 57       	subi	r25, 0x7F	; 127
    2d48:	50 40       	sbci	r21, 0x00	; 0
    2d4a:	9a f0       	brmi	.+38     	; 0x2d72 <__mulsf3_pse+0x88>
    2d4c:	f1 f0       	breq	.+60     	; 0x2d8a <__mulsf3_pse+0xa0>
    2d4e:	88 23       	and	r24, r24
    2d50:	4a f0       	brmi	.+18     	; 0x2d64 <__mulsf3_pse+0x7a>
    2d52:	ee 0f       	add	r30, r30
    2d54:	ff 1f       	adc	r31, r31
    2d56:	bb 1f       	adc	r27, r27
    2d58:	66 1f       	adc	r22, r22
    2d5a:	77 1f       	adc	r23, r23
    2d5c:	88 1f       	adc	r24, r24
    2d5e:	91 50       	subi	r25, 0x01	; 1
    2d60:	50 40       	sbci	r21, 0x00	; 0
    2d62:	a9 f7       	brne	.-22     	; 0x2d4e <__mulsf3_pse+0x64>
    2d64:	9e 3f       	cpi	r25, 0xFE	; 254
    2d66:	51 05       	cpc	r21, r1
    2d68:	80 f0       	brcs	.+32     	; 0x2d8a <__mulsf3_pse+0xa0>
    2d6a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__fp_inf>
    2d6e:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__fp_szero>
    2d72:	5f 3f       	cpi	r21, 0xFF	; 255
    2d74:	e4 f3       	brlt	.-8      	; 0x2d6e <__mulsf3_pse+0x84>
    2d76:	98 3e       	cpi	r25, 0xE8	; 232
    2d78:	d4 f3       	brlt	.-12     	; 0x2d6e <__mulsf3_pse+0x84>
    2d7a:	86 95       	lsr	r24
    2d7c:	77 95       	ror	r23
    2d7e:	67 95       	ror	r22
    2d80:	b7 95       	ror	r27
    2d82:	f7 95       	ror	r31
    2d84:	e7 95       	ror	r30
    2d86:	9f 5f       	subi	r25, 0xFF	; 255
    2d88:	c1 f7       	brne	.-16     	; 0x2d7a <__mulsf3_pse+0x90>
    2d8a:	fe 2b       	or	r31, r30
    2d8c:	88 0f       	add	r24, r24
    2d8e:	91 1d       	adc	r25, r1
    2d90:	96 95       	lsr	r25
    2d92:	87 95       	ror	r24
    2d94:	97 f9       	bld	r25, 7
    2d96:	08 95       	ret

00002d98 <sin>:
    2d98:	9f 93       	push	r25
    2d9a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__fp_rempio2>
    2d9e:	0f 90       	pop	r0
    2da0:	07 fc       	sbrc	r0, 7
    2da2:	ee 5f       	subi	r30, 0xFE	; 254
    2da4:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_sinus>

00002da8 <__fp_mpack>:
    2da8:	9f 3f       	cpi	r25, 0xFF	; 255
    2daa:	31 f0       	breq	.+12     	; 0x2db8 <__fp_mpack_finite+0xc>

00002dac <__fp_mpack_finite>:
    2dac:	91 50       	subi	r25, 0x01	; 1
    2dae:	20 f4       	brcc	.+8      	; 0x2db8 <__fp_mpack_finite+0xc>
    2db0:	87 95       	ror	r24
    2db2:	77 95       	ror	r23
    2db4:	67 95       	ror	r22
    2db6:	b7 95       	ror	r27
    2db8:	88 0f       	add	r24, r24
    2dba:	91 1d       	adc	r25, r1
    2dbc:	96 95       	lsr	r25
    2dbe:	87 95       	ror	r24
    2dc0:	97 f9       	bld	r25, 7
    2dc2:	08 95       	ret

00002dc4 <__fp_powsodd>:
    2dc4:	9f 93       	push	r25
    2dc6:	8f 93       	push	r24
    2dc8:	7f 93       	push	r23
    2dca:	6f 93       	push	r22
    2dcc:	ff 93       	push	r31
    2dce:	ef 93       	push	r30
    2dd0:	9b 01       	movw	r18, r22
    2dd2:	ac 01       	movw	r20, r24
    2dd4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__mulsf3>
    2dd8:	ef 91       	pop	r30
    2dda:	ff 91       	pop	r31
    2ddc:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__fp_powser>
    2de0:	2f 91       	pop	r18
    2de2:	3f 91       	pop	r19
    2de4:	4f 91       	pop	r20
    2de6:	5f 91       	pop	r21
    2de8:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__mulsf3>

00002dec <__fp_powser>:
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	1f 93       	push	r17
    2df2:	0f 93       	push	r16
    2df4:	ff 92       	push	r15
    2df6:	ef 92       	push	r14
    2df8:	df 92       	push	r13
    2dfa:	7b 01       	movw	r14, r22
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	68 94       	set
    2e00:	06 c0       	rjmp	.+12     	; 0x2e0e <__fp_powser+0x22>
    2e02:	da 2e       	mov	r13, r26
    2e04:	ef 01       	movw	r28, r30
    2e06:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__mulsf3x>
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e8 94       	clt
    2e0e:	a5 91       	lpm	r26, Z+
    2e10:	25 91       	lpm	r18, Z+
    2e12:	35 91       	lpm	r19, Z+
    2e14:	45 91       	lpm	r20, Z+
    2e16:	55 91       	lpm	r21, Z+
    2e18:	a6 f3       	brts	.-24     	; 0x2e02 <__fp_powser+0x16>
    2e1a:	ef 01       	movw	r28, r30
    2e1c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__addsf3x>
    2e20:	fe 01       	movw	r30, r28
    2e22:	97 01       	movw	r18, r14
    2e24:	a8 01       	movw	r20, r16
    2e26:	da 94       	dec	r13
    2e28:	69 f7       	brne	.-38     	; 0x2e04 <__fp_powser+0x18>
    2e2a:	df 90       	pop	r13
    2e2c:	ef 90       	pop	r14
    2e2e:	ff 90       	pop	r15
    2e30:	0f 91       	pop	r16
    2e32:	1f 91       	pop	r17
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <__mulsi3>:
    2e3a:	db 01       	movw	r26, r22
    2e3c:	8f 93       	push	r24
    2e3e:	9f 93       	push	r25
    2e40:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__muluhisi3>
    2e44:	bf 91       	pop	r27
    2e46:	af 91       	pop	r26
    2e48:	a2 9f       	mul	r26, r18
    2e4a:	80 0d       	add	r24, r0
    2e4c:	91 1d       	adc	r25, r1
    2e4e:	a3 9f       	mul	r26, r19
    2e50:	90 0d       	add	r25, r0
    2e52:	b2 9f       	mul	r27, r18
    2e54:	90 0d       	add	r25, r0
    2e56:	11 24       	eor	r1, r1
    2e58:	08 95       	ret

00002e5a <__udivmodsi4>:
    2e5a:	a1 e2       	ldi	r26, 0x21	; 33
    2e5c:	1a 2e       	mov	r1, r26
    2e5e:	aa 1b       	sub	r26, r26
    2e60:	bb 1b       	sub	r27, r27
    2e62:	fd 01       	movw	r30, r26
    2e64:	0d c0       	rjmp	.+26     	; 0x2e80 <__udivmodsi4_ep>

00002e66 <__udivmodsi4_loop>:
    2e66:	aa 1f       	adc	r26, r26
    2e68:	bb 1f       	adc	r27, r27
    2e6a:	ee 1f       	adc	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	a2 17       	cp	r26, r18
    2e70:	b3 07       	cpc	r27, r19
    2e72:	e4 07       	cpc	r30, r20
    2e74:	f5 07       	cpc	r31, r21
    2e76:	20 f0       	brcs	.+8      	; 0x2e80 <__udivmodsi4_ep>
    2e78:	a2 1b       	sub	r26, r18
    2e7a:	b3 0b       	sbc	r27, r19
    2e7c:	e4 0b       	sbc	r30, r20
    2e7e:	f5 0b       	sbc	r31, r21

00002e80 <__udivmodsi4_ep>:
    2e80:	66 1f       	adc	r22, r22
    2e82:	77 1f       	adc	r23, r23
    2e84:	88 1f       	adc	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	1a 94       	dec	r1
    2e8a:	69 f7       	brne	.-38     	; 0x2e66 <__udivmodsi4_loop>
    2e8c:	60 95       	com	r22
    2e8e:	70 95       	com	r23
    2e90:	80 95       	com	r24
    2e92:	90 95       	com	r25
    2e94:	9b 01       	movw	r18, r22
    2e96:	ac 01       	movw	r20, r24
    2e98:	bd 01       	movw	r22, r26
    2e9a:	cf 01       	movw	r24, r30
    2e9c:	08 95       	ret

00002e9e <__divmodsi4>:
    2e9e:	05 2e       	mov	r0, r21
    2ea0:	97 fb       	bst	r25, 7
    2ea2:	1e f4       	brtc	.+6      	; 0x2eaa <__divmodsi4+0xc>
    2ea4:	00 94       	com	r0
    2ea6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__negsi2>
    2eaa:	57 fd       	sbrc	r21, 7
    2eac:	07 d0       	rcall	.+14     	; 0x2ebc <__divmodsi4_neg2>
    2eae:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__udivmodsi4>
    2eb2:	07 fc       	sbrc	r0, 7
    2eb4:	03 d0       	rcall	.+6      	; 0x2ebc <__divmodsi4_neg2>
    2eb6:	4e f4       	brtc	.+18     	; 0x2eca <__divmodsi4_exit>
    2eb8:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__negsi2>

00002ebc <__divmodsi4_neg2>:
    2ebc:	50 95       	com	r21
    2ebe:	40 95       	com	r20
    2ec0:	30 95       	com	r19
    2ec2:	21 95       	neg	r18
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ec8:	5f 4f       	sbci	r21, 0xFF	; 255

00002eca <__divmodsi4_exit>:
    2eca:	08 95       	ret

00002ecc <__negsi2>:
    2ecc:	90 95       	com	r25
    2ece:	80 95       	com	r24
    2ed0:	70 95       	com	r23
    2ed2:	61 95       	neg	r22
    2ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eda:	08 95       	ret

00002edc <__tablejump2__>:
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	05 90       	lpm	r0, Z+
    2ee2:	f4 91       	lpm	r31, Z
    2ee4:	e0 2d       	mov	r30, r0
    2ee6:	09 94       	ijmp

00002ee8 <__muluhisi3>:
    2ee8:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__umulhisi3>
    2eec:	a5 9f       	mul	r26, r21
    2eee:	90 0d       	add	r25, r0
    2ef0:	b4 9f       	mul	r27, r20
    2ef2:	90 0d       	add	r25, r0
    2ef4:	a4 9f       	mul	r26, r20
    2ef6:	80 0d       	add	r24, r0
    2ef8:	91 1d       	adc	r25, r1
    2efa:	11 24       	eor	r1, r1
    2efc:	08 95       	ret

00002efe <__mulshisi3>:
    2efe:	b7 ff       	sbrs	r27, 7
    2f00:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__muluhisi3>

00002f04 <__mulohisi3>:
    2f04:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__muluhisi3>
    2f08:	82 1b       	sub	r24, r18
    2f0a:	93 0b       	sbc	r25, r19
    2f0c:	08 95       	ret

00002f0e <__umulhisi3>:
    2f0e:	a2 9f       	mul	r26, r18
    2f10:	b0 01       	movw	r22, r0
    2f12:	b3 9f       	mul	r27, r19
    2f14:	c0 01       	movw	r24, r0
    2f16:	a3 9f       	mul	r26, r19
    2f18:	70 0d       	add	r23, r0
    2f1a:	81 1d       	adc	r24, r1
    2f1c:	11 24       	eor	r1, r1
    2f1e:	91 1d       	adc	r25, r1
    2f20:	b2 9f       	mul	r27, r18
    2f22:	70 0d       	add	r23, r0
    2f24:	81 1d       	adc	r24, r1
    2f26:	11 24       	eor	r1, r1
    2f28:	91 1d       	adc	r25, r1
    2f2a:	08 95       	ret

00002f2c <do_rand>:
    2f2c:	8f 92       	push	r8
    2f2e:	9f 92       	push	r9
    2f30:	af 92       	push	r10
    2f32:	bf 92       	push	r11
    2f34:	cf 92       	push	r12
    2f36:	df 92       	push	r13
    2f38:	ef 92       	push	r14
    2f3a:	ff 92       	push	r15
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	ec 01       	movw	r28, r24
    2f42:	68 81       	ld	r22, Y
    2f44:	79 81       	ldd	r23, Y+1	; 0x01
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	61 15       	cp	r22, r1
    2f4c:	71 05       	cpc	r23, r1
    2f4e:	81 05       	cpc	r24, r1
    2f50:	91 05       	cpc	r25, r1
    2f52:	21 f4       	brne	.+8      	; 0x2f5c <do_rand+0x30>
    2f54:	64 e2       	ldi	r22, 0x24	; 36
    2f56:	79 ed       	ldi	r23, 0xD9	; 217
    2f58:	8b e5       	ldi	r24, 0x5B	; 91
    2f5a:	97 e0       	ldi	r25, 0x07	; 7
    2f5c:	2d e1       	ldi	r18, 0x1D	; 29
    2f5e:	33 ef       	ldi	r19, 0xF3	; 243
    2f60:	41 e0       	ldi	r20, 0x01	; 1
    2f62:	50 e0       	ldi	r21, 0x00	; 0
    2f64:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__divmodsi4>
    2f68:	49 01       	movw	r8, r18
    2f6a:	5a 01       	movw	r10, r20
    2f6c:	9b 01       	movw	r18, r22
    2f6e:	ac 01       	movw	r20, r24
    2f70:	a7 ea       	ldi	r26, 0xA7	; 167
    2f72:	b1 e4       	ldi	r27, 0x41	; 65
    2f74:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__muluhisi3>
    2f78:	6b 01       	movw	r12, r22
    2f7a:	7c 01       	movw	r14, r24
    2f7c:	ac ee       	ldi	r26, 0xEC	; 236
    2f7e:	b4 ef       	ldi	r27, 0xF4	; 244
    2f80:	a5 01       	movw	r20, r10
    2f82:	94 01       	movw	r18, r8
    2f84:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__mulohisi3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	8c 0d       	add	r24, r12
    2f8e:	9d 1d       	adc	r25, r13
    2f90:	ae 1d       	adc	r26, r14
    2f92:	bf 1d       	adc	r27, r15
    2f94:	b7 ff       	sbrs	r27, 7
    2f96:	03 c0       	rjmp	.+6      	; 0x2f9e <do_rand+0x72>
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	a1 09       	sbc	r26, r1
    2f9c:	b0 48       	sbci	r27, 0x80	; 128
    2f9e:	88 83       	st	Y, r24
    2fa0:	99 83       	std	Y+1, r25	; 0x01
    2fa2:	aa 83       	std	Y+2, r26	; 0x02
    2fa4:	bb 83       	std	Y+3, r27	; 0x03
    2fa6:	9f 77       	andi	r25, 0x7F	; 127
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	df 90       	pop	r13
    2fb2:	cf 90       	pop	r12
    2fb4:	bf 90       	pop	r11
    2fb6:	af 90       	pop	r10
    2fb8:	9f 90       	pop	r9
    2fba:	8f 90       	pop	r8
    2fbc:	08 95       	ret

00002fbe <rand_r>:
    2fbe:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <do_rand>
    2fc2:	08 95       	ret

00002fc4 <rand>:
    2fc4:	80 e6       	ldi	r24, 0x60	; 96
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <do_rand>
    2fcc:	08 95       	ret

00002fce <srand>:
    2fce:	a0 e0       	ldi	r26, 0x00	; 0
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2fd6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2fda:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    2fde:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    2fe2:	08 95       	ret

00002fe4 <_exit>:
    2fe4:	f8 94       	cli

00002fe6 <__stop_program>:
    2fe6:	ff cf       	rjmp	.-2      	; 0x2fe6 <__stop_program>
