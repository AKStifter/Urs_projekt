
Urs_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00003cce  00003d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  00800154  00800154  00003e56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00003ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007e42  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2a  00000000  00000000  0000c00a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025ba  00000000  00000000  0000ce34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  0000f3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f69  00000000  00000000  0000ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004797  00000000  00000000  00010f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  000156d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__ctors_end>
       4:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
       8:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
       c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      10:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      14:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      18:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      1c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      20:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      24:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      28:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      2c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      30:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      34:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      38:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      3c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      40:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      44:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      48:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      4c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_19>
      50:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__bad_interrupt>
      54:	4e 0c       	add	r4, r14
      56:	5b 0c       	add	r5, r11
      58:	68 0c       	add	r6, r8
      5a:	75 0c       	add	r7, r5
      5c:	82 0c       	add	r8, r2
      5e:	8f 0c       	add	r8, r15
      60:	9c 0c       	add	r9, r12
      62:	a9 0c       	add	r10, r9
      64:	b6 0c       	add	r11, r6
      66:	c3 0c       	add	r12, r3
      68:	d0 0c       	add	r13, r0
      6a:	dd 0c       	add	r13, r13
      6c:	ea 0c       	add	r14, r10
      6e:	f7 0c       	add	r15, r7
      70:	04 0d       	add	r16, r4
      72:	11 0d       	add	r17, r1
      74:	05 a8       	ldd	r0, Z+53	; 0x35
      76:	4c cd       	rjmp	.-1384   	; 0xfffffb10 <__eeprom_end+0xff7efb10>
      78:	b2 d4       	rcall	.+2404   	; 0x9de <__stack+0x57f>
      7a:	4e b9       	out	0x0e, r20	; 14
      7c:	38 36       	cpi	r19, 0x68	; 104
      7e:	a9 02       	muls	r26, r25
      80:	0c 50       	subi	r16, 0x0C	; 12
      82:	b9 91       	ld	r27, Y+
      84:	86 88       	ldd	r8, Z+22	; 0x16
      86:	08 3c       	cpi	r16, 0xC8	; 200
      88:	a6 aa       	std	Z+54, r10	; 0x36
      8a:	aa 2a       	or	r10, r26
      8c:	be 00       	.word	0x00be	; ????
      8e:	00 00       	nop
      90:	80 3f       	cpi	r24, 0xF0	; 240

00000092 <BigFont>:
      92:	10 10 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
	...
      ba:	07 00 0f 80 0f 80 0f 80 0f 80 0f 80 07 00 07 00     ................
      ca:	00 00 00 00 07 00 07 00 07 00 00 00 00 00 0e 38     ...............8
      da:	0e 38 0e 38 0e 38 06 30 00 00 00 00 00 00 00 00     .8.8.8.0........
	...
      f6:	00 00 0c 30 0c 30 0c 30 7f fe 7f fe 0c 30 0c 30     ...0.0.0.....0.0
     106:	0c 30 0c 30 7f fe 7f fe 0c 30 0c 30 0c 30 00 00     .0.0.....0.0.0..
     116:	00 00 02 40 02 40 0f f8 1f f8 1a 40 1a 40 1f f0     ...@.@.....@.@..
     126:	0f f8 02 58 02 58 1f f8 1f f0 02 40 02 40 00 00     ...X.X.....@.@..
     136:	00 00 00 00 00 00 0e 10 0e 30 0e 70 00 e0 01 c0     .........0.p....
     146:	03 80 07 00 0e 70 0c 70 08 70 00 00 00 00 00 00     .....p.p.p......
     156:	00 00 00 00 0f 00 19 80 19 80 19 80 0f 00 0f 08     ................
     166:	0f 98 19 f8 18 f0 18 e0 19 f0 0f 98 00 00 00 00     ................
     176:	00 00 00 00 07 00 07 00 07 00 0e 00 00 00 00 00     ................
	...
     19a:	00 f0 01 c0 03 80 07 00 0e 00 0e 00 0e 00 0e 00     ................
     1aa:	07 00 03 80 01 c0 00 f0 00 00 00 00 00 00 00 00     ................
     1ba:	0f 00 03 80 01 c0 00 e0 00 70 00 70 00 70 00 70     .........p.p.p.p
     1ca:	00 e0 01 c0 03 80 0f 00 00 00 00 00 00 00 00 00     ................
     1da:	01 80 11 88 09 90 07 e0 07 e0 3f fc 3f fc 07 e0     ..........?.?...
     1ea:	07 e0 09 90 11 88 01 80 00 00 00 00 00 00 00 00     ................
     1fa:	00 00 00 00 01 80 01 80 01 80 0f f0 0f f0 01 80     ................
     20a:	01 80 01 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     22a:	00 00 07 00 07 00 07 00 0e 00 00 00 00 00 00 00     ................
	...
     242:	00 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
	...
     26a:	00 00 07 00 07 00 07 00 00 00 00 00 00 00 00 00     ................
     27a:	00 02 00 06 00 0e 00 1c 00 38 00 70 00 e0 01 c0     .........8.p....
     28a:	03 80 07 00 0e 00 1c 00 00 00 00 00 00 00 00 00     ................
     29a:	0f f0 1c 38 1c 78 1c f8 1c f8 1d b8 1d b8 1f 38     ...8.x.........8
     2aa:	1f 38 1e 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     2ba:	01 80 01 80 03 80 1f 80 1f 80 03 80 03 80 03 80     ................
     2ca:	03 80 03 80 03 80 1f f0 00 00 00 00 00 00 00 00     ................
     2da:	0f e0 1c 70 1c 38 00 38 00 70 00 e0 01 c0 03 80     ...p.8.8.p......
     2ea:	07 00 0e 38 1c 38 1f f8 00 00 00 00 00 00 00 00     ...8.8..........
     2fa:	0f e0 1c 70 1c 38 00 38 00 70 03 c0 03 c0 00 70     ...p.8.8.p.....p
     30a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     31a:	00 e0 01 e0 03 e0 06 e0 0c e0 18 e0 1f f8 1f f8     ................
     32a:	00 e0 00 e0 00 e0 03 f8 00 00 00 00 00 00 00 00     ................
     33a:	1f f8 1c 00 1c 00 1c 00 1c 00 1f e0 1f f0 00 78     ...............x
     34a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     35a:	03 e0 07 00 0e 00 1c 00 1c 00 1f f0 1f f8 1c 38     ...............8
     36a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     37a:	1f fc 1c 1c 1c 1c 1c 1c 00 1c 00 38 00 70 00 e0     ...........8.p..
     38a:	01 c0 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
     39a:	0f f0 1c 38 1c 38 1c 38 1f 38 07 e0 07 e0 1c f8     ...8.8.8.8......
     3aa:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     3ba:	0f f0 1c 38 1c 38 1c 38 1c 38 1f f8 0f f8 00 38     ...8.8.8.8.....8
     3ca:	00 38 00 70 00 e0 07 c0 00 00 00 00 00 00 00 00     .8.p............
     3da:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     3ea:	03 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3fa:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     40a:	03 80 03 80 07 00 00 00 00 00 00 00 00 00 00 70     ...............p
     41a:	00 e0 01 c0 03 80 07 00 0e 00 1c 00 1c 00 0e 00     ................
     42a:	07 00 03 80 01 c0 00 e0 00 70 00 00 00 00 00 00     .........p......
     43a:	00 00 00 00 00 00 3f fc 3f fc 00 00 00 00 3f fc     ......?.?.....?.
     44a:	3f fc 00 00 00 00 00 00 00 00 00 00 00 00 1c 00     ?...............
     45a:	0e 00 07 00 03 80 01 c0 00 e0 00 70 00 70 00 e0     ...........p.p..
     46a:	01 c0 03 80 07 00 0e 00 1c 00 00 00 00 00 03 c0     ................
     47a:	0f f0 1e 78 18 38 00 38 00 70 00 e0 01 c0 01 c0     ...x.8.8.p......
     48a:	00 00 00 00 01 c0 01 c0 01 c0 00 00 00 00 0f f8     ................
     49a:	1c 1c 1c 1c 1c 1c 1c 1c 1c fc 1c fc 1c fc 1c fc     ................
     4aa:	1c 00 1c 00 1c 00 1f f0 07 f8 00 00 00 00 00 00     ................
     4ba:	03 c0 07 e0 0e 70 1c 38 1c 38 1c 38 1c 38 1f f8     .....p.8.8.8.8..
     4ca:	1c 38 1c 38 1c 38 1c 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     4da:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 38     ...8.8.8.8.....8
     4ea:	0e 38 0e 38 0e 38 1f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     4fa:	07 f0 0e 38 1c 38 1c 00 1c 00 1c 00 1c 00 1c 00     ...8.8..........
     50a:	1c 00 1c 38 0e 38 07 f0 00 00 00 00 00 00 00 00     ...8.8..........
     51a:	1f e0 0e 70 0e 38 0e 38 0e 38 0e 38 0e 38 0e 38     ...p.8.8.8.8.8.8
     52a:	0e 38 0e 38 0e 70 1f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     53a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     54a:	0e 00 0e 08 0e 18 1f f8 00 00 00 00 00 00 00 00     ................
     55a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     56a:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     57a:	07 f0 0e 38 1c 38 1c 38 1c 00 1c 00 1c 00 1c f8     ...8.8.8........
     58a:	1c 38 1c 38 0e 38 07 f8 00 00 00 00 00 00 00 00     .8.8.8..........
     59a:	1c 70 1c 70 1c 70 1c 70 1c 70 1f f0 1f f0 1c 70     .p.p.p.p.p.....p
     5aa:	1c 70 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     .p.p.p.p........
     5ba:	0f e0 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     5ca:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     5da:	01 fc 00 70 00 70 00 70 00 70 00 70 00 70 38 70     ...p.p.p.p.p.p8p
     5ea:	38 70 38 70 38 70 0f e0 00 00 00 00 00 00 00 00     8p8p8p..........
     5fa:	1e 38 0e 38 0e 70 0e e0 0f c0 0f 80 0f 80 0f c0     .8.8.p..........
     60a:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     61a:	1f 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     62a:	0e 08 0e 18 0e 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     63a:	1c 1c 1e 3c 1f 7c 1f fc 1f fc 1d dc 1c 9c 1c 1c     ...<.|..........
     64a:	1c 1c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     ................
     65a:	1c 1c 1c 1c 1e 1c 1f 1c 1f 9c 1d dc 1c fc 1c 7c     ...............|
     66a:	1c 3c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     .<..............
     67a:	03 e0 07 f0 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     .....8..........
     68a:	1c 1c 0e 38 07 f0 03 e0 00 00 00 00 00 00 00 00     ...8............
     69a:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 00     ...8.8.8.8......
     6aa:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     6ba:	03 e0 0f 78 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 7c     ...x.8.........|
     6ca:	1c fc 0f f8 0f f8 00 38 00 fc 00 00 00 00 00 00     .......8........
     6da:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 70     ...8.8.8.8.....p
     6ea:	0e 38 0e 38 0e 38 1e 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     6fa:	0f f0 1c 38 1c 38 1c 38 1c 00 0f e0 07 f0 00 38     ...8.8.8.......8
     70a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     71a:	1f fc 19 cc 11 c4 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     72a:	01 c0 01 c0 01 c0 07 f0 00 00 00 00 00 00 00 00     ................
     73a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     74a:	1c 70 1c 70 1c 70 0f e0 00 00 00 00 00 00 00 00     .p.p.p..........
     75a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     76a:	1c 70 0e e0 07 c0 03 80 00 00 00 00 00 00 00 00     .p..............
     77a:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 1c 9c     ................
     78a:	0f f8 0f f8 07 70 07 70 00 00 00 00 00 00 00 00     .....p.p........
     79a:	1c 70 1c 70 1c 70 0e e0 07 c0 03 80 03 80 07 c0     .p.p.p..........
     7aa:	0e e0 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     ...p.p.p........
     7ba:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
     7ca:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     7da:	1f f8 1c 38 18 38 10 70 00 e0 01 c0 03 80 07 00     ...8.8.p........
     7ea:	0e 08 1c 18 1c 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     7fa:	07 f0 07 00 07 00 07 00 07 00 07 00 07 00 07 00     ................
     80a:	07 00 07 00 07 00 07 f0 00 00 00 00 00 00 00 00     ................
     81a:	10 00 18 00 1c 00 0e 00 07 00 03 80 01 c0 00 e0     ................
     82a:	00 70 00 38 00 1c 00 07 00 00 00 00 00 00 00 00     .p.8............
     83a:	07 f0 00 70 00 70 00 70 00 70 00 70 00 70 00 70     ...p.p.p.p.p.p.p
     84a:	00 70 00 70 00 70 07 f0 00 00 00 00 00 00 01 80     .p.p.p..........
     85a:	03 c0 07 e0 0e 70 1c 38 00 00 00 00 00 00 00 00     .....p.8........
	...
     892:	7f ff 7f ff 00 00 00 00 1c 00 1c 00 07 00 07 00     ................
	...
     8c2:	0f e0 00 70 00 70 0f f0 1c 70 1c 70 1c 70 0f d8     ...p.p...p.p.p..
	...
     8da:	1e 00 0e 00 0e 00 0e 00 0f f0 0e 38 0e 38 0e 38     ...........8.8.8
     8ea:	0e 38 0e 38 0e 38 1b f0 00 00 00 00 00 00 00 00     .8.8.8..........
	...
     902:	0f e0 1c 70 1c 70 1c 00 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     91a:	00 f8 00 70 00 70 00 70 0f f0 1c 70 1c 70 1c 70     ...p.p.p...p.p.p
     92a:	1c 70 1c 70 1c 70 0f d8 00 00 00 00 00 00 00 00     .p.p.p..........
	...
     942:	0f e0 1c 70 1c 70 1f f0 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     95a:	03 e0 07 70 07 70 07 00 07 00 1f e0 1f e0 07 00     ...p.p..........
     96a:	07 00 07 00 07 00 1f c0 00 00 00 00 00 00 00 00     ................
	...
     982:	0f d8 1c 70 1c 70 1c 70 1c 70 0f f0 07 f0 00 70     ...p.p.p.p.....p
     992:	1c 70 0f e0 00 00 00 00 1e 00 0e 00 0e 00 0e 00     .p..............
     9a2:	0e f0 0f 38 0f 38 0e 38 0e 38 0e 38 0e 38 1e 38     ...8.8.8.8.8.8.8
	...
     9ba:	01 c0 01 c0 01 c0 00 00 0f c0 01 c0 01 c0 01 c0     ................
     9ca:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
     9da:	00 70 00 70 00 70 00 00 03 f0 00 70 00 70 00 70     .p.p.p.....p.p.p
     9ea:	00 70 00 70 00 70 1c 70 0c f0 07 e0 00 00 00 00     .p.p.p.p........
     9fa:	1e 00 0e 00 0e 00 0e 00 0e 38 0e 70 0e e0 0f c0     .........8.p....
     a0a:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     a1a:	0f c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     a2a:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
	...
     a42:	1f f8 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c     ................
	...
     a62:	1f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     ...p.p.p.p.p.p.p
	...
     a82:	0f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f e0     ...p.p.p.p.p.p..
	...
     aa2:	1b f0 0e 38 0e 38 0e 38 0e 38 0e 38 0f f0 0e 00     ...8.8.8.8.8....
     ab2:	0e 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ac2:	1f b0 38 e0 38 e0 38 e0 38 e0 38 e0 1f e0 00 e0     ..8.8.8.8.8.....
     ad2:	00 e0 01 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ae2:	1e f0 0f f8 0f 38 0e 00 0e 00 0e 00 0e 00 1f 00     .....8..........
	...
     b02:	0f e0 1c 30 1c 30 0f 80 03 e0 18 70 18 70 0f e0     ...0.0.....p.p..
	...
     b1a:	00 00 01 00 03 00 07 00 1f f0 07 00 07 00 07 00     ................
     b2a:	07 00 07 70 07 70 03 e0 00 00 00 00 00 00 00 00     ...p.p..........
	...
     b42:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f d8     .p.p.p.p.p.p.p..
	...
     b62:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
	...
     b82:	1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 0f f8 07 70 07 70     .............p.p
	...
     ba2:	1c e0 1c e0 0f c0 07 80 07 80 0f c0 1c e0 1c e0     ................
	...
     bc2:	0e 38 0e 38 0e 38 0e 38 0e 38 07 f0 03 e0 00 e0     .8.8.8.8.8......
     bd2:	01 c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     be2:	1f e0 18 e0 11 c0 03 80 07 00 0e 20 1c 60 1f e0     ........... .`..
	...
     bfa:	01 f8 03 80 03 80 03 80 07 00 1c 00 1c 00 07 00     ................
     c0a:	03 80 03 80 03 80 01 f8 00 00 00 00 00 00 01 c0     ................
     c1a:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     c2a:	01 c0 01 c0 01 c0 01 c0 01 c0 00 00 00 00 00 00     ................
     c3a:	1f 80 01 c0 01 c0 01 c0 00 e0 00 38 00 38 00 e0     ...........8.8..
     c4a:	01 c0 01 c0 01 c0 1f 80 00 00 00 00 00 00 00 00     ................
     c5a:	1f 1c 3b 9c 39 dc 38 f8 00 00 00 00 00 00 00 00     ..;.9.8.........
	...

00000c76 <SmallFont>:
     c76:	08 0c 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
     c86:	00 00 20 20 20 20 20 20 00 20 00 00 00 28 50 50     ..      . ...(PP
	...
     c9e:	00 00 28 28 fc 28 50 fc 50 50 00 00 00 20 78 a8     ..((.(P.PP... x.
     cae:	a0 60 30 28 a8 f0 20 00 00 00 48 a8 b0 50 28 34     .`0(.. ...H..P(4
     cbe:	54 48 00 00 00 00 20 50 50 78 a8 a8 90 6c 00 00     TH.... PPx...l..
     cce:	00 40 40 80 00 00 00 00 00 00 00 00 00 04 08 10     .@@.............
     cde:	10 10 10 10 10 08 04 00 00 40 20 10 10 10 10 10     .........@ .....
     cee:	10 20 40 00 00 00 00 20 a8 70 70 a8 20 00 00 00     . @.... .pp. ...
     cfe:	00 00 20 20 20 f8 20 20 20 00 00 00 00 00 00 00     ..   .   .......
     d0e:	00 00 00 00 00 40 40 80 00 00 00 00 00 f8 00 00     .....@@.........
	...
     d2a:	00 40 00 00 00 08 10 10 10 20 20 40 40 40 80 00     .@.......  @@@..
     d3a:	00 00 70 88 88 88 88 88 88 70 00 00 00 00 20 60     ..p......p.... `
     d4a:	20 20 20 20 20 70 00 00 00 00 70 88 88 10 20 40          p....p... @
     d5a:	80 f8 00 00 00 00 70 88 08 30 08 08 88 70 00 00     ......p..0...p..
     d6a:	00 00 10 30 50 50 90 78 10 18 00 00 00 00 f8 80     ...0PP.x........
     d7a:	80 f0 08 08 88 70 00 00 00 00 70 90 80 f0 88 88     .....p....p.....
     d8a:	88 70 00 00 00 00 f8 90 10 20 20 20 20 20 00 00     .p.......     ..
     d9a:	00 00 70 88 88 70 88 88 88 70 00 00 00 00 70 88     ..p..p...p....p.
     daa:	88 88 78 08 48 70 00 00 00 00 00 00 20 00 00 00     ..x.Hp...... ...
     dba:	00 20 00 00 00 00 00 00 00 20 00 00 00 20 20 00     . ....... ...  .
     dca:	00 04 08 10 20 40 20 10 08 04 00 00 00 00 00 00     .... @ .........
     dda:	f8 00 00 f8 00 00 00 00 00 40 20 10 08 04 08 10     .........@ .....
     dea:	20 40 00 00 00 00 70 88 88 10 20 20 00 20 00 00      @....p...  . ..
     dfa:	00 00 70 88 98 a8 a8 b8 80 78 00 00 00 00 20 20     ..p......x....  
     e0a:	30 50 50 78 48 cc 00 00 00 00 f0 48 48 70 48 48     0PPxH......HHpHH
     e1a:	48 f0 00 00 00 00 78 88 80 80 80 80 88 70 00 00     H.....x......p..
     e2a:	00 00 f0 48 48 48 48 48 48 f0 00 00 00 00 f8 48     ...HHHHHH......H
     e3a:	50 70 50 40 48 f8 00 00 00 00 f8 48 50 70 50 40     PpP@H......HPpP@
     e4a:	40 e0 00 00 00 00 38 48 80 80 9c 88 48 30 00 00     @.....8H....H0..
     e5a:	00 00 cc 48 48 78 48 48 48 cc 00 00 00 00 f8 20     ...HHxHHH...... 
     e6a:	20 20 20 20 20 f8 00 00 00 00 7c 10 10 10 10 10          .....|.....
     e7a:	10 90 e0 00 00 00 ec 48 50 60 50 50 48 ec 00 00     .......HP`PPH...
     e8a:	00 00 e0 40 40 40 40 40 44 fc 00 00 00 00 d8 d8     ...@@@@@D.......
     e9a:	d8 d8 a8 a8 a8 a8 00 00 00 00 dc 48 68 68 58 58     ...........HhhXX
     eaa:	48 e8 00 00 00 00 70 88 88 88 88 88 88 70 00 00     H.....p......p..
     eba:	00 00 f0 48 48 70 40 40 40 e0 00 00 00 00 70 88     ...HHp@@@.....p.
     eca:	88 88 88 e8 98 70 18 00 00 00 f0 48 48 70 50 48     .....p.....HHpPH
     eda:	48 ec 00 00 00 00 78 88 80 60 10 08 88 f0 00 00     H.....x..`......
     eea:	00 00 f8 a8 20 20 20 20 20 70 00 00 00 00 cc 48     ....     p.....H
     efa:	48 48 48 48 48 30 00 00 00 00 cc 48 48 50 50 30     HHHHH0.....HHPP0
     f0a:	20 20 00 00 00 00 a8 a8 a8 70 50 50 50 50 00 00       .......pPPPP..
     f1a:	00 00 d8 50 50 20 20 50 50 d8 00 00 00 00 d8 50     ...PP  PP......P
     f2a:	50 20 20 20 20 70 00 00 00 00 f8 90 10 20 20 40     P    p.......  @
     f3a:	48 f8 00 00 00 38 20 20 20 20 20 20 20 20 38 00     H....8        8.
     f4a:	00 40 40 40 20 20 10 10 10 08 00 00 00 70 10 10     .@@@  .......p..
     f5a:	10 10 10 10 10 10 70 00 00 20 50 00 00 00 00 00     ......p.. P.....
	...
     f76:	00 00 00 fc 00 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
     f86:	00 00 00 00 00 30 48 38 48 3c 00 00 00 00 c0 40     .....0H8H<.....@
     f96:	40 70 48 48 48 70 00 00 00 00 00 00 00 38 48 40     @pHHHp.......8H@
     fa6:	40 38 00 00 00 00 18 08 08 38 48 48 48 3c 00 00     @8.......8HHH<..
     fb6:	00 00 00 00 00 30 48 78 40 38 00 00 00 00 1c 20     .....0Hx@8..... 
     fc6:	20 78 20 20 20 78 00 00 00 00 00 00 00 3c 48 30      x   x.......<H0
     fd6:	40 78 44 38 00 00 c0 40 40 70 48 48 48 ec 00 00     @xD8...@@pHHH...
     fe6:	00 00 20 00 00 60 20 20 20 70 00 00 00 00 10 00     .. ..`   p......
     ff6:	00 30 10 10 10 10 10 e0 00 00 c0 40 40 5c 50 70     .0.........@@\Pp
    1006:	48 ec 00 00 00 00 e0 20 20 20 20 20 20 f8 00 00     H......      ...
    1016:	00 00 00 00 00 f0 a8 a8 a8 a8 00 00 00 00 00 00     ................
    1026:	00 f0 48 48 48 ec 00 00 00 00 00 00 00 30 48 48     ..HHH........0HH
    1036:	48 30 00 00 00 00 00 00 00 f0 48 48 48 70 40 e0     H0........HHHp@.
    1046:	00 00 00 00 00 38 48 48 48 38 08 1c 00 00 00 00     .....8HHH8......
    1056:	00 d8 60 40 40 e0 00 00 00 00 00 00 00 78 40 30     ..`@@........x@0
    1066:	08 78 00 00 00 00 00 20 20 70 20 20 20 18 00 00     .x.....  p   ...
    1076:	00 00 00 00 00 d8 48 48 48 3c 00 00 00 00 00 00     ......HHH<......
    1086:	00 ec 48 50 30 20 00 00 00 00 00 00 00 a8 a8 70     ..HP0 .........p
    1096:	50 50 00 00 00 00 00 00 00 d8 50 20 50 d8 00 00     PP........P P...
    10a6:	00 00 00 00 00 ec 48 50 30 20 20 c0 00 00 00 00     ......HP0  .....
    10b6:	00 78 10 20 20 78 00 00 00 18 10 10 10 20 10 10     .x.  x....... ..
    10c6:	10 10 18 00 10 10 10 10 10 10 10 10 10 10 10 10     ................
    10d6:	00 60 20 20 20 10 20 20 20 20 60 00 40 a4 18 00     .`   .    `.@...
	...

000010ee <__ctors_start>:
    10ee:	0b 13       	cpse	r16, r27

000010f0 <__ctors_end>:
    10f0:	11 24       	eor	r1, r1
    10f2:	1f be       	out	0x3f, r1	; 63
    10f4:	cf e5       	ldi	r28, 0x5F	; 95
    10f6:	d4 e0       	ldi	r29, 0x04	; 4
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	cd bf       	out	0x3d, r28	; 61

000010fc <__do_copy_data>:
    10fc:	11 e0       	ldi	r17, 0x01	; 1
    10fe:	a0 e6       	ldi	r26, 0x60	; 96
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ee ec       	ldi	r30, 0xCE	; 206
    1104:	fc e3       	ldi	r31, 0x3C	; 60
    1106:	02 c0       	rjmp	.+4      	; 0x110c <__do_copy_data+0x10>
    1108:	05 90       	lpm	r0, Z+
    110a:	0d 92       	st	X+, r0
    110c:	a4 35       	cpi	r26, 0x54	; 84
    110e:	b1 07       	cpc	r27, r17
    1110:	d9 f7       	brne	.-10     	; 0x1108 <__do_copy_data+0xc>

00001112 <__do_clear_bss>:
    1112:	21 e0       	ldi	r18, 0x01	; 1
    1114:	a4 e5       	ldi	r26, 0x54	; 84
    1116:	b1 e0       	ldi	r27, 0x01	; 1
    1118:	01 c0       	rjmp	.+2      	; 0x111c <.do_clear_bss_start>

0000111a <.do_clear_bss_loop>:
    111a:	1d 92       	st	X+, r1

0000111c <.do_clear_bss_start>:
    111c:	a6 39       	cpi	r26, 0x96	; 150
    111e:	b2 07       	cpc	r27, r18
    1120:	e1 f7       	brne	.-8      	; 0x111a <.do_clear_bss_loop>

00001122 <__do_global_ctors>:
    1122:	18 e0       	ldi	r17, 0x08	; 8
    1124:	c8 e7       	ldi	r28, 0x78	; 120
    1126:	d8 e0       	ldi	r29, 0x08	; 8
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <__do_global_ctors+0x10>
    112a:	21 97       	sbiw	r28, 0x01	; 1
    112c:	fe 01       	movw	r30, r28
    112e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__tablejump2__>
    1132:	c7 37       	cpi	r28, 0x77	; 119
    1134:	d1 07       	cpc	r29, r17
    1136:	c9 f7       	brne	.-14     	; 0x112a <__do_global_ctors+0x8>
    1138:	0e 94 ae 12 	call	0x255c	; 0x255c <main>
    113c:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <_exit>

00001140 <__bad_interrupt>:
    1140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001144 <fastbitmap_1bit>:
		r20:r21 fg color 
		r18:r19 bg color
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
    1144:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
    1146:	ba 2f       	mov	r27, r26
	set
    1148:	68 94       	set
	bld r26,WR_PIN
    114a:	a6 f9       	bld	r26, 6
	clt
    114c:	e8 94       	clt
	bld r27,WR_PIN
    114e:	b6 f9       	bld	r27, 6
	
	movw r30, r22
    1150:	fb 01       	movw	r30, r22

00001152 <FB1BIT_LOOP>:

FB1BIT_LOOP:

	LPM r0, Z+
    1152:	05 90       	lpm	r0, Z+

	PLOT_MONO_PIXEL r0,7
    1154:	07 fa       	bst	r0, 7
    1156:	1e f4       	brtc	.+6      	; 0x115e <FB1BIT_LOOP+0xc>
    1158:	42 bb       	out	0x12, r20	; 18
    115a:	5b bb       	out	0x1b, r21	; 27
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <FB1BIT_LOOP+0x10>
    115e:	22 bb       	out	0x12, r18	; 18
    1160:	3b bb       	out	0x1b, r19	; 27
    1162:	b5 bb       	out	0x15, r27	; 21
    1164:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,6
    1166:	06 fa       	bst	r0, 6
    1168:	1e f4       	brtc	.+6      	; 0x1170 <FB1BIT_LOOP+0x1e>
    116a:	42 bb       	out	0x12, r20	; 18
    116c:	5b bb       	out	0x1b, r21	; 27
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <FB1BIT_LOOP+0x22>
    1170:	22 bb       	out	0x12, r18	; 18
    1172:	3b bb       	out	0x1b, r19	; 27
    1174:	b5 bb       	out	0x15, r27	; 21
    1176:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,5
    1178:	05 fa       	bst	r0, 5
    117a:	1e f4       	brtc	.+6      	; 0x1182 <FB1BIT_LOOP+0x30>
    117c:	42 bb       	out	0x12, r20	; 18
    117e:	5b bb       	out	0x1b, r21	; 27
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <FB1BIT_LOOP+0x34>
    1182:	22 bb       	out	0x12, r18	; 18
    1184:	3b bb       	out	0x1b, r19	; 27
    1186:	b5 bb       	out	0x15, r27	; 21
    1188:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,4
    118a:	04 fa       	bst	r0, 4
    118c:	1e f4       	brtc	.+6      	; 0x1194 <FB1BIT_LOOP+0x42>
    118e:	42 bb       	out	0x12, r20	; 18
    1190:	5b bb       	out	0x1b, r21	; 27
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <FB1BIT_LOOP+0x46>
    1194:	22 bb       	out	0x12, r18	; 18
    1196:	3b bb       	out	0x1b, r19	; 27
    1198:	b5 bb       	out	0x15, r27	; 21
    119a:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,3
    119c:	03 fa       	bst	r0, 3
    119e:	1e f4       	brtc	.+6      	; 0x11a6 <FB1BIT_LOOP+0x54>
    11a0:	42 bb       	out	0x12, r20	; 18
    11a2:	5b bb       	out	0x1b, r21	; 27
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <FB1BIT_LOOP+0x58>
    11a6:	22 bb       	out	0x12, r18	; 18
    11a8:	3b bb       	out	0x1b, r19	; 27
    11aa:	b5 bb       	out	0x15, r27	; 21
    11ac:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,2
    11ae:	02 fa       	bst	r0, 2
    11b0:	1e f4       	brtc	.+6      	; 0x11b8 <FB1BIT_LOOP+0x66>
    11b2:	42 bb       	out	0x12, r20	; 18
    11b4:	5b bb       	out	0x1b, r21	; 27
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <FB1BIT_LOOP+0x6a>
    11b8:	22 bb       	out	0x12, r18	; 18
    11ba:	3b bb       	out	0x1b, r19	; 27
    11bc:	b5 bb       	out	0x15, r27	; 21
    11be:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,1
    11c0:	01 fa       	bst	r0, 1
    11c2:	1e f4       	brtc	.+6      	; 0x11ca <FB1BIT_LOOP+0x78>
    11c4:	42 bb       	out	0x12, r20	; 18
    11c6:	5b bb       	out	0x1b, r21	; 27
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <FB1BIT_LOOP+0x7c>
    11ca:	22 bb       	out	0x12, r18	; 18
    11cc:	3b bb       	out	0x1b, r19	; 27
    11ce:	b5 bb       	out	0x15, r27	; 21
    11d0:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,0
    11d2:	00 fa       	bst	r0, 0
    11d4:	1e f4       	brtc	.+6      	; 0x11dc <FB1BIT_LOOP+0x8a>
    11d6:	42 bb       	out	0x12, r20	; 18
    11d8:	5b bb       	out	0x1b, r21	; 27
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <FB1BIT_LOOP+0x8e>
    11dc:	22 bb       	out	0x12, r18	; 18
    11de:	3b bb       	out	0x1b, r19	; 27
    11e0:	b5 bb       	out	0x15, r27	; 21
    11e2:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
    11e4:	81 50       	subi	r24, 0x01	; 1
    11e6:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
    11e8:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
    11ea:	91 05       	cpc	r25, r1
	breq FB1BIT_DONE
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <FB1BIT_DONE>
	jmp FB1BIT_LOOP
    11ee:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <FB1BIT_LOOP>

000011f2 <FB1BIT_DONE>:


FB1BIT_DONE:

	ret;
    11f2:	08 95       	ret

000011f4 <fastbitmap_16bit>:
		r24:r25 lenght in pixels/words
		r22:r23 pointer to data
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
    11f4:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
    11f6:	ba 2f       	mov	r27, r26
	set
    11f8:	68 94       	set
	bld r26,WR_PIN
    11fa:	a6 f9       	bld	r26, 6
	clt
    11fc:	e8 94       	clt
	bld r27,WR_PIN
    11fe:	b6 f9       	bld	r27, 6
	
	movw r30, r22
    1200:	fb 01       	movw	r30, r22

00001202 <FB16BIT_LOOP>:

FB16BIT_LOOP:

	
	LPM r0, Z+	
    1202:	05 90       	lpm	r0, Z+
	out DPHIO, r0	
    1204:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+	
    1206:	05 90       	lpm	r0, Z+
	out DPLIO, r0
    1208:	02 ba       	out	0x12, r0	; 18

	TOGGLE_WR_FAST r27,r26	// place a pixel!
    120a:	b5 bb       	out	0x15, r27	; 21
    120c:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
    120e:	81 50       	subi	r24, 0x01	; 1
    1210:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
    1212:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
    1214:	91 05       	cpc	r25, r1
	breq FB16BIT_DONE
    1216:	11 f0       	breq	.+4      	; 0x121c <FB16BIT_DONE>
	jmp FB16BIT_LOOP
    1218:	0c 94 01 09 	jmp	0x1202	; 0x1202 <FB16BIT_LOOP>

0000121c <FB16BIT_DONE>:


FB16BIT_DONE:

	ret;
    121c:	08 95       	ret

0000121e <fastbitmap_pb565>:
		r24:r25 data
		
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
    121e:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
    1220:	ba 2f       	mov	r27, r26
	set
    1222:	68 94       	set
	bld r26,WR_PIN
    1224:	a6 f9       	bld	r26, 6
	clt
    1226:	e8 94       	clt
	bld r27,WR_PIN
    1228:	b6 f9       	bld	r27, 6
	
	movw r30, r24
    122a:	fc 01       	movw	r30, r24

	clr r1
    122c:	11 24       	eor	r1, r1

0000122e <PB565BIT_LOOP>:

PB565BIT_LOOP:
	
	LPM r18, Z+	
    122e:	25 91       	lpm	r18, Z+
	cpi r18,0
    1230:	20 30       	cpi	r18, 0x00	; 0
	breq PB565BIT_DONE
    1232:	a9 f0       	breq	.+42     	; 0x125e <PB565BIT_DONE>
	
	bst r18,7
    1234:	27 fb       	bst	r18, 7
	brtc PB565PLAIN
    1236:	56 f4       	brtc	.+20     	; 0x124c <PB565PLAIN>
	
	// compressed loop.
	andi r18,0x7F
    1238:	2f 77       	andi	r18, 0x7F	; 127
	LPM r0, Z+
    123a:	05 90       	lpm	r0, Z+
	out DPHIO, r0
    123c:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
    123e:	05 90       	lpm	r0, Z+
	out DPLIO, r0
    1240:	02 ba       	out	0x12, r0	; 18

00001242 <PB565COMPRESSED>:
	

PB565COMPRESSED:
	TOGGLE_WR_FAST r27,r26
    1242:	b5 bb       	out	0x15, r27	; 21
    1244:	a5 bb       	out	0x15, r26	; 21
	dec r18
    1246:	2a 95       	dec	r18
	brne PB565COMPRESSED
    1248:	e1 f7       	brne	.-8      	; 0x1242 <PB565COMPRESSED>
	rjmp PB565BIT_LOOP
    124a:	f1 cf       	rjmp	.-30     	; 0x122e <PB565BIT_LOOP>

0000124c <PB565PLAIN>:


PB565PLAIN:

	LPM r0, Z+
    124c:	05 90       	lpm	r0, Z+
	out DPHIO, r0
    124e:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
    1250:	05 90       	lpm	r0, Z+
	out DPLIO, r0
    1252:	02 ba       	out	0x12, r0	; 18
	TOGGLE_WR_FAST r27,r26
    1254:	b5 bb       	out	0x15, r27	; 21
    1256:	a5 bb       	out	0x15, r26	; 21
	dec r18
    1258:	2a 95       	dec	r18
	brne PB565PLAIN
    125a:	c1 f7       	brne	.-16     	; 0x124c <PB565PLAIN>
	rjmp PB565BIT_LOOP
    125c:	e8 cf       	rjmp	.-48     	; 0x122e <PB565BIT_LOOP>

0000125e <PB565BIT_DONE>:




PB565BIT_DONE:
	clr r0
    125e:	00 24       	eor	r0, r0
    1260:	08 95       	ret

00001262 <fastfill>:
// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill:

	clr r18
    1262:	22 27       	eor	r18, r18

	// devide by 2
	// no need for register 25 it has no bits we care about.
	lsr r24
    1264:	86 95       	lsr	r24
	ror r23
    1266:	77 95       	ror	r23
	ror r22
    1268:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
    126a:	27 95       	ror	r18

	// devide by 4
	// no need for register 24, it had a max of 1 bit we care about.
	lsr r23
    126c:	76 95       	lsr	r23
	ror r22
    126e:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
    1270:	27 95       	ror	r18

	// devide by 8
	//lsr r24
	lsr r23
    1272:	76 95       	lsr	r23
	ror r22
    1274:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
    1276:	27 95       	ror	r18

	// devide by 16		
	// lsr r24
	lsr r23
    1278:	76 95       	lsr	r23
	ror r22
    127a:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
    127c:	27 95       	ror	r18

	// finish rolling a full 8 bits aka swap nibbles
	swap r18
    127e:	22 95       	swap	r18

	movw r24, r22
    1280:	cb 01       	movw	r24, r22

00001282 <fastfill2>:
// r24 + r25 hold 16 bit unsigned number of 16xloops.
// r18 holds 8 bit unsigned numner of single loops
fastfill2:

	// prepare the out port registers
	in r30, _SFR_IO_ADDR(WR_PORT)
    1282:	e5 b3       	in	r30, 0x15	; 21
	mov r31, r30
    1284:	fe 2f       	mov	r31, r30
	set
    1286:	68 94       	set
	bld r30,WR_PIN
    1288:	e6 f9       	bld	r30, 6
	clt
    128a:	e8 94       	clt
	bld r31,WR_PIN
    128c:	f6 f9       	bld	r31, 6

	sbiw r24,0 // subtract zero and test if zero	
    128e:	00 97       	sbiw	r24, 0x00	; 0
	breq exitloop16
    1290:	11 f1       	breq	.+68     	; 0x12d6 <exitloop16>

00001292 <loop16>:
loop16:
		
	TOGGLE_WR_FAST r31,r30
    1292:	f5 bb       	out	0x15, r31	; 21
    1294:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    1296:	f5 bb       	out	0x15, r31	; 21
    1298:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    129a:	f5 bb       	out	0x15, r31	; 21
    129c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    129e:	f5 bb       	out	0x15, r31	; 21
    12a0:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
    12a2:	f5 bb       	out	0x15, r31	; 21
    12a4:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12a6:	f5 bb       	out	0x15, r31	; 21
    12a8:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12aa:	f5 bb       	out	0x15, r31	; 21
    12ac:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12ae:	f5 bb       	out	0x15, r31	; 21
    12b0:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
    12b2:	f5 bb       	out	0x15, r31	; 21
    12b4:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12b6:	f5 bb       	out	0x15, r31	; 21
    12b8:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12ba:	f5 bb       	out	0x15, r31	; 21
    12bc:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12be:	f5 bb       	out	0x15, r31	; 21
    12c0:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
    12c2:	f5 bb       	out	0x15, r31	; 21
    12c4:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12c6:	f5 bb       	out	0x15, r31	; 21
    12c8:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12ca:	f5 bb       	out	0x15, r31	; 21
    12cc:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
    12ce:	f5 bb       	out	0x15, r31	; 21
    12d0:	e5 bb       	out	0x15, r30	; 21

	sbiw r24,1	
    12d2:	01 97       	sbiw	r24, 0x01	; 1
	brne loop16
    12d4:	f1 f6       	brne	.-68     	; 0x1292 <loop16>

000012d6 <exitloop16>:

exitloop16:

	cpi r18,0
    12d6:	20 30       	cpi	r18, 0x00	; 0
	breq exitsingleloop
    12d8:	21 f0       	breq	.+8      	; 0x12e2 <exitsingleloop>

000012da <singleloop>:
singleloop:			
	TOGGLE_WR_FAST r31,r30
    12da:	f5 bb       	out	0x15, r31	; 21
    12dc:	e5 bb       	out	0x15, r30	; 21
	dec r18
    12de:	2a 95       	dec	r18
	brne singleloop
    12e0:	e1 f7       	brne	.-8      	; 0x12da <singleloop>

000012e2 <exitsingleloop>:

exitsingleloop:
	ret 
    12e2:	08 95       	ret

000012e4 <fastfill3>:

// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill3:
	TOGGLE_WR
    12e4:	ae 98       	cbi	0x15, 6	; 21
    12e6:	ae 9a       	sbi	0x15, 6	; 21
	SUB32 r22,r23,r24,r25,1
    12e8:	61 50       	subi	r22, 0x01	; 1
    12ea:	70 40       	sbci	r23, 0x00	; 0
    12ec:	80 40       	sbci	r24, 0x00	; 0
    12ee:	90 40       	sbci	r25, 0x00	; 0
	brne fastfill3
    12f0:	c9 f7       	brne	.-14     	; 0x12e4 <fastfill3>

    12f2:	08 95       	ret

000012f4 <LCD_Write_COM>:
#include "as_macros.h"


.global LCD_Write_COM
LCD_Write_COM:
	BUS_START_REG
    12f4:	af 98       	cbi	0x15, 7	; 21
	clr r1
    12f6:	11 24       	eor	r1, r1
	out DPLIO, r24
    12f8:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
    12fa:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
    12fc:	ae 98       	cbi	0x15, 6	; 21
    12fe:	ae 9a       	sbi	0x15, 6	; 21
	ret
    1300:	08 95       	ret

00001302 <LCD_Write_DATA>:

.global LCD_Write_DATA
LCD_Write_DATA:
	BUS_START_DATA	
    1302:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
    1304:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r24
    1306:	8b bb       	out	0x1b, r24	; 27
	TOGGLE_WR
    1308:	ae 98       	cbi	0x15, 6	; 21
    130a:	ae 9a       	sbi	0x15, 6	; 21
	ret
    130c:	08 95       	ret

0000130e <LCD_Write_DATA2>:

.global LCD_Write_DATA2
LCD_Write_DATA2:
	BUS_START_DATA	
    130e:	af 9a       	sbi	0x15, 7	; 21
	clr r1
    1310:	11 24       	eor	r1, r1
	out DPLIO, r24
    1312:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
    1314:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
    1316:	ae 98       	cbi	0x15, 6	; 21
    1318:	ae 9a       	sbi	0x15, 6	; 21
	ret
    131a:	08 95       	ret

0000131c <LCD_Write_COM_DATA>:


.global LCD_Write_COM_DATA
LCD_Write_COM_DATA:
	
	BUS_START_REG
    131c:	af 98       	cbi	0x15, 7	; 21
	clr r1
    131e:	11 24       	eor	r1, r1
	out DPLIO, r24
    1320:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
    1322:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
    1324:	ae 98       	cbi	0x15, 6	; 21
    1326:	ae 9a       	sbi	0x15, 6	; 21

	BUS_START_DATA	
    1328:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
    132a:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r23
    132c:	7b bb       	out	0x1b, r23	; 27
	TOGGLE_WR
    132e:	ae 98       	cbi	0x15, 6	; 21
    1330:	ae 9a       	sbi	0x15, 6	; 21

	ret
    1332:	08 95       	ret

00001334 <LCD_Writ_Bus>:


.global LCD_Writ_Bus
	LCD_Writ_Bus:

	out DPHIO, r24
    1334:	8b bb       	out	0x1b, r24	; 27
	out DPLIO, r22
    1336:	62 bb       	out	0x12, r22	; 18
	TOGGLE_WR
    1338:	ae 98       	cbi	0x15, 6	; 21
    133a:	ae 9a       	sbi	0x15, 6	; 21

    133c:	08 95       	ret

0000133e <_Z41__static_initialization_and_destruction_0ii>:
			menu = 1;
		} else if (menu == 1) {
			memoryGame();  //pokreni igru
		}
	}
}
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	39 f4       	brne	.+14     	; 0x1350 <_Z41__static_initialization_and_destruction_0ii+0x12>
    1342:	6f 3f       	cpi	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	21 f4       	brne	.+8      	; 0x1350 <_Z41__static_initialization_and_destruction_0ii+0x12>
#define CHALLENGE_LENGTH 30               // koliko rundi do pobjede, default 30
#define CHALLENGE_MOVES 45                // koliko poteza mozemo napraviti do gubljenja igre u prvoj rundi, default 45
#define CHALLENGE_TIME 120                // koliko vremena imamo za pobijediti level u prvoj rundi, default 120
#define CHALLENGE_STEP 3                  // za koliko sekundi se smanji vrijeme po rundi

UTFT display;
    1348:	83 e8       	ldi	r24, 0x83	; 131
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 39 14 	call	0x2872	; 0x2872 <_ZN4UTFTC1Ev>
    1350:	08 95       	ret

00001352 <_Z7Touchedv>:

bool Touched() {
	// PINB3(T-IRQ) nizak pri dodiru
	if (bit_is_clear(PINB, T_IRQ)){
    1352:	b3 99       	sbic	0x16, 3	; 22
    1354:	02 c0       	rjmp	.+4      	; 0x135a <_Z7Touchedv+0x8>
		return true;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	08 95       	ret
		} else {
		return false;
    135a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    135c:	08 95       	ret

0000135e <_Z4getXv>:

uint16_t getX() {
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
	SPI_Write(0X90);
    1366:	80 e9       	ldi	r24, 0x90	; 144
    1368:	0e 94 21 13 	call	0x2642	; 0x2642 <SPI_Write>
	float x = SPI_Read() / 120.0 * 320 - 15;
    136c:	0e 94 26 13 	call	0x264c	; 0x264c <SPI_Read>
    1370:	68 2f       	mov	r22, r24
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 ef       	ldi	r20, 0xF0	; 240
    1382:	52 e4       	ldi	r21, 0x42	; 66
    1384:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 ea       	ldi	r20, 0xA0	; 160
    138e:	53 e4       	ldi	r21, 0x43	; 67
    1390:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e7       	ldi	r20, 0x70	; 112
    139a:	51 e4       	ldi	r21, 0x41	; 65
    139c:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__subsf3>
    13a0:	6b 01       	movw	r12, r22
    13a2:	7c 01       	movw	r14, r24
	SPI_Write(0);
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0e 94 21 13 	call	0x2642	; 0x2642 <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	97 e4       	ldi	r25, 0x47	; 71
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <_Z4getXv+0x50>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <_Z4getXv+0x56>
    13b4:	00 00       	nop
	_delay_ms(10);
	return (uint16_t) x;
    13b6:	c7 01       	movw	r24, r14
    13b8:	b6 01       	movw	r22, r12
    13ba:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
}
    13be:	cb 01       	movw	r24, r22
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	08 95       	ret

000013ca <_Z4getYv>:

uint16_t getY() {
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
	float y = 0;
    13d2:	c1 2c       	mov	r12, r1
    13d4:	d1 2c       	mov	r13, r1
    13d6:	76 01       	movw	r14, r12
	while(y <= 0 ){
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	c7 01       	movw	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 07 1b 	call	0x360e	; 0x360e <__cmpsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	ec f0       	brlt	.+58     	; 0x1424 <_Z4getYv+0x5a>
		SPI_Write(0XD0);
    13ea:	80 ed       	ldi	r24, 0xD0	; 208
    13ec:	0e 94 21 13 	call	0x2642	; 0x2642 <SPI_Write>
		y = SPI_Read() / 120.0 * 240;
    13f0:	0e 94 26 13 	call	0x264c	; 0x264c <SPI_Read>
    13f4:	68 2f       	mov	r22, r24
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 ef       	ldi	r20, 0xF0	; 240
    1406:	52 e4       	ldi	r21, 0x42	; 66
    1408:	0e 94 11 1b 	call	0x3622	; 0x3622 <__divsf3>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e7       	ldi	r20, 0x70	; 112
    1412:	53 e4       	ldi	r21, 0x43	; 67
    1414:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    1418:	6b 01       	movw	r12, r22
    141a:	7c 01       	movw	r14, r24
		SPI_Write(0);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	0e 94 21 13 	call	0x2642	; 0x2642 <SPI_Write>
	return (uint16_t) x;
}

uint16_t getY() {
	float y = 0;
	while(y <= 0 ){
    1422:	da cf       	rjmp	.-76     	; 0x13d8 <_Z4getYv+0xe>
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	97 e4       	ldi	r25, 0x47	; 71
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <_Z4getYv+0x5e>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <_Z4getYv+0x64>
    142e:	00 00       	nop
		SPI_Write(0XD0);
		y = SPI_Read() / 120.0 * 240;
		SPI_Write(0);
	}
	_delay_ms(10);
	return (uint16_t) y;
    1430:	c7 01       	movw	r24, r14
    1432:	b6 01       	movw	r22, r12
    1434:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
}
    1438:	cb 01       	movw	r24, r22
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	df 90       	pop	r13
    1440:	cf 90       	pop	r12
    1442:	08 95       	ret

00001444 <_Z9printTimev>:
uint8_t challengeEndFlag = 0;             // ako smo u izazovnoj igri, provjerava kako je zavrsila: 0 - jos traje, 1 - pobjeda, 2 - ostali smo bez poteza, 3 - isteklo vrijeme
bool gameBeaten = 0;                      // jesmo li pobijedili igru u izazovnom nacinu


// ispisi vrijeme na ekran za vrijeme igre, u opustenom naciju se ispisuje proteklo vrijeme a u izazovnom preostalo
void printTime() {
    1444:	af 92       	push	r10
    1446:	bf 92       	push	r11
    1448:	cf 92       	push	r12
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
	//ovaj dio sluzi za brisanje prijasnjeg ispisa
	display.setColor(0, 0, 0);
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	83 e8       	ldi	r24, 0x83	; 131
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN4UTFT8setColorEhhh>
	display.fillRect(0,159,45,200);
    1464:	08 ec       	ldi	r16, 0xC8	; 200
    1466:	10 e0       	ldi	r17, 0x00	; 0
    1468:	2d e2       	ldi	r18, 0x2D	; 45
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4f e9       	ldi	r20, 0x9F	; 159
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	83 e8       	ldi	r24, 0x83	; 131
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
	display.setColor(255, 255, 255);
    147c:	2f ef       	ldi	r18, 0xFF	; 255
    147e:	4f ef       	ldi	r20, 0xFF	; 255
    1480:	6f ef       	ldi	r22, 0xFF	; 255
    1482:	83 e8       	ldi	r24, 0x83	; 131
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN4UTFT8setColorEhhh>
	
	if (challengeMode) {
    148a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <challengeMode>
    148e:	88 23       	and	r24, r24
    1490:	09 f4       	brne	.+2      	; 0x1494 <_Z9printTimev+0x50>
    1492:	52 c0       	rjmp	.+164    	; 0x1538 <_Z9printTimev+0xf4>
		display.printNumI((challengeTime - currentTime[1]) / 60, 0, 160);
    1494:	0f 2e       	mov	r0, r31
    1496:	fb e5       	ldi	r31, 0x5B	; 91
    1498:	af 2e       	mov	r10, r31
    149a:	f1 e0       	ldi	r31, 0x01	; 1
    149c:	bf 2e       	mov	r11, r31
    149e:	f0 2d       	mov	r31, r0
    14a0:	f5 01       	movw	r30, r10
    14a2:	21 81       	ldd	r18, Z+1	; 0x01
    14a4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <challengeTime>
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	82 1b       	sub	r24, r18
    14ac:	91 09       	sbc	r25, r1
    14ae:	cc e3       	ldi	r28, 0x3C	; 60
    14b0:	d0 e0       	ldi	r29, 0x00	; 0
    14b2:	be 01       	movw	r22, r28
    14b4:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__divmodhi4>
    14b8:	ab 01       	movw	r20, r22
    14ba:	77 0f       	add	r23, r23
    14bc:	66 0b       	sbc	r22, r22
    14be:	77 0b       	sbc	r23, r23
    14c0:	68 94       	set
    14c2:	cc 24       	eor	r12, r12
    14c4:	c5 f8       	bld	r12, 5
    14c6:	e1 2c       	mov	r14, r1
    14c8:	f1 2c       	mov	r15, r1
    14ca:	00 ea       	ldi	r16, 0xA0	; 160
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	83 e8       	ldi	r24, 0x83	; 131
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		display.print("m", 30, 160);
    14da:	00 e0       	ldi	r16, 0x00	; 0
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	20 ea       	ldi	r18, 0xA0	; 160
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4e e1       	ldi	r20, 0x1E	; 30
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	6a e6       	ldi	r22, 0x6A	; 106
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	83 e8       	ldi	r24, 0x83	; 131
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
		display.printNumI((challengeTime - currentTime[1]) % 60, 0, 180);
    14f2:	f5 01       	movw	r30, r10
    14f4:	21 81       	ldd	r18, Z+1	; 0x01
    14f6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <challengeTime>
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	82 1b       	sub	r24, r18
    14fe:	91 09       	sbc	r25, r1
    1500:	be 01       	movw	r22, r28
    1502:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__divmodhi4>
    1506:	ac 01       	movw	r20, r24
    1508:	99 0f       	add	r25, r25
    150a:	66 0b       	sbc	r22, r22
    150c:	77 0b       	sbc	r23, r23
    150e:	04 eb       	ldi	r16, 0xB4	; 180
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	83 e8       	ldi	r24, 0x83	; 131
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		display.print("s", 30, 180);
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	24 eb       	ldi	r18, 0xB4	; 180
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4e e1       	ldi	r20, 0x1E	; 30
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	62 e7       	ldi	r22, 0x72	; 114
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	83 e8       	ldi	r24, 0x83	; 131
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
    1536:	37 c0       	rjmp	.+110    	; 0x15a6 <_Z9printTimev+0x162>
	} else {
		display.printNumI(currentTime[0], 0, 160);
    1538:	cb e5       	ldi	r28, 0x5B	; 91
    153a:	d1 e0       	ldi	r29, 0x01	; 1
    153c:	48 81       	ld	r20, Y
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	68 94       	set
    1546:	cc 24       	eor	r12, r12
    1548:	c5 f8       	bld	r12, 5
    154a:	e1 2c       	mov	r14, r1
    154c:	f1 2c       	mov	r15, r1
    154e:	00 ea       	ldi	r16, 0xA0	; 160
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	83 e8       	ldi	r24, 0x83	; 131
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		display.print("m", 30, 160);
    155e:	00 e0       	ldi	r16, 0x00	; 0
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	20 ea       	ldi	r18, 0xA0	; 160
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4e e1       	ldi	r20, 0x1E	; 30
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	6a e6       	ldi	r22, 0x6A	; 106
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	83 e8       	ldi	r24, 0x83	; 131
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
		display.printNumI(currentTime[1], 0, 180);
    1576:	49 81       	ldd	r20, Y+1	; 0x01
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	04 eb       	ldi	r16, 0xB4	; 180
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	83 e8       	ldi	r24, 0x83	; 131
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		display.print("s", 30, 180);
    158e:	00 e0       	ldi	r16, 0x00	; 0
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	24 eb       	ldi	r18, 0xB4	; 180
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4e e1       	ldi	r20, 0x1E	; 30
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	62 e7       	ldi	r22, 0x72	; 114
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	83 e8       	ldi	r24, 0x83	; 131
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	}
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	08 95       	ret

000015ba <__vector_19>:

// broji stotinke, sekunde i minute provedene u igri, aktivira zastavicu za isteklo vrijeme
ISR(TIMER0_COMP_vect) {
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
	 //osigurava da se ne broji dok ne igramo i ako je isteklo vrijeme
	if (started && challengeEndFlag != 3) {                                     
    15dc:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <started>
    15e0:	88 23       	and	r24, r24
    15e2:	a9 f1       	breq	.+106    	; 0x164e <__vector_19+0x94>
    15e4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <challengeEndFlag>
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	89 f1       	breq	.+98     	; 0x164e <__vector_19+0x94>
		currentTime[2]++;
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f1 e0       	ldi	r31, 0x01	; 1
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	82 83       	std	Z+2, r24	; 0x02

		if (currentTime[2] == 100) {
    15f6:	84 36       	cpi	r24, 0x64	; 100
    15f8:	91 f4       	brne	.+36     	; 0x161e <__vector_19+0x64>
			currentTime[2] = 0;
    15fa:	12 82       	std	Z+2, r1	; 0x02

			currentTime[1]++; 
    15fc:	81 81       	ldd	r24, Z+1	; 0x01
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	81 83       	std	Z+1, r24	; 0x01
			
			if (currentTime[1] == 60) {
    1602:	8c 33       	cpi	r24, 0x3C	; 60
    1604:	21 f4       	brne	.+8      	; 0x160e <__vector_19+0x54>
				currentTime[1] = 0;
    1606:	11 82       	std	Z+1, r1	; 0x01
				currentTime[0]++;
    1608:	80 81       	ld	r24, Z
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 83       	st	Z, r24
			}
			if (currentTime[0] == 60) {
    160e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <currentTime>
    1612:	8c 33       	cpi	r24, 0x3C	; 60
    1614:	11 f4       	brne	.+4      	; 0x161a <__vector_19+0x60>
				currentTime[0] = 0;
    1616:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <currentTime>
			}
			printTime();
    161a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z9printTimev>
		}
		
		if (challengeMode) {
    161e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <challengeMode>
    1622:	88 23       	and	r24, r24
    1624:	a1 f0       	breq	.+40     	; 0x164e <__vector_19+0x94>
			if ((challengeTime - (currentTime[0] * 60) - currentTime[1]) <= 0) {
    1626:	eb e5       	ldi	r30, 0x5B	; 91
    1628:	f1 e0       	ldi	r31, 0x01	; 1
    162a:	20 81       	ld	r18, Z
    162c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <challengeTime>
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	3c e3       	ldi	r19, 0x3C	; 60
    1634:	23 9f       	mul	r18, r19
    1636:	80 19       	sub	r24, r0
    1638:	91 09       	sbc	r25, r1
    163a:	11 24       	eor	r1, r1
    163c:	21 81       	ldd	r18, Z+1	; 0x01
    163e:	82 1b       	sub	r24, r18
    1640:	91 09       	sbc	r25, r1
    1642:	18 16       	cp	r1, r24
    1644:	19 06       	cpc	r1, r25
    1646:	1c f0       	brlt	.+6      	; 0x164e <__vector_19+0x94>
				challengeEndFlag = 3;
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <challengeEndFlag>
			}
		}
	}
}
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <_Z9fillBoardv>:

// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
    1670:	cf 93       	push	r28
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
    1672:	c0 e0       	ldi	r28, 0x00	; 0
    1674:	c0 31       	cpi	r28, 0x10	; 16
    1676:	08 f5       	brcc	.+66     	; 0x16ba <_Z9fillBoardv+0x4a>
		index = rand() % 16;
    1678:	0e 94 55 1e 	call	0x3caa	; 0x3caa <rand>
    167c:	8f 70       	andi	r24, 0x0F	; 15
    167e:	90 78       	andi	r25, 0x80	; 128
    1680:	99 23       	and	r25, r25
    1682:	34 f4       	brge	.+12     	; 0x1690 <_Z9fillBoardv+0x20>
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	80 6f       	ori	r24, 0xF0	; 240
    1688:	9f 6f       	ori	r25, 0xFF	; 255
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <_Z9fillBoardv+0x20>
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
			index++;
			if (index > 15) {
				index = 0;
    168e:	80 e0       	ldi	r24, 0x00	; 0
// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
		index = rand() % 16;
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	f9 01       	movw	r30, r18
    1696:	ed 58       	subi	r30, 0x8D	; 141
    1698:	fe 4f       	sbci	r31, 0xFE	; 254
    169a:	90 81       	ld	r25, Z
    169c:	99 23       	and	r25, r25
    169e:	21 f0       	breq	.+8      	; 0x16a8 <_Z9fillBoardv+0x38>
			index++;
    16a0:	8f 5f       	subi	r24, 0xFF	; 255
			if (index > 15) {
    16a2:	80 31       	cpi	r24, 0x10	; 16
    16a4:	a8 f3       	brcs	.-22     	; 0x1690 <_Z9fillBoardv+0x20>
    16a6:	f3 cf       	rjmp	.-26     	; 0x168e <_Z9fillBoardv+0x1e>
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
    16a8:	f9 01       	movw	r30, r18
    16aa:	ed 58       	subi	r30, 0x8D	; 141
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	8c 2f       	mov	r24, r28
    16b0:	87 70       	andi	r24, 0x07	; 7
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	80 83       	st	Z, r24
}

// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
    16b6:	cf 5f       	subi	r28, 0xFF	; 255
    16b8:	dd cf       	rjmp	.-70     	; 0x1674 <_Z9fillBoardv+0x4>
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
	}
}
    16ba:	cf 91       	pop	r28
    16bc:	08 95       	ret

000016be <_Z14memoryGetInputv>:

// vraca indeks + 1 karte na koju smo kliknuli, 0 je za kad kliknemo izvan ploce
uint8_t memoryGetInput() {
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
	while(!Touched());
    16c2:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z7Touchedv>
    16c6:	88 23       	and	r24, r24
    16c8:	e1 f3       	breq	.-8      	; 0x16c2 <_Z14memoryGetInputv+0x4>
	uint16_t x = getX();
    16ca:	0e 94 af 09 	call	0x135e	; 0x135e <_Z4getXv>
    16ce:	ec 01       	movw	r28, r24
	uint16_t y = getY();
    16d0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_Z4getYv>
	
	if ((x > BACK_X1) && (x < BACK_X2) && (y > BACK_Y1) && (y < BACK_Y2)) return 20;
    16d4:	9e 01       	movw	r18, r28
    16d6:	21 50       	subi	r18, 0x01	; 1
    16d8:	31 09       	sbc	r19, r1
    16da:	27 32       	cpi	r18, 0x27	; 39
    16dc:	31 05       	cpc	r19, r1
    16de:	30 f4       	brcc	.+12     	; 0x16ec <_Z14memoryGetInputv+0x2e>
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	21 f0       	breq	.+8      	; 0x16ec <_Z14memoryGetInputv+0x2e>
    16e4:	88 32       	cpi	r24, 0x28	; 40
    16e6:	91 05       	cpc	r25, r1
    16e8:	08 f4       	brcc	.+2      	; 0x16ec <_Z14memoryGetInputv+0x2e>
    16ea:	a3 c0       	rjmp	.+326    	; 0x1832 <_Z14memoryGetInputv+0x174>
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_1) && (y < Y2_1)) return 1;
    16ec:	9e 01       	movw	r18, r28
    16ee:	20 55       	subi	r18, 0x50	; 80
    16f0:	31 09       	sbc	r19, r1
    16f2:	27 33       	cpi	r18, 0x37	; 55
    16f4:	31 05       	cpc	r19, r1
    16f6:	30 f4       	brcc	.+12     	; 0x1704 <_Z14memoryGetInputv+0x46>
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	21 f0       	breq	.+8      	; 0x1704 <_Z14memoryGetInputv+0x46>
    16fc:	88 33       	cpi	r24, 0x38	; 56
    16fe:	91 05       	cpc	r25, r1
    1700:	08 f4       	brcc	.+2      	; 0x1704 <_Z14memoryGetInputv+0x46>
    1702:	99 c0       	rjmp	.+306    	; 0x1836 <_Z14memoryGetInputv+0x178>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_1) && (y < Y2_1)) return 2;
    1704:	ae 01       	movw	r20, r28
    1706:	4d 58       	subi	r20, 0x8D	; 141
    1708:	51 09       	sbc	r21, r1
    170a:	47 33       	cpi	r20, 0x37	; 55
    170c:	51 05       	cpc	r21, r1
    170e:	30 f4       	brcc	.+12     	; 0x171c <_Z14memoryGetInputv+0x5e>
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	21 f0       	breq	.+8      	; 0x171c <_Z14memoryGetInputv+0x5e>
    1714:	88 33       	cpi	r24, 0x38	; 56
    1716:	91 05       	cpc	r25, r1
    1718:	08 f4       	brcc	.+2      	; 0x171c <_Z14memoryGetInputv+0x5e>
    171a:	8f c0       	rjmp	.+286    	; 0x183a <_Z14memoryGetInputv+0x17c>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_1) && (y < Y2_1)) return 3;
    171c:	be 01       	movw	r22, r28
    171e:	6a 5c       	subi	r22, 0xCA	; 202
    1720:	71 09       	sbc	r23, r1
    1722:	67 33       	cpi	r22, 0x37	; 55
    1724:	71 05       	cpc	r23, r1
    1726:	30 f4       	brcc	.+12     	; 0x1734 <_Z14memoryGetInputv+0x76>
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	21 f0       	breq	.+8      	; 0x1734 <_Z14memoryGetInputv+0x76>
    172c:	88 33       	cpi	r24, 0x38	; 56
    172e:	91 05       	cpc	r25, r1
    1730:	08 f4       	brcc	.+2      	; 0x1734 <_Z14memoryGetInputv+0x76>
    1732:	85 c0       	rjmp	.+266    	; 0x183e <_Z14memoryGetInputv+0x180>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_1) && (y < Y2_1)) return 4;
    1734:	c7 50       	subi	r28, 0x07	; 7
    1736:	d1 40       	sbci	r29, 0x01	; 1
    1738:	c7 33       	cpi	r28, 0x37	; 55
    173a:	d1 05       	cpc	r29, r1
    173c:	30 f4       	brcc	.+12     	; 0x174a <_Z14memoryGetInputv+0x8c>
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	21 f0       	breq	.+8      	; 0x174a <_Z14memoryGetInputv+0x8c>
    1742:	88 33       	cpi	r24, 0x38	; 56
    1744:	91 05       	cpc	r25, r1
    1746:	08 f4       	brcc	.+2      	; 0x174a <_Z14memoryGetInputv+0x8c>
    1748:	7c c0       	rjmp	.+248    	; 0x1842 <_Z14memoryGetInputv+0x184>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_2) && (y < Y2_2)) return 5;
    174a:	27 33       	cpi	r18, 0x37	; 55
    174c:	31 05       	cpc	r19, r1
    174e:	38 f4       	brcc	.+14     	; 0x175e <_Z14memoryGetInputv+0xa0>
    1750:	8e 33       	cpi	r24, 0x3E	; 62
    1752:	91 05       	cpc	r25, r1
    1754:	20 f0       	brcs	.+8      	; 0x175e <_Z14memoryGetInputv+0xa0>
    1756:	85 37       	cpi	r24, 0x75	; 117
    1758:	91 05       	cpc	r25, r1
    175a:	08 f4       	brcc	.+2      	; 0x175e <_Z14memoryGetInputv+0xa0>
    175c:	74 c0       	rjmp	.+232    	; 0x1846 <_Z14memoryGetInputv+0x188>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_2) && (y < Y2_2)) return 6;
    175e:	47 33       	cpi	r20, 0x37	; 55
    1760:	51 05       	cpc	r21, r1
    1762:	38 f4       	brcc	.+14     	; 0x1772 <_Z14memoryGetInputv+0xb4>
    1764:	8e 33       	cpi	r24, 0x3E	; 62
    1766:	91 05       	cpc	r25, r1
    1768:	20 f0       	brcs	.+8      	; 0x1772 <_Z14memoryGetInputv+0xb4>
    176a:	85 37       	cpi	r24, 0x75	; 117
    176c:	91 05       	cpc	r25, r1
    176e:	08 f4       	brcc	.+2      	; 0x1772 <_Z14memoryGetInputv+0xb4>
    1770:	6c c0       	rjmp	.+216    	; 0x184a <_Z14memoryGetInputv+0x18c>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_2) && (y < Y2_2)) return 7;
    1772:	67 33       	cpi	r22, 0x37	; 55
    1774:	71 05       	cpc	r23, r1
    1776:	38 f4       	brcc	.+14     	; 0x1786 <_Z14memoryGetInputv+0xc8>
    1778:	8e 33       	cpi	r24, 0x3E	; 62
    177a:	91 05       	cpc	r25, r1
    177c:	20 f0       	brcs	.+8      	; 0x1786 <_Z14memoryGetInputv+0xc8>
    177e:	85 37       	cpi	r24, 0x75	; 117
    1780:	91 05       	cpc	r25, r1
    1782:	08 f4       	brcc	.+2      	; 0x1786 <_Z14memoryGetInputv+0xc8>
    1784:	64 c0       	rjmp	.+200    	; 0x184e <_Z14memoryGetInputv+0x190>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_2) && (y < Y2_2)) return 8;
    1786:	c7 33       	cpi	r28, 0x37	; 55
    1788:	d1 05       	cpc	r29, r1
    178a:	38 f4       	brcc	.+14     	; 0x179a <_Z14memoryGetInputv+0xdc>
    178c:	8e 33       	cpi	r24, 0x3E	; 62
    178e:	91 05       	cpc	r25, r1
    1790:	20 f0       	brcs	.+8      	; 0x179a <_Z14memoryGetInputv+0xdc>
    1792:	85 37       	cpi	r24, 0x75	; 117
    1794:	91 05       	cpc	r25, r1
    1796:	08 f4       	brcc	.+2      	; 0x179a <_Z14memoryGetInputv+0xdc>
    1798:	5c c0       	rjmp	.+184    	; 0x1852 <_Z14memoryGetInputv+0x194>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_3) && (y < Y2_3)) return 9;
    179a:	27 33       	cpi	r18, 0x37	; 55
    179c:	31 05       	cpc	r19, r1
    179e:	38 f4       	brcc	.+14     	; 0x17ae <_Z14memoryGetInputv+0xf0>
    17a0:	8b 37       	cpi	r24, 0x7B	; 123
    17a2:	91 05       	cpc	r25, r1
    17a4:	20 f0       	brcs	.+8      	; 0x17ae <_Z14memoryGetInputv+0xf0>
    17a6:	82 3b       	cpi	r24, 0xB2	; 178
    17a8:	91 05       	cpc	r25, r1
    17aa:	08 f4       	brcc	.+2      	; 0x17ae <_Z14memoryGetInputv+0xf0>
    17ac:	54 c0       	rjmp	.+168    	; 0x1856 <_Z14memoryGetInputv+0x198>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_3) && (y < Y2_3)) return 10;
    17ae:	47 33       	cpi	r20, 0x37	; 55
    17b0:	51 05       	cpc	r21, r1
    17b2:	38 f4       	brcc	.+14     	; 0x17c2 <_Z14memoryGetInputv+0x104>
    17b4:	8b 37       	cpi	r24, 0x7B	; 123
    17b6:	91 05       	cpc	r25, r1
    17b8:	20 f0       	brcs	.+8      	; 0x17c2 <_Z14memoryGetInputv+0x104>
    17ba:	82 3b       	cpi	r24, 0xB2	; 178
    17bc:	91 05       	cpc	r25, r1
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <_Z14memoryGetInputv+0x104>
    17c0:	4c c0       	rjmp	.+152    	; 0x185a <_Z14memoryGetInputv+0x19c>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_3) && (y < Y2_3)) return 11;
    17c2:	67 33       	cpi	r22, 0x37	; 55
    17c4:	71 05       	cpc	r23, r1
    17c6:	38 f4       	brcc	.+14     	; 0x17d6 <_Z14memoryGetInputv+0x118>
    17c8:	8b 37       	cpi	r24, 0x7B	; 123
    17ca:	91 05       	cpc	r25, r1
    17cc:	20 f0       	brcs	.+8      	; 0x17d6 <_Z14memoryGetInputv+0x118>
    17ce:	82 3b       	cpi	r24, 0xB2	; 178
    17d0:	91 05       	cpc	r25, r1
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <_Z14memoryGetInputv+0x118>
    17d4:	44 c0       	rjmp	.+136    	; 0x185e <_Z14memoryGetInputv+0x1a0>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
    17d6:	c7 33       	cpi	r28, 0x37	; 55
    17d8:	d1 05       	cpc	r29, r1
    17da:	30 f4       	brcc	.+12     	; 0x17e8 <_Z14memoryGetInputv+0x12a>
    17dc:	8b 37       	cpi	r24, 0x7B	; 123
    17de:	91 05       	cpc	r25, r1
    17e0:	18 f0       	brcs	.+6      	; 0x17e8 <_Z14memoryGetInputv+0x12a>
    17e2:	82 3b       	cpi	r24, 0xB2	; 178
    17e4:	91 05       	cpc	r25, r1
    17e6:	e8 f1       	brcs	.+122    	; 0x1862 <_Z14memoryGetInputv+0x1a4>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
    17e8:	27 33       	cpi	r18, 0x37	; 55
    17ea:	31 05       	cpc	r19, r1
    17ec:	30 f4       	brcc	.+12     	; 0x17fa <_Z14memoryGetInputv+0x13c>
    17ee:	88 3b       	cpi	r24, 0xB8	; 184
    17f0:	91 05       	cpc	r25, r1
    17f2:	18 f0       	brcs	.+6      	; 0x17fa <_Z14memoryGetInputv+0x13c>
    17f4:	8f 3e       	cpi	r24, 0xEF	; 239
    17f6:	91 05       	cpc	r25, r1
    17f8:	b0 f1       	brcs	.+108    	; 0x1866 <_Z14memoryGetInputv+0x1a8>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
    17fa:	47 33       	cpi	r20, 0x37	; 55
    17fc:	51 05       	cpc	r21, r1
    17fe:	30 f4       	brcc	.+12     	; 0x180c <_Z14memoryGetInputv+0x14e>
    1800:	88 3b       	cpi	r24, 0xB8	; 184
    1802:	91 05       	cpc	r25, r1
    1804:	18 f0       	brcs	.+6      	; 0x180c <_Z14memoryGetInputv+0x14e>
    1806:	8f 3e       	cpi	r24, 0xEF	; 239
    1808:	91 05       	cpc	r25, r1
    180a:	78 f1       	brcs	.+94     	; 0x186a <_Z14memoryGetInputv+0x1ac>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
    180c:	67 33       	cpi	r22, 0x37	; 55
    180e:	71 05       	cpc	r23, r1
    1810:	30 f4       	brcc	.+12     	; 0x181e <_Z14memoryGetInputv+0x160>
    1812:	88 3b       	cpi	r24, 0xB8	; 184
    1814:	91 05       	cpc	r25, r1
    1816:	18 f0       	brcs	.+6      	; 0x181e <_Z14memoryGetInputv+0x160>
    1818:	8f 3e       	cpi	r24, 0xEF	; 239
    181a:	91 05       	cpc	r25, r1
    181c:	40 f1       	brcs	.+80     	; 0x186e <_Z14memoryGetInputv+0x1b0>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
    181e:	e7 97       	sbiw	r28, 0x37	; 55
    1820:	40 f5       	brcc	.+80     	; 0x1872 <_Z14memoryGetInputv+0x1b4>
    1822:	88 3b       	cpi	r24, 0xB8	; 184
    1824:	91 05       	cpc	r25, r1
    1826:	38 f1       	brcs	.+78     	; 0x1876 <_Z14memoryGetInputv+0x1b8>
    1828:	8f 3e       	cpi	r24, 0xEF	; 239
    182a:	91 05       	cpc	r25, r1
    182c:	30 f1       	brcs	.+76     	; 0x187a <_Z14memoryGetInputv+0x1bc>
	
	else return 0;
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	25 c0       	rjmp	.+74     	; 0x187c <_Z14memoryGetInputv+0x1be>
uint8_t memoryGetInput() {
	while(!Touched());
	uint16_t x = getX();
	uint16_t y = getY();
	
	if ((x > BACK_X1) && (x < BACK_X2) && (y > BACK_Y1) && (y < BACK_Y2)) return 20;
    1832:	84 e1       	ldi	r24, 0x14	; 20
    1834:	23 c0       	rjmp	.+70     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_1) && (y < Y2_1)) return 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	21 c0       	rjmp	.+66     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_1) && (y < Y2_1)) return 2;
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	1f c0       	rjmp	.+62     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_1) && (y < Y2_1)) return 3;
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	1d c0       	rjmp	.+58     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_1) && (y < Y2_1)) return 4;
    1842:	84 e0       	ldi	r24, 0x04	; 4
    1844:	1b c0       	rjmp	.+54     	; 0x187c <_Z14memoryGetInputv+0x1be>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_2) && (y < Y2_2)) return 5;
    1846:	85 e0       	ldi	r24, 0x05	; 5
    1848:	19 c0       	rjmp	.+50     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_2) && (y < Y2_2)) return 6;
    184a:	86 e0       	ldi	r24, 0x06	; 6
    184c:	17 c0       	rjmp	.+46     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_2) && (y < Y2_2)) return 7;
    184e:	87 e0       	ldi	r24, 0x07	; 7
    1850:	15 c0       	rjmp	.+42     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_2) && (y < Y2_2)) return 8;
    1852:	88 e0       	ldi	r24, 0x08	; 8
    1854:	13 c0       	rjmp	.+38     	; 0x187c <_Z14memoryGetInputv+0x1be>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_3) && (y < Y2_3)) return 9;
    1856:	89 e0       	ldi	r24, 0x09	; 9
    1858:	11 c0       	rjmp	.+34     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_3) && (y < Y2_3)) return 10;
    185a:	8a e0       	ldi	r24, 0x0A	; 10
    185c:	0f c0       	rjmp	.+30     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_3) && (y < Y2_3)) return 11;
    185e:	8b e0       	ldi	r24, 0x0B	; 11
    1860:	0d c0       	rjmp	.+26     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
    1862:	8c e0       	ldi	r24, 0x0C	; 12
    1864:	0b c0       	rjmp	.+22     	; 0x187c <_Z14memoryGetInputv+0x1be>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
    1866:	8d e0       	ldi	r24, 0x0D	; 13
    1868:	09 c0       	rjmp	.+18     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
    186a:	8e e0       	ldi	r24, 0x0E	; 14
    186c:	07 c0       	rjmp	.+14     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
    186e:	8f e0       	ldi	r24, 0x0F	; 15
    1870:	05 c0       	rjmp	.+10     	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
	
	else return 0;
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	03 c0       	rjmp	.+6      	; 0x187c <_Z14memoryGetInputv+0x1be>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	01 c0       	rjmp	.+2      	; 0x187c <_Z14memoryGetInputv+0x1be>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
    187a:	80 e1       	ldi	r24, 0x10	; 16
	
	else return 0;
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <_Z9closeCardh>:

// "pokriva" kartu crtanjem kvadrata preko simbola
void closeCard(uint8_t index) {
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
	switch(index) {
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	31 97       	sbiw	r30, 0x01	; 1
    188c:	e0 31       	cpi	r30, 0x10	; 16
    188e:	f1 05       	cpc	r31, r1
    1890:	08 f0       	brcs	.+2      	; 0x1894 <_Z9closeCardh+0x12>
    1892:	d3 c0       	rjmp	.+422    	; 0x1a3a <_Z9closeCardh+0x1b8>
    1894:	e6 5d       	subi	r30, 0xD6	; 214
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <__tablejump2__>
		case 1:
			display.fillRect(X1_1 + 2, Y1_1 + 1, X2_1 - 1, Y2_1 - 1);
    189c:	07 e3       	ldi	r16, 0x37	; 55
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	26 e8       	ldi	r18, 0x86	; 134
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	61 e5       	ldi	r22, 0x51	; 81
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	83 e8       	ldi	r24, 0x83	; 131
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    18b4:	c2 c0       	rjmp	.+388    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 2:
			display.fillRect(X1_2 + 2, Y1_1 + 1, X2_2 - 1, Y2_1 - 1);
    18b6:	07 e3       	ldi	r16, 0x37	; 55
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	23 ec       	ldi	r18, 0xC3	; 195
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	6e e8       	ldi	r22, 0x8E	; 142
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	83 e8       	ldi	r24, 0x83	; 131
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    18ce:	b5 c0       	rjmp	.+362    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 3:
			display.fillRect(X1_3 + 2, Y1_1 + 1, X2_3 - 1, Y2_1 - 1);
    18d0:	07 e3       	ldi	r16, 0x37	; 55
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	31 e0       	ldi	r19, 0x01	; 1
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	6b ec       	ldi	r22, 0xCB	; 203
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	83 e8       	ldi	r24, 0x83	; 131
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    18e8:	a8 c0       	rjmp	.+336    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 4:
			display.fillRect(X1_4 + 2, Y1_1 + 1, X2_4 - 1, Y2_1 - 1);
    18ea:	07 e3       	ldi	r16, 0x37	; 55
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	2d e3       	ldi	r18, 0x3D	; 61
    18f0:	31 e0       	ldi	r19, 0x01	; 1
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	68 e0       	ldi	r22, 0x08	; 8
    18f8:	71 e0       	ldi	r23, 0x01	; 1
    18fa:	83 e8       	ldi	r24, 0x83	; 131
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    1902:	9b c0       	rjmp	.+310    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 5:
			display.fillRect(X1_1 + 2, Y1_2 + 1, X2_1 - 1, Y2_2 - 1);
    1904:	04 e7       	ldi	r16, 0x74	; 116
    1906:	10 e0       	ldi	r17, 0x00	; 0
    1908:	26 e8       	ldi	r18, 0x86	; 134
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4e e3       	ldi	r20, 0x3E	; 62
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	61 e5       	ldi	r22, 0x51	; 81
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	83 e8       	ldi	r24, 0x83	; 131
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    191c:	8e c0       	rjmp	.+284    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 6:
			display.fillRect(X1_2 + 2, Y1_2 + 1, X2_2 - 1, Y2_2 - 1);
    191e:	04 e7       	ldi	r16, 0x74	; 116
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	23 ec       	ldi	r18, 0xC3	; 195
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4e e3       	ldi	r20, 0x3E	; 62
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	6e e8       	ldi	r22, 0x8E	; 142
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	83 e8       	ldi	r24, 0x83	; 131
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    1936:	81 c0       	rjmp	.+258    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 7:
			display.fillRect(X1_3 + 2, Y1_2 + 1, X2_3 - 1, Y2_2 - 1);
    1938:	04 e7       	ldi	r16, 0x74	; 116
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	31 e0       	ldi	r19, 0x01	; 1
    1940:	4e e3       	ldi	r20, 0x3E	; 62
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	6b ec       	ldi	r22, 0xCB	; 203
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	83 e8       	ldi	r24, 0x83	; 131
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    1950:	74 c0       	rjmp	.+232    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 8:
			display.fillRect(X1_4 + 2, Y1_2 + 1, X2_4 - 1, Y2_2 - 1);
    1952:	04 e7       	ldi	r16, 0x74	; 116
    1954:	10 e0       	ldi	r17, 0x00	; 0
    1956:	2d e3       	ldi	r18, 0x3D	; 61
    1958:	31 e0       	ldi	r19, 0x01	; 1
    195a:	4e e3       	ldi	r20, 0x3E	; 62
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	68 e0       	ldi	r22, 0x08	; 8
    1960:	71 e0       	ldi	r23, 0x01	; 1
    1962:	83 e8       	ldi	r24, 0x83	; 131
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;	
    196a:	67 c0       	rjmp	.+206    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 9:
			display.fillRect(X1_1 + 2, Y1_3 + 1, X2_1 - 1, Y2_3 - 1);
    196c:	01 eb       	ldi	r16, 0xB1	; 177
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	26 e8       	ldi	r18, 0x86	; 134
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4b e7       	ldi	r20, 0x7B	; 123
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	61 e5       	ldi	r22, 0x51	; 81
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	83 e8       	ldi	r24, 0x83	; 131
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    1984:	5a c0       	rjmp	.+180    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 10:
			display.fillRect(X1_2 + 2, Y1_3 + 1, X2_2 - 1, Y2_3 - 1);
    1986:	01 eb       	ldi	r16, 0xB1	; 177
    1988:	10 e0       	ldi	r17, 0x00	; 0
    198a:	23 ec       	ldi	r18, 0xC3	; 195
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4b e7       	ldi	r20, 0x7B	; 123
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	6e e8       	ldi	r22, 0x8E	; 142
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	83 e8       	ldi	r24, 0x83	; 131
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    199e:	4d c0       	rjmp	.+154    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 11:
			display.fillRect(X1_3 + 2, Y1_3 + 1, X2_3 - 1, Y2_3 - 1);
    19a0:	01 eb       	ldi	r16, 0xB1	; 177
    19a2:	10 e0       	ldi	r17, 0x00	; 0
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	31 e0       	ldi	r19, 0x01	; 1
    19a8:	4b e7       	ldi	r20, 0x7B	; 123
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	6b ec       	ldi	r22, 0xCB	; 203
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	83 e8       	ldi	r24, 0x83	; 131
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    19b8:	40 c0       	rjmp	.+128    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 12:
			display.fillRect(X1_4 + 2, Y1_3 + 1, X2_4 - 1, Y2_3 - 1);
    19ba:	01 eb       	ldi	r16, 0xB1	; 177
    19bc:	10 e0       	ldi	r17, 0x00	; 0
    19be:	2d e3       	ldi	r18, 0x3D	; 61
    19c0:	31 e0       	ldi	r19, 0x01	; 1
    19c2:	4b e7       	ldi	r20, 0x7B	; 123
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	68 e0       	ldi	r22, 0x08	; 8
    19c8:	71 e0       	ldi	r23, 0x01	; 1
    19ca:	83 e8       	ldi	r24, 0x83	; 131
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    19d2:	33 c0       	rjmp	.+102    	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 13:
			display.fillRect(X1_1 + 2, Y1_4 + 1, X2_1 - 1, Y2_4 - 1);
    19d4:	0e ee       	ldi	r16, 0xEE	; 238
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	26 e8       	ldi	r18, 0x86	; 134
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	48 eb       	ldi	r20, 0xB8	; 184
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	61 e5       	ldi	r22, 0x51	; 81
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	83 e8       	ldi	r24, 0x83	; 131
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    19ec:	26 c0       	rjmp	.+76     	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 14:
			display.fillRect(X1_2 + 2, Y1_4 + 1, X2_2 - 1, Y2_4 - 1);
    19ee:	0e ee       	ldi	r16, 0xEE	; 238
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	23 ec       	ldi	r18, 0xC3	; 195
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	48 eb       	ldi	r20, 0xB8	; 184
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	6e e8       	ldi	r22, 0x8E	; 142
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	83 e8       	ldi	r24, 0x83	; 131
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    1a06:	19 c0       	rjmp	.+50     	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 15:
			display.fillRect(X1_3 + 2, Y1_4 + 1, X2_3 - 1, Y2_4 - 1);
    1a08:	0e ee       	ldi	r16, 0xEE	; 238
    1a0a:	10 e0       	ldi	r17, 0x00	; 0
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	31 e0       	ldi	r19, 0x01	; 1
    1a10:	48 eb       	ldi	r20, 0xB8	; 184
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	6b ec       	ldi	r22, 0xCB	; 203
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	83 e8       	ldi	r24, 0x83	; 131
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
    1a20:	0c c0       	rjmp	.+24     	; 0x1a3a <_Z9closeCardh+0x1b8>
		case 16:
			display.fillRect(X1_4 + 2, Y1_4 + 1, X2_4 - 1, Y2_4 - 1);
    1a22:	0e ee       	ldi	r16, 0xEE	; 238
    1a24:	10 e0       	ldi	r17, 0x00	; 0
    1a26:	2d e3       	ldi	r18, 0x3D	; 61
    1a28:	31 e0       	ldi	r19, 0x01	; 1
    1a2a:	48 eb       	ldi	r20, 0xB8	; 184
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	68 e0       	ldi	r22, 0x08	; 8
    1a30:	71 e0       	ldi	r23, 0x01	; 1
    1a32:	83 e8       	ldi	r24, 0x83	; 131
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
			break;
	}
}
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <_Z9checkOpenv>:

// provjera ako je memory karta vec okrenuta
void checkOpen() {
	if (board[c1 - 1] != board[c2 - 1] && control[c1 - 1] == 0 && control[c2 - 1] == 0) {  //ako su karte razlicite i kontrolno polje je 0 za obje
    1a40:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <c1>
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	fc 01       	movw	r30, r24
    1a4a:	ed 58       	subi	r30, 0x8D	; 141
    1a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4e:	50 81       	ld	r21, Z
    1a50:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <c2>
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	21 50       	subi	r18, 0x01	; 1
    1a58:	31 09       	sbc	r19, r1
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	ed 58       	subi	r30, 0x8D	; 141
    1a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a60:	40 81       	ld	r20, Z
    1a62:	54 17       	cp	r21, r20
    1a64:	11 f1       	breq	.+68     	; 0x1aaa <_Z9checkOpenv+0x6a>
    1a66:	fc 01       	movw	r30, r24
    1a68:	ed 59       	subi	r30, 0x9D	; 157
    1a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6c:	40 81       	ld	r20, Z
    1a6e:	41 11       	cpse	r20, r1
    1a70:	1c c0       	rjmp	.+56     	; 0x1aaa <_Z9checkOpenv+0x6a>
    1a72:	f9 01       	movw	r30, r18
    1a74:	ed 59       	subi	r30, 0x9D	; 157
    1a76:	fe 4f       	sbci	r31, 0xFE	; 254
    1a78:	40 81       	ld	r20, Z
    1a7a:	41 11       	cpse	r20, r1
    1a7c:	16 c0       	rjmp	.+44     	; 0x1aaa <_Z9checkOpenv+0x6a>
		display.setColor(0, 0, 0); //postavlja boju u crnu da de obrise broj
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	83 e8       	ldi	r24, 0x83	; 131
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN4UTFT8setColorEhhh>
		closeCard(c1);
    1a8a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <c1>
    1a8e:	0e 94 41 0c 	call	0x1882	; 0x1882 <_Z9closeCardh>
		closeCard(c2);  
    1a92:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <c2>
    1a96:	0e 94 41 0c 	call	0x1882	; 0x1882 <_Z9closeCardh>
		display.setColor(255, 255, 255);  // vraca boju u bijelu da se ostali dijelovi mogu ispisati
    1a9a:	2f ef       	ldi	r18, 0xFF	; 255
    1a9c:	4f ef       	ldi	r20, 0xFF	; 255
    1a9e:	6f ef       	ldi	r22, 0xFF	; 255
    1aa0:	83 e8       	ldi	r24, 0x83	; 131
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN4UTFT8setColorEhhh>
    1aa8:	08 95       	ret
	} else { //ako su isti okrenuti, postavi kontrolno polje u 1 i povecaj broj pogodjenih parova
		control[c1-1] = 1;
    1aaa:	fc 01       	movw	r30, r24
    1aac:	ed 59       	subi	r30, 0x9D	; 157
    1aae:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	40 83       	st	Z, r20
		control[c2-1] = 1;
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	ed 59       	subi	r30, 0x9D	; 157
    1ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aba:	40 83       	st	Z, r20
		matched++;
    1abc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <matched>
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <matched>
    1ac6:	08 95       	ret

00001ac8 <_Z10revealCardh>:
	}
}

// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
    1ac8:	cf 92       	push	r12
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	98 2f       	mov	r25, r24
    1ad4:	93 70       	andi	r25, 0x03	; 3
	uint16_t x = 0, y = 0;
	
	if (input % 4 == 1) {             // prvi stupac
    1ad6:	91 30       	cpi	r25, 0x01	; 1
    1ad8:	49 f0       	breq	.+18     	; 0x1aec <_Z10revealCardh+0x24>
		x = X1_1;
	} else if (input % 4 == 2) {      // drugi stupac
    1ada:	92 30       	cpi	r25, 0x02	; 2
    1adc:	51 f0       	breq	.+20     	; 0x1af2 <_Z10revealCardh+0x2a>
		x = X1_2;
	} else if (input % 4 == 3) {      // treci stupac
    1ade:	93 30       	cpi	r25, 0x03	; 3
    1ae0:	59 f0       	breq	.+22     	; 0x1af8 <_Z10revealCardh+0x30>
		x = X1_3;
	} else if (input % 4 == 0) {      // cetvrti stupac
    1ae2:	99 23       	and	r25, r25
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <_Z10revealCardh+0x36>
	}
}

// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
	uint16_t x = 0, y = 0;
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	0b c0       	rjmp	.+22     	; 0x1b02 <_Z10revealCardh+0x3a>
	
	if (input % 4 == 1) {             // prvi stupac
		x = X1_1;
    1aec:	2f e4       	ldi	r18, 0x4F	; 79
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	08 c0       	rjmp	.+16     	; 0x1b02 <_Z10revealCardh+0x3a>
	} else if (input % 4 == 2) {      // drugi stupac
		x = X1_2;
    1af2:	2c e8       	ldi	r18, 0x8C	; 140
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <_Z10revealCardh+0x3a>
	} else if (input % 4 == 3) {      // treci stupac
		x = X1_3;
    1af8:	29 ec       	ldi	r18, 0xC9	; 201
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <_Z10revealCardh+0x3a>
	} else if (input % 4 == 0) {      // cetvrti stupac
		x = X1_4;
    1afe:	26 e0       	ldi	r18, 0x06	; 6
    1b00:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	if ((input > 0) && (input < 5)) {               // prvi red
    1b02:	9f ef       	ldi	r25, 0xFF	; 255
    1b04:	98 0f       	add	r25, r24
    1b06:	94 30       	cpi	r25, 0x04	; 4
    1b08:	78 f0       	brcs	.+30     	; 0x1b28 <_Z10revealCardh+0x60>
		y = Y1_1;
	} else if ((input > 4) && (input < 9)) {        // drugi stupac
    1b0a:	9b ef       	ldi	r25, 0xFB	; 251
    1b0c:	98 0f       	add	r25, r24
    1b0e:	94 30       	cpi	r25, 0x04	; 4
    1b10:	70 f0       	brcs	.+28     	; 0x1b2e <_Z10revealCardh+0x66>
		y = Y1_2;
	} else if ((input > 8) && (input < 13)) {       // treci stupac
    1b12:	97 ef       	ldi	r25, 0xF7	; 247
    1b14:	98 0f       	add	r25, r24
    1b16:	94 30       	cpi	r25, 0x04	; 4
    1b18:	68 f0       	brcs	.+26     	; 0x1b34 <_Z10revealCardh+0x6c>
		y = Y1_3;
	} else if ((input > 12) && (input < 17)) {      // cetvrti stupac
    1b1a:	93 ef       	ldi	r25, 0xF3	; 243
    1b1c:	98 0f       	add	r25, r24
    1b1e:	94 30       	cpi	r25, 0x04	; 4
    1b20:	60 f0       	brcs	.+24     	; 0x1b3a <_Z10revealCardh+0x72>
	}
}

// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
	uint16_t x = 0, y = 0;
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	0b c0       	rjmp	.+22     	; 0x1b3e <_Z10revealCardh+0x76>
	} else if (input % 4 == 0) {      // cetvrti stupac
		x = X1_4;
	}
	
	if ((input > 0) && (input < 5)) {               // prvi red
		y = Y1_1;
    1b28:	00 e0       	ldi	r16, 0x00	; 0
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
    1b2c:	08 c0       	rjmp	.+16     	; 0x1b3e <_Z10revealCardh+0x76>
	} else if ((input > 4) && (input < 9)) {        // drugi stupac
		y = Y1_2;
    1b2e:	0d e3       	ldi	r16, 0x3D	; 61
    1b30:	10 e0       	ldi	r17, 0x00	; 0
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <_Z10revealCardh+0x76>
	} else if ((input > 8) && (input < 13)) {       // treci stupac
		y = Y1_3;
    1b34:	0a e7       	ldi	r16, 0x7A	; 122
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <_Z10revealCardh+0x76>
	} else if ((input > 12) && (input < 17)) {      // cetvrti stupac
		y = Y1_4;
    1b3a:	07 eb       	ldi	r16, 0xB7	; 183
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	uint8_t openSymbol = board[input - 1];
    1b3e:	e8 2f       	mov	r30, r24
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	ee 58       	subi	r30, 0x8E	; 142
    1b44:	fe 4f       	sbci	r31, 0xFE	; 254
    1b46:	40 81       	ld	r20, Z
	
	display.printNumI(openSymbol, x + 20, y + 20);
    1b48:	0c 5e       	subi	r16, 0xEC	; 236
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	2c 5e       	subi	r18, 0xEC	; 236
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	68 94       	set
    1b58:	cc 24       	eor	r12, r12
    1b5a:	c5 f8       	bld	r12, 5
    1b5c:	e1 2c       	mov	r14, r1
    1b5e:	f1 2c       	mov	r15, r1
    1b60:	83 e8       	ldi	r24, 0x83	; 131
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
    1b68:	2f ef       	ldi	r18, 0xFF	; 255
    1b6a:	8f e7       	ldi	r24, 0x7F	; 127
    1b6c:	94 e0       	ldi	r25, 0x04	; 4
    1b6e:	21 50       	subi	r18, 0x01	; 1
    1b70:	80 40       	sbci	r24, 0x00	; 0
    1b72:	90 40       	sbci	r25, 0x00	; 0
    1b74:	e1 f7       	brne	.-8      	; 0x1b6e <_Z10revealCardh+0xa6>
    1b76:	00 c0       	rjmp	.+0      	; 0x1b78 <_Z10revealCardh+0xb0>
    1b78:	00 00       	nop
	
	_delay_ms(200);                                     // Debounce cekanjem
}
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	cf 90       	pop	r12
    1b84:	08 95       	ret

00001b86 <_Z10memoryInitv>:

// inicijalno stanje memory igre - generiranje sadrzaja polja i crtanje ploce
void memoryInit() {
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
	fillBoard();
    1b8a:	0e 94 38 0b 	call	0x1670	; 0x1670 <_Z9fillBoardv>
	
	display.clrScr();
    1b8e:	83 e8       	ldi	r24, 0x83	; 131
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN4UTFT6clrScrEv>
	
	// gumb za povratak
	display.drawRect(BACK_X1, BACK_Y1, BACK_X2, BACK_Y2);
    1b96:	08 e2       	ldi	r16, 0x28	; 40
    1b98:	10 e0       	ldi	r17, 0x00	; 0
    1b9a:	28 e2       	ldi	r18, 0x28	; 40
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	83 e8       	ldi	r24, 0x83	; 131
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN4UTFT8drawRectEiiii>
	display.print("<", BACK_TEXT_X, BACK_TEXT_Y);
    1bae:	00 e0       	ldi	r16, 0x00	; 0
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    1bb2:	2c e0       	ldi	r18, 0x0C	; 12
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	4c e0       	ldi	r20, 0x0C	; 12
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	6c e6       	ldi	r22, 0x6C	; 108
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	83 e8       	ldi	r24, 0x83	; 131
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	
	display.print("Moves", 0, 60); // labela za broj poteza
    1bc6:	2c e3       	ldi	r18, 0x3C	; 60
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	6e e6       	ldi	r22, 0x6E	; 110
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	83 e8       	ldi	r24, 0x83	; 131
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.print("Time", 0, 140); // labela za vrijeme
    1bda:	2c e8       	ldi	r18, 0x8C	; 140
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	64 e7       	ldi	r22, 0x74	; 116
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	83 e8       	ldi	r24, 0x83	; 131
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	
	//crtanje ploce
	display.fillRect(BORDER_L, BOARD_Y1, BORDER_L + BORDER_WIDTH, BOARD_Y2);
    1bee:	0f ee       	ldi	r16, 0xEF	; 239
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
    1bf2:	2d e8       	ldi	r18, 0x8D	; 141
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	68 e8       	ldi	r22, 0x88	; 136
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	83 e8       	ldi	r24, 0x83	; 131
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_C, BOARD_Y1, BORDER_C + BORDER_WIDTH, BOARD_Y2);
    1c06:	2a ec       	ldi	r18, 0xCA	; 202
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	65 ec       	ldi	r22, 0xC5	; 197
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	83 e8       	ldi	r24, 0x83	; 131
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_R, BOARD_Y1, BORDER_R + BORDER_WIDTH, BOARD_Y2);
    1c1a:	27 e0       	ldi	r18, 0x07	; 7
    1c1c:	31 e0       	ldi	r19, 0x01	; 1
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	62 e0       	ldi	r22, 0x02	; 2
    1c24:	71 e0       	ldi	r23, 0x01	; 1
    1c26:	83 e8       	ldi	r24, 0x83	; 131
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_T, BOARD_X2, BORDER_T + BORDER_WIDTH);
    1c2e:	0d e3       	ldi	r16, 0x3D	; 61
    1c30:	10 e0       	ldi	r17, 0x00	; 0
    1c32:	2e e3       	ldi	r18, 0x3E	; 62
    1c34:	31 e0       	ldi	r19, 0x01	; 1
    1c36:	48 e3       	ldi	r20, 0x38	; 56
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	6f e4       	ldi	r22, 0x4F	; 79
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	83 e8       	ldi	r24, 0x83	; 131
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_M, BOARD_X2, BORDER_M + BORDER_WIDTH);
    1c46:	0a e7       	ldi	r16, 0x7A	; 122
    1c48:	10 e0       	ldi	r17, 0x00	; 0
    1c4a:	2e e3       	ldi	r18, 0x3E	; 62
    1c4c:	31 e0       	ldi	r19, 0x01	; 1
    1c4e:	45 e7       	ldi	r20, 0x75	; 117
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	6f e4       	ldi	r22, 0x4F	; 79
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	83 e8       	ldi	r24, 0x83	; 131
    1c58:	91 e0       	ldi	r25, 0x01	; 1
    1c5a:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_B, BOARD_X2, BORDER_B + BORDER_WIDTH);
    1c5e:	07 eb       	ldi	r16, 0xB7	; 183
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	2e e3       	ldi	r18, 0x3E	; 62
    1c64:	31 e0       	ldi	r19, 0x01	; 1
    1c66:	42 eb       	ldi	r20, 0xB2	; 178
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	6f e4       	ldi	r22, 0x4F	; 79
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	83 e8       	ldi	r24, 0x83	; 131
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
}
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	08 95       	ret

00001c7c <_Z20memoryResetVariablesv>:

// postavlja varijable u pocetne vrijednosti (ne highscores, ne broj rundi), odnosi se na varijable za trenutnu rundu
void memoryResetVariables() {
	  for (uint8_t i = 0; i < 16; i++) {
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	20 31       	cpi	r18, 0x10	; 16
    1c80:	60 f4       	brcc	.+24     	; 0x1c9a <_Z20memoryResetVariablesv+0x1e>
		  board[i] = 0;
    1c82:	82 2f       	mov	r24, r18
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	fc 01       	movw	r30, r24
    1c88:	ed 58       	subi	r30, 0x8D	; 141
    1c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8c:	10 82       	st	Z, r1
		  control[i] = 0;
    1c8e:	fc 01       	movw	r30, r24
    1c90:	ed 59       	subi	r30, 0x9D	; 157
    1c92:	fe 4f       	sbci	r31, 0xFE	; 254
    1c94:	10 82       	st	Z, r1
	display.fillRect(BOARD_X1, BORDER_B, BOARD_X2, BORDER_B + BORDER_WIDTH);
}

// postavlja varijable u pocetne vrijednosti (ne highscores, ne broj rundi), odnosi se na varijable za trenutnu rundu
void memoryResetVariables() {
	  for (uint8_t i = 0; i < 16; i++) {
    1c96:	2f 5f       	subi	r18, 0xFF	; 255
    1c98:	f2 cf       	rjmp	.-28     	; 0x1c7e <_Z20memoryResetVariablesv+0x2>
		  board[i] = 0;
		  control[i] = 0;
	  }
	  c1 = c2 = 0;
    1c9a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <c2>
    1c9e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <c1>
	  state = 0;
    1ca2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <state>
	  matched = 0;
    1ca6:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <matched>
	  moveCounter = 0;
    1caa:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <moveCounter>
	  currentTime[0] = currentTime[1] = currentTime[2] = 0;  
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	f1 e0       	ldi	r31, 0x01	; 1
    1cb2:	12 82       	std	Z+2, r1	; 0x02
    1cb4:	11 82       	std	Z+1, r1	; 0x01
    1cb6:	10 82       	st	Z, r1
    1cb8:	08 95       	ret

00001cba <_Z15resetHighscoresv>:
}

// resetira rekorde
void resetHighscores() {
	bestMoves = 255;
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <bestMoves>
	bestTime[0] = bestTime[1] = bestTime[2] = 255;
    1cc0:	e6 e6       	ldi	r30, 0x66	; 102
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	82 83       	std	Z+2, r24	; 0x02
    1cc6:	81 83       	std	Z+1, r24	; 0x01
    1cc8:	80 83       	st	Z, r24
	roundStreak = 0;
    1cca:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <roundStreak>
    1cce:	08 95       	ret

00001cd0 <_Z13memoryEndGamev>:
}

// crta ekran za kraj igre
void memoryEndGame() {	
    1cd0:	cf 92       	push	r12
    1cd2:	ef 92       	push	r14
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
	// provjerava ako su trenutne varijable bolje od rekorda pa iscrtava ekran za kraj igre
	if (moveCounter < bestMoves) bestMoves = moveCounter;
    1cde:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <moveCounter>
    1ce2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <bestMoves>
    1ce6:	89 17       	cp	r24, r25
    1ce8:	10 f4       	brcc	.+4      	; 0x1cee <_Z13memoryEndGamev+0x1e>
    1cea:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <bestMoves>
	
	if (currentTime[0] * 60 + currentTime[1] <= bestTime[0] * 60 + bestTime[1]) {
    1cee:	eb e5       	ldi	r30, 0x5B	; 91
    1cf0:	f1 e0       	ldi	r31, 0x01	; 1
    1cf2:	60 81       	ld	r22, Z
    1cf4:	4c e3       	ldi	r20, 0x3C	; 60
    1cf6:	51 81       	ldd	r21, Z+1	; 0x01
    1cf8:	25 2f       	mov	r18, r21
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	46 9f       	mul	r20, r22
    1cfe:	20 0d       	add	r18, r0
    1d00:	31 1d       	adc	r19, r1
    1d02:	11 24       	eor	r1, r1
    1d04:	e6 e6       	ldi	r30, 0x66	; 102
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	70 81       	ld	r23, Z
    1d0a:	81 81       	ldd	r24, Z+1	; 0x01
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	47 9f       	mul	r20, r23
    1d10:	80 0d       	add	r24, r0
    1d12:	91 1d       	adc	r25, r1
    1d14:	11 24       	eor	r1, r1
    1d16:	82 17       	cp	r24, r18
    1d18:	93 07       	cpc	r25, r19
    1d1a:	2c f0       	brlt	.+10     	; 0x1d26 <_Z13memoryEndGamev+0x56>
		bestTime[0] = currentTime[0];
    1d1c:	60 83       	st	Z, r22
		bestTime[1] = currentTime[1];
    1d1e:	51 83       	std	Z+1, r21	; 0x01
		bestTime[2] = currentTime[2];
    1d20:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <currentTime+0x2>
    1d24:	82 83       	std	Z+2, r24	; 0x02
	}
	
	if (roundCounter > roundStreak) roundStreak = roundCounter;
    1d26:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <roundCounter>
    1d2a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <roundStreak>
    1d2e:	98 17       	cp	r25, r24
    1d30:	10 f4       	brcc	.+4      	; 0x1d36 <_Z13memoryEndGamev+0x66>
    1d32:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <roundStreak>
	
	display.clrScr();
    1d36:	83 e8       	ldi	r24, 0x83	; 131
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN4UTFT6clrScrEv>
	
	display.print("Round:", 100, 10);
    1d3e:	00 e0       	ldi	r16, 0x00	; 0
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	2a e0       	ldi	r18, 0x0A	; 10
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	44 e6       	ldi	r20, 0x64	; 100
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	69 e7       	ldi	r22, 0x79	; 121
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	83 e8       	ldi	r24, 0x83	; 131
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(roundCounter, 200, 10);
    1d56:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <roundCounter>
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	68 94       	set
    1d62:	cc 24       	eor	r12, r12
    1d64:	c5 f8       	bld	r12, 5
    1d66:	e1 2c       	mov	r14, r1
    1d68:	f1 2c       	mov	r15, r1
    1d6a:	0a e0       	ldi	r16, 0x0A	; 10
    1d6c:	10 e0       	ldi	r17, 0x00	; 0
    1d6e:	28 ec       	ldi	r18, 0xC8	; 200
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	83 e8       	ldi	r24, 0x83	; 131
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
	
	display.print("Moves:", 90, 40);
    1d7a:	00 e0       	ldi	r16, 0x00	; 0
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	28 e2       	ldi	r18, 0x28	; 40
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a e5       	ldi	r20, 0x5A	; 90
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	60 e8       	ldi	r22, 0x80	; 128
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	83 e8       	ldi	r24, 0x83	; 131
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(moveCounter, 190, 40);
    1d92:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <moveCounter>
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	08 e2       	ldi	r16, 0x28	; 40
    1d9e:	10 e0       	ldi	r17, 0x00	; 0
    1da0:	2e eb       	ldi	r18, 0xBE	; 190
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	83 e8       	ldi	r24, 0x83	; 131
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
	display.print("Best moves:", 40, 60);
    1dac:	00 e0       	ldi	r16, 0x00	; 0
    1dae:	10 e0       	ldi	r17, 0x00	; 0
    1db0:	2c e3       	ldi	r18, 0x3C	; 60
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	48 e2       	ldi	r20, 0x28	; 40
    1db6:	50 e0       	ldi	r21, 0x00	; 0
    1db8:	67 e8       	ldi	r22, 0x87	; 135
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	83 e8       	ldi	r24, 0x83	; 131
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
    1dc0:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(bestMoves, 240, 60);
    1dc4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <bestMoves>
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	0c e3       	ldi	r16, 0x3C	; 60
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	20 ef       	ldi	r18, 0xF0	; 240
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	83 e8       	ldi	r24, 0x83	; 131
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		
	display.print("Time:", 70, 90);
    1dde:	00 e0       	ldi	r16, 0x00	; 0
    1de0:	10 e0       	ldi	r17, 0x00	; 0
    1de2:	2a e5       	ldi	r18, 0x5A	; 90
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	46 e4       	ldi	r20, 0x46	; 70
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	63 e9       	ldi	r22, 0x93	; 147
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	83 e8       	ldi	r24, 0x83	; 131
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(currentTime[0], 150, 90);
    1df6:	cb e5       	ldi	r28, 0x5B	; 91
    1df8:	d1 e0       	ldi	r29, 0x01	; 1
    1dfa:	48 81       	ld	r20, Y
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	0a e5       	ldi	r16, 0x5A	; 90
    1e04:	10 e0       	ldi	r17, 0x00	; 0
    1e06:	26 e9       	ldi	r18, 0x96	; 150
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	83 e8       	ldi	r24, 0x83	; 131
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
	display.print(":", 180, 90);
    1e12:	00 e0       	ldi	r16, 0x00	; 0
    1e14:	10 e0       	ldi	r17, 0x00	; 0
    1e16:	2a e5       	ldi	r18, 0x5A	; 90
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	44 eb       	ldi	r20, 0xB4	; 180
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	6e e7       	ldi	r22, 0x7E	; 126
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	83 e8       	ldi	r24, 0x83	; 131
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(currentTime[1], 190, 90);
    1e2a:	49 81       	ldd	r20, Y+1	; 0x01
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	0a e5       	ldi	r16, 0x5A	; 90
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	2e eb       	ldi	r18, 0xBE	; 190
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	83 e8       	ldi	r24, 0x83	; 131
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		
	display.print("Best time:", 30, 110);
    1e42:	00 e0       	ldi	r16, 0x00	; 0
    1e44:	10 e0       	ldi	r17, 0x00	; 0
    1e46:	2e e6       	ldi	r18, 0x6E	; 110
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4e e1       	ldi	r20, 0x1E	; 30
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	69 e9       	ldi	r22, 0x99	; 153
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	83 e8       	ldi	r24, 0x83	; 131
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(bestTime[0], 190, 110);
    1e5a:	c6 e6       	ldi	r28, 0x66	; 102
    1e5c:	d0 e0       	ldi	r29, 0x00	; 0
    1e5e:	48 81       	ld	r20, Y
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	0e e6       	ldi	r16, 0x6E	; 110
    1e68:	10 e0       	ldi	r17, 0x00	; 0
    1e6a:	2e eb       	ldi	r18, 0xBE	; 190
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	83 e8       	ldi	r24, 0x83	; 131
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
	display.print(":", 220, 110);
    1e76:	00 e0       	ldi	r16, 0x00	; 0
    1e78:	10 e0       	ldi	r17, 0x00	; 0
    1e7a:	2e e6       	ldi	r18, 0x6E	; 110
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4c ed       	ldi	r20, 0xDC	; 220
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	6e e7       	ldi	r22, 0x7E	; 126
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	83 e8       	ldi	r24, 0x83	; 131
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(bestTime[1], 230, 110);
    1e8e:	49 81       	ldd	r20, Y+1	; 0x01
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	0e e6       	ldi	r16, 0x6E	; 110
    1e98:	10 e0       	ldi	r17, 0x00	; 0
    1e9a:	26 ee       	ldi	r18, 0xE6	; 230
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	83 e8       	ldi	r24, 0x83	; 131
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
;
	display.drawRect(EXIT_X1, BUTTONS_Y1, EXIT_X2, BUTTONS_Y2);
    1ea6:	06 ee       	ldi	r16, 0xE6	; 230
    1ea8:	10 e0       	ldi	r17, 0x00	; 0
    1eaa:	20 ea       	ldi	r18, 0xA0	; 160
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	46 e9       	ldi	r20, 0x96	; 150
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	6a e0       	ldi	r22, 0x0A	; 10
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	83 e8       	ldi	r24, 0x83	; 131
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN4UTFT8drawRectEiiii>
	display.print("EXIT", EXIT_TEXT_X, BUTTONS_TEXT_Y);
    1ebe:	00 e0       	ldi	r16, 0x00	; 0
    1ec0:	10 e0       	ldi	r17, 0x00	; 0
    1ec2:	24 eb       	ldi	r18, 0xB4	; 180
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4c e3       	ldi	r20, 0x3C	; 60
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	64 ea       	ldi	r22, 0xA4	; 164
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	83 e8       	ldi	r24, 0x83	; 131
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.drawRect(NEXT_X1, BUTTONS_Y1, NEXT_X2, BUTTONS_Y2);
    1ed6:	06 ee       	ldi	r16, 0xE6	; 230
    1ed8:	10 e0       	ldi	r17, 0x00	; 0
    1eda:	26 e3       	ldi	r18, 0x36	; 54
    1edc:	31 e0       	ldi	r19, 0x01	; 1
    1ede:	46 e9       	ldi	r20, 0x96	; 150
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	61 ea       	ldi	r22, 0xA1	; 161
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	83 e8       	ldi	r24, 0x83	; 131
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN4UTFT8drawRectEiiii>
	display.print("NEXT", NEXT_TEXT_X, BUTTONS_TEXT_Y);	  
    1eee:	00 e0       	ldi	r16, 0x00	; 0
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
    1ef2:	24 eb       	ldi	r18, 0xB4	; 180
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	48 ec       	ldi	r20, 0xC8	; 200
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	69 ea       	ldi	r22, 0xA9	; 169
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	83 e8       	ldi	r24, 0x83	; 131
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
}
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	cf 90       	pop	r12
    1f14:	08 95       	ret

00001f16 <_Z15endGameGetInputv>:

// odabir ako ce se nastaviti s igrom ili se vratiti na glavni izbornik
uint8_t endGameGetInput() {
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
	while(!Touched());
    1f1a:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z7Touchedv>
    1f1e:	88 23       	and	r24, r24
    1f20:	e1 f3       	breq	.-8      	; 0x1f1a <_Z15endGameGetInputv+0x4>
	uint16_t x = getX();
    1f22:	0e 94 af 09 	call	0x135e	; 0x135e <_Z4getXv>
    1f26:	ec 01       	movw	r28, r24
	uint16_t y = getY();
    1f28:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_Z4getYv>
	
	if ((x > EXIT_X1) && (x < EXIT_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 1;
    1f2c:	9e 01       	movw	r18, r28
    1f2e:	2b 50       	subi	r18, 0x0B	; 11
    1f30:	31 09       	sbc	r19, r1
    1f32:	25 39       	cpi	r18, 0x95	; 149
    1f34:	31 05       	cpc	r19, r1
    1f36:	30 f4       	brcc	.+12     	; 0x1f44 <_Z15endGameGetInputv+0x2e>
    1f38:	87 39       	cpi	r24, 0x97	; 151
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	18 f0       	brcs	.+6      	; 0x1f44 <_Z15endGameGetInputv+0x2e>
    1f3e:	86 3e       	cpi	r24, 0xE6	; 230
    1f40:	91 05       	cpc	r25, r1
    1f42:	68 f0       	brcs	.+26     	; 0x1f5e <_Z15endGameGetInputv+0x48>
	else if ((x > NEXT_X1) && (x < NEXT_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 2;
    1f44:	c2 5a       	subi	r28, 0xA2	; 162
    1f46:	d1 09       	sbc	r29, r1
    1f48:	c4 39       	cpi	r28, 0x94	; 148
    1f4a:	d1 05       	cpc	r29, r1
    1f4c:	50 f4       	brcc	.+20     	; 0x1f62 <_Z15endGameGetInputv+0x4c>
    1f4e:	87 39       	cpi	r24, 0x97	; 151
    1f50:	91 05       	cpc	r25, r1
    1f52:	48 f0       	brcs	.+18     	; 0x1f66 <_Z15endGameGetInputv+0x50>
    1f54:	86 3e       	cpi	r24, 0xE6	; 230
    1f56:	91 05       	cpc	r25, r1
    1f58:	40 f0       	brcs	.+16     	; 0x1f6a <_Z15endGameGetInputv+0x54>
	else return 0;
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	07 c0       	rjmp	.+14     	; 0x1f6c <_Z15endGameGetInputv+0x56>
uint8_t endGameGetInput() {
	while(!Touched());
	uint16_t x = getX();
	uint16_t y = getY();
	
	if ((x > EXIT_X1) && (x < EXIT_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <_Z15endGameGetInputv+0x56>
	else if ((x > NEXT_X1) && (x < NEXT_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 2;
	else return 0;
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <_Z15endGameGetInputv+0x56>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <_Z15endGameGetInputv+0x56>
	while(!Touched());
	uint16_t x = getX();
	uint16_t y = getY();
	
	if ((x > EXIT_X1) && (x < EXIT_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 1;
	else if ((x > NEXT_X1) && (x < NEXT_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 2;
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
	else return 0;
}
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	08 95       	ret

00001f72 <_Z9startGamev>:


// start ekran, sluzi kao tranizicija i nasumicno generiranje ploce na temelju gdje dodirnemo
void startGame() {
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
	display.clrScr();
    1f7a:	83 e8       	ldi	r24, 0x83	; 131
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN4UTFT6clrScrEv>
	display.print("Tap to start", CENTER, 120);	
    1f82:	00 e0       	ldi	r16, 0x00	; 0
    1f84:	10 e0       	ldi	r17, 0x00	; 0
    1f86:	28 e7       	ldi	r18, 0x78	; 120
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4e e0       	ldi	r20, 0x0E	; 14
    1f8c:	57 e2       	ldi	r21, 0x27	; 39
    1f8e:	6e ea       	ldi	r22, 0xAE	; 174
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	83 e8       	ldi	r24, 0x83	; 131
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
    1f9a:	2f ef       	ldi	r18, 0xFF	; 255
    1f9c:	8f e7       	ldi	r24, 0x7F	; 127
    1f9e:	94 e0       	ldi	r25, 0x04	; 4
    1fa0:	21 50       	subi	r18, 0x01	; 1
    1fa2:	80 40       	sbci	r24, 0x00	; 0
    1fa4:	90 40       	sbci	r25, 0x00	; 0
    1fa6:	e1 f7       	brne	.-8      	; 0x1fa0 <_Z9startGamev+0x2e>
    1fa8:	00 c0       	rjmp	.+0      	; 0x1faa <_Z9startGamev+0x38>
    1faa:	00 00       	nop
	
	_delay_ms(200); //debounce cekanjem
	while(!Touched());
    1fac:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z7Touchedv>
    1fb0:	88 23       	and	r24, r24
    1fb2:	e1 f3       	breq	.-8      	; 0x1fac <_Z9startGamev+0x3a>
	uint16_t x = getX();
    1fb4:	0e 94 af 09 	call	0x135e	; 0x135e <_Z4getXv>
    1fb8:	ec 01       	movw	r28, r24
	uint16_t y = getY();
    1fba:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_Z4getYv>
	srand(x + y);       
    1fbe:	8c 0f       	add	r24, r28
    1fc0:	9d 1f       	adc	r25, r29
    1fc2:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <srand>
}
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	08 95       	ret

00001fd0 <_Z17challengeGameOverv>:

// ekran za kraj igre u izazovnom nacinu rada (pobjeda ili izgubljena igra), vraca se na glavni izbornik
void challengeGameOver() {
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
	started = 0; 
    1fd4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <started>
	
	display.clrScr();
    1fd8:	83 e8       	ldi	r24, 0x83	; 131
    1fda:	91 e0       	ldi	r25, 0x01	; 1
    1fdc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN4UTFT6clrScrEv>
	if (challengeEndFlag == 1) {
    1fe0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <challengeEndFlag>
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	81 f4       	brne	.+32     	; 0x2008 <_Z17challengeGameOverv+0x38>
		display.print("VICTORY", CENTER, 80);
    1fe8:	00 e0       	ldi	r16, 0x00	; 0
    1fea:	10 e0       	ldi	r17, 0x00	; 0
    1fec:	20 e5       	ldi	r18, 0x50	; 80
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4e e0       	ldi	r20, 0x0E	; 14
    1ff2:	57 e2       	ldi	r21, 0x27	; 39
    1ff4:	6b eb       	ldi	r22, 0xBB	; 187
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	83 e8       	ldi	r24, 0x83	; 131
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
		gameBeaten = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
    2006:	31 c0       	rjmp	.+98     	; 0x206a <_Z17challengeGameOverv+0x9a>
	}
	else if (challengeEndFlag == 2) {
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	b9 f4       	brne	.+46     	; 0x203a <_Z17challengeGameOverv+0x6a>
		display.print("GAME OVER", CENTER, 80);
    200c:	00 e0       	ldi	r16, 0x00	; 0
    200e:	10 e0       	ldi	r17, 0x00	; 0
    2010:	20 e5       	ldi	r18, 0x50	; 80
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4e e0       	ldi	r20, 0x0E	; 14
    2016:	57 e2       	ldi	r21, 0x27	; 39
    2018:	63 ec       	ldi	r22, 0xC3	; 195
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	83 e8       	ldi	r24, 0x83	; 131
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
		display.print("out of moves", CENTER, 100);
    2024:	24 e6       	ldi	r18, 0x64	; 100
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4e e0       	ldi	r20, 0x0E	; 14
    202a:	57 e2       	ldi	r21, 0x27	; 39
    202c:	6d ec       	ldi	r22, 0xCD	; 205
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	83 e8       	ldi	r24, 0x83	; 131
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
    2038:	18 c0       	rjmp	.+48     	; 0x206a <_Z17challengeGameOverv+0x9a>
	} else if (challengeEndFlag == 3) {
    203a:	83 30       	cpi	r24, 0x03	; 3
    203c:	b1 f4       	brne	.+44     	; 0x206a <_Z17challengeGameOverv+0x9a>
		display.print("GAME OVER", CENTER, 80);
    203e:	00 e0       	ldi	r16, 0x00	; 0
    2040:	10 e0       	ldi	r17, 0x00	; 0
    2042:	20 e5       	ldi	r18, 0x50	; 80
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4e e0       	ldi	r20, 0x0E	; 14
    2048:	57 e2       	ldi	r21, 0x27	; 39
    204a:	63 ec       	ldi	r22, 0xC3	; 195
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	83 e8       	ldi	r24, 0x83	; 131
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
		display.print("time ran out", CENTER, 100);
    2056:	24 e6       	ldi	r18, 0x64	; 100
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4e e0       	ldi	r20, 0x0E	; 14
    205c:	57 e2       	ldi	r21, 0x27	; 39
    205e:	6a ed       	ldi	r22, 0xDA	; 218
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	83 e8       	ldi	r24, 0x83	; 131
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	}
	display.print("tap to return", CENTER, 160);
    206a:	00 e0       	ldi	r16, 0x00	; 0
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	20 ea       	ldi	r18, 0xA0	; 160
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4e e0       	ldi	r20, 0x0E	; 14
    2074:	57 e2       	ldi	r21, 0x27	; 39
    2076:	67 ee       	ldi	r22, 0xE7	; 231
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	83 e8       	ldi	r24, 0x83	; 131
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.print("to main menu", CENTER, 180);
    2082:	24 eb       	ldi	r18, 0xB4	; 180
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4e e0       	ldi	r20, 0x0E	; 14
    2088:	57 e2       	ldi	r21, 0x27	; 39
    208a:	65 ef       	ldi	r22, 0xF5	; 245
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	83 e8       	ldi	r24, 0x83	; 131
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
    2096:	2f ef       	ldi	r18, 0xFF	; 255
    2098:	8f e3       	ldi	r24, 0x3F	; 63
    209a:	92 e0       	ldi	r25, 0x02	; 2
    209c:	21 50       	subi	r18, 0x01	; 1
    209e:	80 40       	sbci	r24, 0x00	; 0
    20a0:	90 40       	sbci	r25, 0x00	; 0
    20a2:	e1 f7       	brne	.-8      	; 0x209c <_Z17challengeGameOverv+0xcc>
    20a4:	00 c0       	rjmp	.+0      	; 0x20a6 <_Z17challengeGameOverv+0xd6>
    20a6:	00 00       	nop
	
	_delay_ms(100);
	while(!Touched());
    20a8:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z7Touchedv>
    20ac:	88 23       	and	r24, r24
    20ae:	e1 f3       	breq	.-8      	; 0x20a8 <_Z17challengeGameOverv+0xd8>
	memoryResetVariables();
    20b0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_Z20memoryResetVariablesv>
	challengeEndFlag = 0;
    20b4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <challengeEndFlag>
	menu = 0;
    20b8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <menu>
	return;
}
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	08 95       	ret

000020c2 <_Z10memoryGamev>:

// glavni game loop
void memoryGame() {
    20c2:	cf 92       	push	r12
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
	uint8_t input;
	
	while(1) {	
		// ako su otvorene dvije karte, provjeri ako su iste i povecaj broj poteza 	
		if (state == 2) {
    20ce:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <state>
    20d2:	82 30       	cpi	r24, 0x02	; 2
    20d4:	09 f5       	brne	.+66     	; 0x2118 <_Z10memoryGamev+0x56>
			checkOpen();
    20d6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_Z9checkOpenv>
			state = c1 = c2 = 0;
    20da:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <c2>
    20de:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <c1>
    20e2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <state>
			moveCounter++;
    20e6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <moveCounter>
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <moveCounter>
			
			// ako smo u izazovnom nacinu, provjeri ako smo ostali bez poteza i zavrsi igru
			if (challengeMode) {
    20f0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <challengeMode>
    20f4:	99 23       	and	r25, r25
    20f6:	81 f0       	breq	.+32     	; 0x2118 <_Z10memoryGamev+0x56>
				if (challengeMoves - moveCounter <= 0) {
    20f8:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <challengeMoves>
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	a9 01       	movw	r20, r18
    2100:	48 1b       	sub	r20, r24
    2102:	51 09       	sbc	r21, r1
    2104:	ca 01       	movw	r24, r20
    2106:	18 16       	cp	r1, r24
    2108:	19 06       	cpc	r1, r25
    210a:	34 f0       	brlt	.+12     	; 0x2118 <_Z10memoryGamev+0x56>
					challengeEndFlag = 2;
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <challengeEndFlag>
					challengeGameOver();
    2112:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <_Z17challengeGameOverv>
					return;
    2116:	e3 c0       	rjmp	.+454    	; 0x22de <_Z10memoryGamev+0x21c>
				}
			}
		}
		
		// ocisti prijasnji zapis poteza i ovisno o nacinu rada ispisi broj napravljenih ili preostalih poteza
		display.setColor(0, 0, 0);
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	83 e8       	ldi	r24, 0x83	; 131
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN4UTFT8setColorEhhh>
		display.fillRect(0,75,45,100);
    2126:	04 e6       	ldi	r16, 0x64	; 100
    2128:	10 e0       	ldi	r17, 0x00	; 0
    212a:	2d e2       	ldi	r18, 0x2D	; 45
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4b e4       	ldi	r20, 0x4B	; 75
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	83 e8       	ldi	r24, 0x83	; 131
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN4UTFT8fillRectEiiii>
		display.setColor(255, 255, 255);
    213e:	2f ef       	ldi	r18, 0xFF	; 255
    2140:	4f ef       	ldi	r20, 0xFF	; 255
    2142:	6f ef       	ldi	r22, 0xFF	; 255
    2144:	83 e8       	ldi	r24, 0x83	; 131
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN4UTFT8setColorEhhh>
		if (challengeMode) display.printNumI(challengeMoves - moveCounter, 0, 80);
    214c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <challengeMode>
    2150:	88 23       	and	r24, r24
    2152:	c9 f0       	breq	.+50     	; 0x2186 <_Z10memoryGamev+0xc4>
    2154:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <challengeMoves>
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <moveCounter>
    215e:	48 1b       	sub	r20, r24
    2160:	51 09       	sbc	r21, r1
    2162:	05 2e       	mov	r0, r21
    2164:	00 0c       	add	r0, r0
    2166:	66 0b       	sbc	r22, r22
    2168:	77 0b       	sbc	r23, r23
    216a:	68 94       	set
    216c:	cc 24       	eor	r12, r12
    216e:	c5 f8       	bld	r12, 5
    2170:	e1 2c       	mov	r14, r1
    2172:	f1 2c       	mov	r15, r1
    2174:	00 e5       	ldi	r16, 0x50	; 80
    2176:	10 e0       	ldi	r17, 0x00	; 0
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	83 e8       	ldi	r24, 0x83	; 131
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
    2184:	12 c0       	rjmp	.+36     	; 0x21aa <_Z10memoryGamev+0xe8>
		else display.printNumI(moveCounter, 0, 80);
    2186:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <moveCounter>
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	68 94       	set
    2192:	cc 24       	eor	r12, r12
    2194:	c5 f8       	bld	r12, 5
    2196:	e1 2c       	mov	r14, r1
    2198:	f1 2c       	mov	r15, r1
    219a:	00 e5       	ldi	r16, 0x50	; 80
    219c:	10 e0       	ldi	r17, 0x00	; 0
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	83 e8       	ldi	r24, 0x83	; 131
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		
		// ako smo pogodili svih osam parova, povecaj broj rundi i iskljuci igru, ispisi ekran za kraj igre i resetiraj varijable za rundu
		if (matched == 8) {
    21aa:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <matched>
    21ae:	88 30       	cpi	r24, 0x08	; 8
    21b0:	61 f5       	brne	.+88     	; 0x220a <_Z10memoryGamev+0x148>
			started = 0;
    21b2:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <started>
			roundCounter++;
    21b6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <roundCounter>
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <roundCounter>
			
			memoryEndGame();
    21c0:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_Z13memoryEndGamev>
			memoryResetVariables();	  
    21c4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_Z20memoryResetVariablesv>
			
			// ako smo u izazovnom nacinu rada, smanji broj dozvoljenih poteza za 1 i dozvoljeno vrijeme za CHALLENGE_STEP, ako je broj runde jednak tajanju igre, izadji iz igre
			if (challengeMode) {
    21c8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <challengeMode>
    21cc:	88 23       	and	r24, r24
    21ce:	a1 f0       	breq	.+40     	; 0x21f8 <_Z10memoryGamev+0x136>
				challengeMoves--;
    21d0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <challengeMoves>
    21d4:	81 50       	subi	r24, 0x01	; 1
    21d6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <challengeMoves>
				challengeTime -= CHALLENGE_STEP;
    21da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <challengeTime>
    21de:	83 50       	subi	r24, 0x03	; 3
    21e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <challengeTime>
				if (roundCounter == CHALLENGE_LENGTH) {
    21e4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <roundCounter>
    21e8:	8e 31       	cpi	r24, 0x1E	; 30
    21ea:	31 f4       	brne	.+12     	; 0x21f8 <_Z10memoryGamev+0x136>
					challengeEndFlag = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <challengeEndFlag>
					challengeGameOver();
    21f2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <_Z17challengeGameOverv>
					return;
    21f6:	73 c0       	rjmp	.+230    	; 0x22de <_Z10memoryGamev+0x21c>
				}
			}
			
			// cekanje na ekranu za kraj igre, moze se vratiti na glavni izbornik ili ici u sljedecu rundu
			do {
				input = endGameGetInput();
    21f8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <_Z15endGameGetInputv>
				if (input == 1) {
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	19 f4       	brne	.+6      	; 0x2206 <_Z10memoryGamev+0x144>
					menu = 0;
    2200:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <menu>
					return;
    2204:	6c c0       	rjmp	.+216    	; 0x22de <_Z10memoryGamev+0x21c>
				}
			} while (input == 0);
    2206:	88 23       	and	r24, r24
    2208:	b9 f3       	breq	.-18     	; 0x21f8 <_Z10memoryGamev+0x136>
		}
		input = memoryGetInput();
    220a:	0e 94 5f 0b 	call	0x16be	; 0x16be <_Z14memoryGetInputv>
    220e:	c8 2f       	mov	r28, r24
		
		if (!started) {                                           //inicijalizira stanje igre pri prvom pokretanju			
    2210:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <started>
    2214:	81 11       	cpse	r24, r1
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <_Z10memoryGamev+0x166>
			startGame();
    2218:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z9startGamev>
			memoryInit();
    221c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_Z10memoryInitv>
			started = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <started>
    2226:	51 c0       	rjmp	.+162    	; 0x22ca <_Z10memoryGamev+0x208>
		} else if (input == 20) {                                 // povratak na glavni izbornik i resetiranje varijabli runde
    2228:	c4 31       	cpi	r28, 0x14	; 20
    222a:	39 f4       	brne	.+14     	; 0x223a <_Z10memoryGamev+0x178>
			menu = 0;
    222c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <menu>
			started = 0;
    2230:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <started>
			memoryResetVariables();
    2234:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_Z20memoryResetVariablesv>
			return;
    2238:	52 c0       	rjmp	.+164    	; 0x22de <_Z10memoryGamev+0x21c>
		} else if (input > 0 && started && !(control[input-1])) { // ako igra vec traje, pritisnut je ekran i karta nije vec pogodjena, otvori kartu
    223a:	cc 23       	and	r28, r28
    223c:	09 f4       	brne	.+2      	; 0x2240 <_Z10memoryGamev+0x17e>
    223e:	45 c0       	rjmp	.+138    	; 0x22ca <_Z10memoryGamev+0x208>
    2240:	88 23       	and	r24, r24
    2242:	09 f4       	brne	.+2      	; 0x2246 <_Z10memoryGamev+0x184>
    2244:	42 c0       	rjmp	.+132    	; 0x22ca <_Z10memoryGamev+0x208>
    2246:	0c 2f       	mov	r16, r28
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	01 50       	subi	r16, 0x01	; 1
    224c:	11 09       	sbc	r17, r1
    224e:	f8 01       	movw	r30, r16
    2250:	ed 59       	subi	r30, 0x9D	; 157
    2252:	fe 4f       	sbci	r31, 0xFE	; 254
    2254:	80 81       	ld	r24, Z
    2256:	81 11       	cpse	r24, r1
    2258:	38 c0       	rjmp	.+112    	; 0x22ca <_Z10memoryGamev+0x208>
			if (challengeMode && challengeEndFlag == 3) {         // ako smo u challenge mode i vrijeme je isteklo, izadji iz igre
    225a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <challengeMode>
    225e:	88 23       	and	r24, r24
    2260:	39 f0       	breq	.+14     	; 0x2270 <_Z10memoryGamev+0x1ae>
    2262:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <challengeEndFlag>
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	19 f4       	brne	.+6      	; 0x2270 <_Z10memoryGamev+0x1ae>
				challengeGameOver();
    226a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <_Z17challengeGameOverv>
				return;
    226e:	37 c0       	rjmp	.+110    	; 0x22de <_Z10memoryGamev+0x21c>
			}
			
			revealCard(input);
    2270:	8c 2f       	mov	r24, r28
    2272:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_Z10revealCardh>
			
			if (state == 0 && control[input-1] == 0) {            // nisu trenutno otvorene karte, ne smijemo otvarati vec pogodjenu kartu
    2276:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <state>
    227a:	81 11       	cpse	r24, r1
    227c:	0e c0       	rjmp	.+28     	; 0x229a <_Z10memoryGamev+0x1d8>
    227e:	f8 01       	movw	r30, r16
    2280:	ed 59       	subi	r30, 0x9D	; 157
    2282:	fe 4f       	sbci	r31, 0xFE	; 254
    2284:	90 81       	ld	r25, Z
    2286:	91 11       	cpse	r25, r1
    2288:	08 c0       	rjmp	.+16     	; 0x229a <_Z10memoryGamev+0x1d8>
				c1 = input;
    228a:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <c1>
			    if (control[c1-1] == 0) state = 1;                // promjena stanja jedino ako je u c1 spremljena karta koja nije pogodjena
    228e:	91 11       	cpse	r25, r1
    2290:	1c c0       	rjmp	.+56     	; 0x22ca <_Z10memoryGamev+0x208>
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <state>
    2298:	18 c0       	rjmp	.+48     	; 0x22ca <_Z10memoryGamev+0x208>
			} else if (state == 1 && control[c1-1] == 0) {        // otvorena jedna karta, ne smijemo otvarati vec pogodjenu kartu
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	b1 f4       	brne	.+44     	; 0x22ca <_Z10memoryGamev+0x208>
    229e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <c1>
    22a2:	e8 2f       	mov	r30, r24
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	ee 59       	subi	r30, 0x9E	; 158
    22a8:	fe 4f       	sbci	r31, 0xFE	; 254
    22aa:	90 81       	ld	r25, Z
    22ac:	91 11       	cpse	r25, r1
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <_Z10memoryGamev+0x208>
				c2 = input;
    22b0:	c0 93 61 01 	sts	0x0161, r28	; 0x800161 <c2>
				if (c1 != c2 && control[c2-1] == 0) state = 2;    // promjena stanja jedino ako je u c1 spremljena karta koja nije pogodjena i c1 i c2 su razliciti
    22b4:	c8 17       	cp	r28, r24
    22b6:	49 f0       	breq	.+18     	; 0x22ca <_Z10memoryGamev+0x208>
    22b8:	f8 01       	movw	r30, r16
    22ba:	ed 59       	subi	r30, 0x9D	; 157
    22bc:	fe 4f       	sbci	r31, 0xFE	; 254
    22be:	80 81       	ld	r24, Z
    22c0:	81 11       	cpse	r24, r1
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <_Z10memoryGamev+0x208>
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <state>
    22ca:	5f ef       	ldi	r21, 0xFF	; 255
    22cc:	8f e1       	ldi	r24, 0x1F	; 31
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	51 50       	subi	r21, 0x01	; 1
    22d2:	80 40       	sbci	r24, 0x00	; 0
    22d4:	90 40       	sbci	r25, 0x00	; 0
    22d6:	e1 f7       	brne	.-8      	; 0x22d0 <_Z10memoryGamev+0x20e>
    22d8:	00 c0       	rjmp	.+0      	; 0x22da <_Z10memoryGamev+0x218>
    22da:	00 00       	nop
    22dc:	f8 ce       	rjmp	.-528    	; 0x20ce <_Z10memoryGamev+0xc>
			}
		}	 
		_delay_ms(50);  //debounce cekanjem
	}
}
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	cf 90       	pop	r12
    22ea:	08 95       	ret

000022ec <_Z9printMenuv>:

// crtanje glavnog izbornika
void printMenu() {
    22ec:	cf 92       	push	r12
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
	display.clrScr();
    22f6:	83 e8       	ldi	r24, 0x83	; 131
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN4UTFT6clrScrEv>
	
	display.print("Memory", CENTER, 10);
    22fe:	00 e0       	ldi	r16, 0x00	; 0
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	2a e0       	ldi	r18, 0x0A	; 10
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	4e e0       	ldi	r20, 0x0E	; 14
    2308:	57 e2       	ldi	r21, 0x27	; 39
    230a:	62 e0       	ldi	r22, 0x02	; 2
    230c:	71 e0       	ldi	r23, 0x01	; 1
    230e:	83 e8       	ldi	r24, 0x83	; 131
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	
	display.print("Best moves: ", 40, 40); 
    2316:	28 e2       	ldi	r18, 0x28	; 40
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	48 e2       	ldi	r20, 0x28	; 40
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	69 e0       	ldi	r22, 0x09	; 9
    2320:	71 e0       	ldi	r23, 0x01	; 1
    2322:	83 e8       	ldi	r24, 0x83	; 131
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	if (bestMoves < 255) display.printNumI(bestMoves, 220, 40);   // prikazi samo ako postoji high score
    232a:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <bestMoves>
    232e:	4f 3f       	cpi	r20, 0xFF	; 255
    2330:	81 f0       	breq	.+32     	; 0x2352 <_Z9printMenuv+0x66>
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	68 94       	set
    233a:	cc 24       	eor	r12, r12
    233c:	c5 f8       	bld	r12, 5
    233e:	e1 2c       	mov	r14, r1
    2340:	f1 2c       	mov	r15, r1
    2342:	08 e2       	ldi	r16, 0x28	; 40
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	2c ed       	ldi	r18, 0xDC	; 220
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	83 e8       	ldi	r24, 0x83	; 131
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
					
	display.print("Best time:", 30, 60);
    2352:	00 e0       	ldi	r16, 0x00	; 0
    2354:	10 e0       	ldi	r17, 0x00	; 0
    2356:	2c e3       	ldi	r18, 0x3C	; 60
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4e e1       	ldi	r20, 0x1E	; 30
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	69 e9       	ldi	r22, 0x99	; 153
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	83 e8       	ldi	r24, 0x83	; 131
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	if (bestTime[0] < 255 && bestTime[1] < 255 && bestTime[2] < 255) {
    236a:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <bestTime>
    236e:	4f 3f       	cpi	r20, 0xFF	; 255
    2370:	89 f1       	breq	.+98     	; 0x23d4 <_Z9printMenuv+0xe8>
    2372:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <bestTime+0x1>
    2376:	8f 3f       	cpi	r24, 0xFF	; 255
    2378:	69 f1       	breq	.+90     	; 0x23d4 <_Z9printMenuv+0xe8>
    237a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <bestTime+0x2>
    237e:	8f 3f       	cpi	r24, 0xFF	; 255
    2380:	49 f1       	breq	.+82     	; 0x23d4 <_Z9printMenuv+0xe8>
		display.printNumI(bestTime[0], 190, 60);
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	68 94       	set
    238a:	cc 24       	eor	r12, r12
    238c:	c5 f8       	bld	r12, 5
    238e:	e1 2c       	mov	r14, r1
    2390:	f1 2c       	mov	r15, r1
    2392:	0c e3       	ldi	r16, 0x3C	; 60
    2394:	10 e0       	ldi	r17, 0x00	; 0
    2396:	2e eb       	ldi	r18, 0xBE	; 190
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	83 e8       	ldi	r24, 0x83	; 131
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
		display.print(":", 220, 60);
    23a2:	00 e0       	ldi	r16, 0x00	; 0
    23a4:	10 e0       	ldi	r17, 0x00	; 0
    23a6:	2c e3       	ldi	r18, 0x3C	; 60
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4c ed       	ldi	r20, 0xDC	; 220
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	6e e7       	ldi	r22, 0x7E	; 126
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	83 e8       	ldi	r24, 0x83	; 131
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
		display.printNumI(bestTime[1], 230, 60);
    23ba:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <bestTime+0x1>
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	70 e0       	ldi	r23, 0x00	; 0
    23c4:	0c e3       	ldi	r16, 0x3C	; 60
    23c6:	10 e0       	ldi	r17, 0x00	; 0
    23c8:	26 ee       	ldi	r18, 0xE6	; 230
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	83 e8       	ldi	r24, 0x83	; 131
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
	}		
	
	display.print("Longest streak:", 20 , 80);
    23d4:	00 e0       	ldi	r16, 0x00	; 0
    23d6:	10 e0       	ldi	r17, 0x00	; 0
    23d8:	20 e5       	ldi	r18, 0x50	; 80
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	44 e1       	ldi	r20, 0x14	; 20
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	66 e1       	ldi	r22, 0x16	; 22
    23e2:	71 e0       	ldi	r23, 0x01	; 1
    23e4:	83 e8       	ldi	r24, 0x83	; 131
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	display.printNumI(roundStreak, 260, 80); 
    23ec:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <roundStreak>
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	68 94       	set
    23f8:	cc 24       	eor	r12, r12
    23fa:	c5 f8       	bld	r12, 5
    23fc:	e1 2c       	mov	r14, r1
    23fe:	f1 2c       	mov	r15, r1
    2400:	00 e5       	ldi	r16, 0x50	; 80
    2402:	10 e0       	ldi	r17, 0x00	; 0
    2404:	24 e0       	ldi	r18, 0x04	; 4
    2406:	31 e0       	ldi	r19, 0x01	; 1
    2408:	83 e8       	ldi	r24, 0x83	; 131
    240a:	91 e0       	ldi	r25, 0x01	; 1
    240c:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN4UTFT9printNumIEliiic>
	
	display.setFont(SmallFont);
    2410:	66 e7       	ldi	r22, 0x76	; 118
    2412:	7c e0       	ldi	r23, 0x0C	; 12
    2414:	83 e8       	ldi	r24, 0x83	; 131
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZN4UTFT7setFontEPKh>
	
	if (gameBeaten) display.print("CHALLENGE MODE BEATEN", 80, 120);
    241c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    2420:	88 23       	and	r24, r24
    2422:	61 f0       	breq	.+24     	; 0x243c <_Z9printMenuv+0x150>
    2424:	00 e0       	ldi	r16, 0x00	; 0
    2426:	10 e0       	ldi	r17, 0x00	; 0
    2428:	28 e7       	ldi	r18, 0x78	; 120
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e5       	ldi	r20, 0x50	; 80
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	66 e2       	ldi	r22, 0x26	; 38
    2432:	71 e0       	ldi	r23, 0x01	; 1
    2434:	83 e8       	ldi	r24, 0x83	; 131
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	
    display.drawRect(CASUAL_X1, BUTTONS_Y1, CASUAL_X2, BUTTONS_Y2);
    243c:	06 ee       	ldi	r16, 0xE6	; 230
    243e:	10 e0       	ldi	r17, 0x00	; 0
    2440:	24 e6       	ldi	r18, 0x64	; 100
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	46 e9       	ldi	r20, 0x96	; 150
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	6a e0       	ldi	r22, 0x0A	; 10
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	83 e8       	ldi	r24, 0x83	; 131
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN4UTFT8drawRectEiiii>
	display.print("CASUAL", CASUAL_TEXT_X, BUTTONS_TEXT_Y);
    2454:	00 e0       	ldi	r16, 0x00	; 0
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	24 eb       	ldi	r18, 0xB4	; 180
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	43 e2       	ldi	r20, 0x23	; 35
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	6c e3       	ldi	r22, 0x3C	; 60
    2462:	71 e0       	ldi	r23, 0x01	; 1
    2464:	83 e8       	ldi	r24, 0x83	; 131
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	
	display.drawRect(CHALLENGE_X1, BUTTONS_Y1, CHALLENGE_X2, BUTTONS_Y2);
    246c:	06 ee       	ldi	r16, 0xE6	; 230
    246e:	10 e0       	ldi	r17, 0x00	; 0
    2470:	28 ec       	ldi	r18, 0xC8	; 200
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	46 e9       	ldi	r20, 0x96	; 150
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	6e e6       	ldi	r22, 0x6E	; 110
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	83 e8       	ldi	r24, 0x83	; 131
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN4UTFT8drawRectEiiii>
	display.print("CHALLENGE", CHALLENGE_TEXT_X, BUTTONS_TEXT_Y);
    2484:	00 e0       	ldi	r16, 0x00	; 0
    2486:	10 e0       	ldi	r17, 0x00	; 0
    2488:	24 eb       	ldi	r18, 0xB4	; 180
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	48 e7       	ldi	r20, 0x78	; 120
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	63 e4       	ldi	r22, 0x43	; 67
    2492:	71 e0       	ldi	r23, 0x01	; 1
    2494:	83 e8       	ldi	r24, 0x83	; 131
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	
	display.drawRect(RESET_X1, BUTTONS_Y1, RESET_X2, BUTTONS_Y2);
    249c:	06 ee       	ldi	r16, 0xE6	; 230
    249e:	10 e0       	ldi	r17, 0x00	; 0
    24a0:	26 e3       	ldi	r18, 0x36	; 54
    24a2:	31 e0       	ldi	r19, 0x01	; 1
    24a4:	46 e9       	ldi	r20, 0x96	; 150
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	6c ed       	ldi	r22, 0xDC	; 220
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	83 e8       	ldi	r24, 0x83	; 131
    24ae:	91 e0       	ldi	r25, 0x01	; 1
    24b0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN4UTFT8drawRectEiiii>
	display.print("RESET", RESET_TEXT_X, BUTTONS_TEXT_Y);	
    24b4:	00 e0       	ldi	r16, 0x00	; 0
    24b6:	10 e0       	ldi	r17, 0x00	; 0
    24b8:	24 eb       	ldi	r18, 0xB4	; 180
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	45 ef       	ldi	r20, 0xF5	; 245
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	6d e4       	ldi	r22, 0x4D	; 77
    24c2:	71 e0       	ldi	r23, 0x01	; 1
    24c4:	83 e8       	ldi	r24, 0x83	; 131
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
	
	display.setFont(BigFont);
    24cc:	62 e9       	ldi	r22, 0x92	; 146
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	83 e8       	ldi	r24, 0x83	; 131
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZN4UTFT7setFontEPKh>
}
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	ff 90       	pop	r15
    24de:	ef 90       	pop	r14
    24e0:	cf 90       	pop	r12
    24e2:	08 95       	ret

000024e4 <_Z12menuGetInputv>:


uint8_t menuGetInput() {	
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
	while(!Touched()); 
    24e8:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z7Touchedv>
    24ec:	88 23       	and	r24, r24
    24ee:	e1 f3       	breq	.-8      	; 0x24e8 <_Z12menuGetInputv+0x4>
	uint16_t x = getX();
    24f0:	0e 94 af 09 	call	0x135e	; 0x135e <_Z4getXv>
    24f4:	ec 01       	movw	r28, r24
	uint16_t y = getY();      
    24f6:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_Z4getYv>
	
	if ((x > CASUAL_X1) && (x < CASUAL_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 1;
    24fa:	9e 01       	movw	r18, r28
    24fc:	2b 50       	subi	r18, 0x0B	; 11
    24fe:	31 09       	sbc	r19, r1
    2500:	29 35       	cpi	r18, 0x59	; 89
    2502:	31 05       	cpc	r19, r1
    2504:	30 f4       	brcc	.+12     	; 0x2512 <_Z12menuGetInputv+0x2e>
    2506:	87 39       	cpi	r24, 0x97	; 151
    2508:	91 05       	cpc	r25, r1
    250a:	18 f0       	brcs	.+6      	; 0x2512 <_Z12menuGetInputv+0x2e>
    250c:	86 3e       	cpi	r24, 0xE6	; 230
    250e:	91 05       	cpc	r25, r1
    2510:	c8 f0       	brcs	.+50     	; 0x2544 <_Z12menuGetInputv+0x60>
	else if ((x > CHALLENGE_X1) && (x < CHALLENGE_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 2;
    2512:	9e 01       	movw	r18, r28
    2514:	2f 56       	subi	r18, 0x6F	; 111
    2516:	31 09       	sbc	r19, r1
    2518:	29 35       	cpi	r18, 0x59	; 89
    251a:	31 05       	cpc	r19, r1
    251c:	30 f4       	brcc	.+12     	; 0x252a <_Z12menuGetInputv+0x46>
    251e:	87 39       	cpi	r24, 0x97	; 151
    2520:	91 05       	cpc	r25, r1
    2522:	18 f0       	brcs	.+6      	; 0x252a <_Z12menuGetInputv+0x46>
    2524:	86 3e       	cpi	r24, 0xE6	; 230
    2526:	91 05       	cpc	r25, r1
    2528:	78 f0       	brcs	.+30     	; 0x2548 <_Z12menuGetInputv+0x64>
	else if ((x > RESET_X1) && (x < RESET_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 3;
    252a:	cd 5d       	subi	r28, 0xDD	; 221
    252c:	d1 09       	sbc	r29, r1
    252e:	c9 35       	cpi	r28, 0x59	; 89
    2530:	d1 05       	cpc	r29, r1
    2532:	60 f4       	brcc	.+24     	; 0x254c <_Z12menuGetInputv+0x68>
    2534:	87 39       	cpi	r24, 0x97	; 151
    2536:	91 05       	cpc	r25, r1
    2538:	58 f0       	brcs	.+22     	; 0x2550 <_Z12menuGetInputv+0x6c>
    253a:	86 3e       	cpi	r24, 0xE6	; 230
    253c:	91 05       	cpc	r25, r1
    253e:	50 f0       	brcs	.+20     	; 0x2554 <_Z12menuGetInputv+0x70>
	else return 0;
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	09 c0       	rjmp	.+18     	; 0x2556 <_Z12menuGetInputv+0x72>
uint8_t menuGetInput() {	
	while(!Touched()); 
	uint16_t x = getX();
	uint16_t y = getY();      
	
	if ((x > CASUAL_X1) && (x < CASUAL_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	07 c0       	rjmp	.+14     	; 0x2556 <_Z12menuGetInputv+0x72>
	else if ((x > CHALLENGE_X1) && (x < CHALLENGE_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 2;
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <_Z12menuGetInputv+0x72>
	else if ((x > RESET_X1) && (x < RESET_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 3;
	else return 0;
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <_Z12menuGetInputv+0x72>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	01 c0       	rjmp	.+2      	; 0x2556 <_Z12menuGetInputv+0x72>
	uint16_t x = getX();
	uint16_t y = getY();      
	
	if ((x > CASUAL_X1) && (x < CASUAL_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 1;
	else if ((x > CHALLENGE_X1) && (x < CHALLENGE_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 2;
	else if ((x > RESET_X1) && (x < RESET_X2) && (y > BUTTONS_Y1) && (y < BUTTONS_Y2)) return 3;
    2554:	83 e0       	ldi	r24, 0x03	; 3
	else return 0;
} 
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

0000255c <main>:


int main(void) {
	
	//T-IRQ spojen na PINB3 kao ulazni te je nizak samo pri dodiru, inace visok
	DDRB &= ~_BV(T_IRQ);
    255c:	87 b3       	in	r24, 0x17	; 23
    255e:	87 7f       	andi	r24, 0xF7	; 247
    2560:	87 bb       	out	0x17, r24	; 23
	
	// timer za brojanje vremena
	TCCR0 = _BV(WGM01) | _BV(CS02) | _BV(CS00);
    2562:	8d e0       	ldi	r24, 0x0D	; 13
    2564:	83 bf       	out	0x33, r24	; 51
	OCR0 = 72;
    2566:	88 e4       	ldi	r24, 0x48	; 72
    2568:	8c bf       	out	0x3c, r24	; 60
	TIMSK = _BV(OCIE0);
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	89 bf       	out	0x39, r24	; 57
	sei();
    256e:	78 94       	sei

	SPI_Init();
    2570:	0e 94 12 13 	call	0x2624	; 0x2624 <SPI_Init>
	SS_Enable;
    2574:	88 b3       	in	r24, 0x18	; 24
    2576:	8f 7e       	andi	r24, 0xEF	; 239
    2578:	88 bb       	out	0x18, r24	; 24
	
	display.InitLCD(LANDSCAPE);
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	83 e8       	ldi	r24, 0x83	; 131
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <_ZN4UTFT7InitLCDEh>
	display.clrScr();
    2584:	83 e8       	ldi	r24, 0x83	; 131
    2586:	91 e0       	ldi	r25, 0x01	; 1
    2588:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN4UTFT6clrScrEv>
	display.setFont(BigFont);
    258c:	62 e9       	ldi	r22, 0x92	; 146
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	83 e8       	ldi	r24, 0x83	; 131
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZN4UTFT7setFontEPKh>
	
	while (1) {		
		if (menu == 0) {
    2598:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <menu>
    259c:	81 11       	cpse	r24, r1
    259e:	36 c0       	rjmp	.+108    	; 0x260c <main+0xb0>
			roundCounter = 0;                                     // resetira broj rundi ako smo na main menu
    25a0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <roundCounter>
			challengeMoves = CHALLENGE_MOVES;                     // resetira broj dozvoljenih poteza u izazovnom nacinu
    25a4:	8d e2       	ldi	r24, 0x2D	; 45
    25a6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <challengeMoves>
			challengeTime = CHALLENGE_TIME;                       // resetira dozvoljeno vrijeme u izazovnom nacinu
    25aa:	88 e7       	ldi	r24, 0x78	; 120
    25ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <challengeTime>
			printMenu();
    25b0:	0e 94 76 11 	call	0x22ec	; 0x22ec <_Z9printMenuv>
    25b4:	2f ef       	ldi	r18, 0xFF	; 255
    25b6:	8f e3       	ldi	r24, 0x3F	; 63
    25b8:	92 e0       	ldi	r25, 0x02	; 2
    25ba:	21 50       	subi	r18, 0x01	; 1
    25bc:	80 40       	sbci	r24, 0x00	; 0
    25be:	90 40       	sbci	r25, 0x00	; 0
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <main+0x5e>
    25c2:	00 c0       	rjmp	.+0      	; 0x25c4 <main+0x68>
    25c4:	00 00       	nop
			_delay_ms(100);
			uint8_t input;                            
			do {
				input = menuGetInput();
    25c6:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_Z12menuGetInputv>
				* 1 - "opusteni" nacin igre
				* 2 - "izazovni" nacin igre - ograniceno vrijeme i broj poteza
				* 3 - obrisi rekorde i ponovno ispisi glavni izbornik da se obrisu ispisani rekordi
				* 0 - ako ne dodirnemo niti jedan gumb
				*/
				if (input == 1) {
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	19 f4       	brne	.+6      	; 0x25d4 <main+0x78>
					challengeMode = 0;
    25ce:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <challengeMode>
    25d2:	16 c0       	rjmp	.+44     	; 0x2600 <main+0xa4>
				} else if (input == 2) {
    25d4:	82 30       	cpi	r24, 0x02	; 2
    25d6:	21 f4       	brne	.+8      	; 0x25e0 <main+0x84>
					challengeMode = 1;
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <challengeMode>
    25de:	10 c0       	rjmp	.+32     	; 0x2600 <main+0xa4>
				} else if (input == 3) {
    25e0:	83 30       	cpi	r24, 0x03	; 3
    25e2:	71 f4       	brne	.+28     	; 0x2600 <main+0xa4>
					resetHighscores();
    25e4:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_Z15resetHighscoresv>
    25e8:	2f ef       	ldi	r18, 0xFF	; 255
    25ea:	8f e3       	ldi	r24, 0x3F	; 63
    25ec:	92 e0       	ldi	r25, 0x02	; 2
    25ee:	21 50       	subi	r18, 0x01	; 1
    25f0:	80 40       	sbci	r24, 0x00	; 0
    25f2:	90 40       	sbci	r25, 0x00	; 0
    25f4:	e1 f7       	brne	.-8      	; 0x25ee <main+0x92>
    25f6:	00 c0       	rjmp	.+0      	; 0x25f8 <main+0x9c>
    25f8:	00 00       	nop
					_delay_ms(100); //debounce cekanjem da nema efekta treperenja
					input = 0;
					printMenu();
    25fa:	0e 94 76 11 	call	0x22ec	; 0x22ec <_Z9printMenuv>
				} else if (input == 2) {
					challengeMode = 1;
				} else if (input == 3) {
					resetHighscores();
					_delay_ms(100); //debounce cekanjem da nema efekta treperenja
					input = 0;
    25fe:	80 e0       	ldi	r24, 0x00	; 0
					printMenu();
				}
			} while (input == 0);  // uvijek naprije otvori glavni izbornik i cekaj dok ne pokrenemo igru
    2600:	88 23       	and	r24, r24
    2602:	09 f3       	breq	.-62     	; 0x25c6 <main+0x6a>
			menu = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <menu>
    260a:	c6 cf       	rjmp	.-116    	; 0x2598 <main+0x3c>
		} else if (menu == 1) {
    260c:	88 23       	and	r24, r24
    260e:	21 f2       	breq	.-120    	; 0x2598 <main+0x3c>
			memoryGame();  //pokreni igru
    2610:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_Z10memoryGamev>
    2614:	c1 cf       	rjmp	.-126    	; 0x2598 <main+0x3c>

00002616 <_GLOBAL__sub_I_display>:
		}
	}
}
    2616:	6f ef       	ldi	r22, 0xFF	; 255
    2618:	7f ef       	ldi	r23, 0xFF	; 255
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 9f 09 	call	0x133e	; 0x133e <_Z41__static_initialization_and_destruction_0ii>
    2622:	08 95       	ret

00002624 <SPI_Init>:
#include "SPI_Master_H_file.h"				/* Include SPI Master header file */


void SPI_Init()								/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);		/* Make MOSI, SCK, 0th pin direction as output pins */
    2624:	87 b3       	in	r24, 0x17	; 23
    2626:	80 6b       	ori	r24, 0xB0	; 176
    2628:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);						/* Make MISO pin as input pin */
    262a:	87 b3       	in	r24, 0x17	; 23
    262c:	8f 7b       	andi	r24, 0xBF	; 191
    262e:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS);						/* Disable slave initially by making high on SS pin */
    2630:	88 b3       	in	r24, 0x18	; 24
    2632:	80 61       	ori	r24, 0x10	; 16
    2634:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI, Enable in master mode, with Fosc/16 SCK frequency */
    2636:	81 e5       	ldi	r24, 0x51	; 81
    2638:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);					/* Disable speed doubler */
    263a:	8e b1       	in	r24, 0x0e	; 14
    263c:	8e 7f       	andi	r24, 0xFE	; 254
    263e:	8e b9       	out	0x0e, r24	; 14
    2640:	08 95       	ret

00002642 <SPI_Write>:
}

void SPI_Write(char data)					/* SPI write data function */
{
	char flush_buffer;
	SPDR = data;							/* Write data to SPI data register */
    2642:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
    2644:	77 9b       	sbis	0x0e, 7	; 14
    2646:	fe cf       	rjmp	.-4      	; 0x2644 <SPI_Write+0x2>
	flush_buffer = SPDR;					/* Flush received data */
    2648:	8f b1       	in	r24, 0x0f	; 15
    264a:	08 95       	ret

0000264c <SPI_Read>:
/* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
}

char SPI_Read()								/* SPI read data function */
{
	SPDR = 0xFF;
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
    2650:	77 9b       	sbis	0x0e, 7	; 14
    2652:	fe cf       	rjmp	.-4      	; 0x2650 <SPI_Read+0x4>
	return(SPDR);							/* return received data */
    2654:	8f b1       	in	r24, 0x0f	; 15
}
    2656:	08 95       	ret

00002658 <SSD1289_init>:



void SSD1289_init()
{	
	DATA_PORT_LOW_DDR = 0xff;
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	81 bb       	out	0x11, r24	; 17
	DATA_PORT_HIGH_DDR = 0xff;
    265c:	8a bb       	out	0x1a, r24	; 26
			
	RS_PORT_DDR |= _BV( RS_PIN);
    265e:	84 b3       	in	r24, 0x14	; 20
    2660:	80 68       	ori	r24, 0x80	; 128
    2662:	84 bb       	out	0x14, r24	; 20
				
	WR_PORT_DDR |= _BV(WR_PIN);
    2664:	84 b3       	in	r24, 0x14	; 20
    2666:	80 64       	ori	r24, 0x40	; 64
    2668:	84 bb       	out	0x14, r24	; 20

	CS_PORT_DDR |= _BV(CS_PIN);
    266a:	84 b3       	in	r24, 0x14	; 20
    266c:	81 60       	ori	r24, 0x01	; 1
    266e:	84 bb       	out	0x14, r24	; 20
		
	RD_PORT_DDR |= _BV(RD_PIN);
    2670:	87 b3       	in	r24, 0x17	; 23
    2672:	81 60       	ori	r24, 0x01	; 1
    2674:	87 bb       	out	0x17, r24	; 23
	RD_PORT |= _BV(RD_PIN);
    2676:	88 b3       	in	r24, 0x18	; 24
    2678:	81 60       	ori	r24, 0x01	; 1
    267a:	88 bb       	out	0x18, r24	; 24
		
	RESET_PORT_DDR |= _BV(RESET_PIN);
    267c:	84 b3       	in	r24, 0x14	; 20
    267e:	82 60       	ori	r24, 0x02	; 2
    2680:	84 bb       	out	0x14, r24	; 20
		
	BACK_LIGHT_PORT |= _BV(BACK_LIGHT_PIN);
    2682:	88 b3       	in	r24, 0x18	; 24
    2684:	82 60       	ori	r24, 0x02	; 2
    2686:	88 bb       	out	0x18, r24	; 24
	
	BACK_LIGHT_DDR |= _BV(BACK_LIGHT_PIN);			
    2688:	87 b3       	in	r24, 0x17	; 23
    268a:	82 60       	ori	r24, 0x02	; 2
    268c:	87 bb       	out	0x17, r24	; 23
	
	sbi(RESET_PORT, RESET_PIN);
    268e:	85 b3       	in	r24, 0x15	; 21
    2690:	82 60       	ori	r24, 0x02	; 2
    2692:	85 bb       	out	0x15, r24	; 21
    2694:	8f ef       	ldi	r24, 0xFF	; 255
    2696:	93 e2       	ldi	r25, 0x23	; 35
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <SSD1289_init+0x40>
    269c:	00 c0       	rjmp	.+0      	; 0x269e <SSD1289_init+0x46>
    269e:	00 00       	nop
	_delay_ms(5);
	cbi(RESET_PORT, RESET_PIN);
    26a0:	85 b3       	in	r24, 0x15	; 21
    26a2:	8d 7f       	andi	r24, 0xFD	; 253
    26a4:	85 bb       	out	0x15, r24	; 21
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	9b e6       	ldi	r25, 0x6B	; 107
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <SSD1289_init+0x52>
    26ae:	00 c0       	rjmp	.+0      	; 0x26b0 <SSD1289_init+0x58>
    26b0:	00 00       	nop
	_delay_ms(15);
	sbi(RESET_PORT, RESET_PIN);
    26b2:	85 b3       	in	r24, 0x15	; 21
    26b4:	82 60       	ori	r24, 0x02	; 2
    26b6:	85 bb       	out	0x15, r24	; 21
    26b8:	8f ef       	ldi	r24, 0xFF	; 255
    26ba:	9b e6       	ldi	r25, 0x6B	; 107
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <SSD1289_init+0x64>
    26c0:	00 c0       	rjmp	.+0      	; 0x26c2 <SSD1289_init+0x6a>
    26c2:	00 00       	nop
	_delay_ms(15);

	cbi(CS_PORT, CS_PIN);
    26c4:	85 b3       	in	r24, 0x15	; 21
    26c6:	8e 7f       	andi	r24, 0xFE	; 254
    26c8:	85 bb       	out	0x15, r24	; 21

	LCD_Write_COM_DATA(0x00,0x0001);
    26ca:	61 e0       	ldi	r22, 0x01	; 1
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x03,0xA8A4);
    26d4:	64 ea       	ldi	r22, 0xA4	; 164
    26d6:	78 ea       	ldi	r23, 0xA8	; 168
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0C,0x0000);
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	8c e0       	ldi	r24, 0x0C	; 12
    26e4:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0D,0x080C);
    26e8:	6c e0       	ldi	r22, 0x0C	; 12
    26ea:	78 e0       	ldi	r23, 0x08	; 8
    26ec:	8d e0       	ldi	r24, 0x0D	; 13
    26ee:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0E,0x2B00);
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	7b e2       	ldi	r23, 0x2B	; 43
    26f6:	8e e0       	ldi	r24, 0x0E	; 14
    26f8:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x1E,0x00B7);
    26fc:	67 eb       	ldi	r22, 0xB7	; 183
    26fe:	70 e0       	ldi	r23, 0x00	; 0
    2700:	8e e1       	ldi	r24, 0x1E	; 30
    2702:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x01,0x2B3F);
    2706:	6f e3       	ldi	r22, 0x3F	; 63
    2708:	7b e2       	ldi	r23, 0x2B	; 43
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x02,0x0600);
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	76 e0       	ldi	r23, 0x06	; 6
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x10,0x0000);
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	80 e1       	ldi	r24, 0x10	; 16
    2720:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x11,0x6070);
    2724:	60 e7       	ldi	r22, 0x70	; 112
    2726:	70 e6       	ldi	r23, 0x60	; 96
    2728:	81 e1       	ldi	r24, 0x11	; 17
    272a:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x05,0x0000);
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	85 e0       	ldi	r24, 0x05	; 5
    2734:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x06,0x0000);
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	86 e0       	ldi	r24, 0x06	; 6
    273e:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x16,0xEF1C);
    2742:	6c e1       	ldi	r22, 0x1C	; 28
    2744:	7f ee       	ldi	r23, 0xEF	; 239
    2746:	86 e1       	ldi	r24, 0x16	; 22
    2748:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x17,0x0003);
    274c:	63 e0       	ldi	r22, 0x03	; 3
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	87 e1       	ldi	r24, 0x17	; 23
    2752:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x07,0x0233);
    2756:	63 e3       	ldi	r22, 0x33	; 51
    2758:	72 e0       	ldi	r23, 0x02	; 2
    275a:	87 e0       	ldi	r24, 0x07	; 7
    275c:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0B,0x0000);
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	8b e0       	ldi	r24, 0x0B	; 11
    2766:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0F,0x0000);
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	8f e0       	ldi	r24, 0x0F	; 15
    2770:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x41,0x0000);
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	81 e4       	ldi	r24, 0x41	; 65
    277a:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x42,0x0000);
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	82 e4       	ldi	r24, 0x42	; 66
    2784:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x48,0x0000);
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	88 e4       	ldi	r24, 0x48	; 72
    278e:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x49,0x013F);
    2792:	6f e3       	ldi	r22, 0x3F	; 63
    2794:	71 e0       	ldi	r23, 0x01	; 1
    2796:	89 e4       	ldi	r24, 0x49	; 73
    2798:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4A,0x0000);
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	8a e4       	ldi	r24, 0x4A	; 74
    27a2:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4B,0x0000);
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	8b e4       	ldi	r24, 0x4B	; 75
    27ac:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x44,0xEF00);
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	7f ee       	ldi	r23, 0xEF	; 239
    27b4:	84 e4       	ldi	r24, 0x44	; 68
    27b6:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x45,0x0000);
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	85 e4       	ldi	r24, 0x45	; 69
    27c0:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x46,0x013F);
    27c4:	6f e3       	ldi	r22, 0x3F	; 63
    27c6:	71 e0       	ldi	r23, 0x01	; 1
    27c8:	86 e4       	ldi	r24, 0x46	; 70
    27ca:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x30,0x0707);
    27ce:	67 e0       	ldi	r22, 0x07	; 7
    27d0:	77 e0       	ldi	r23, 0x07	; 7
    27d2:	80 e3       	ldi	r24, 0x30	; 48
    27d4:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x31,0x0204);
    27d8:	64 e0       	ldi	r22, 0x04	; 4
    27da:	72 e0       	ldi	r23, 0x02	; 2
    27dc:	81 e3       	ldi	r24, 0x31	; 49
    27de:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x32,0x0204);
    27e2:	64 e0       	ldi	r22, 0x04	; 4
    27e4:	72 e0       	ldi	r23, 0x02	; 2
    27e6:	82 e3       	ldi	r24, 0x32	; 50
    27e8:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x33,0x0502);
    27ec:	62 e0       	ldi	r22, 0x02	; 2
    27ee:	75 e0       	ldi	r23, 0x05	; 5
    27f0:	83 e3       	ldi	r24, 0x33	; 51
    27f2:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x34,0x0507);
    27f6:	67 e0       	ldi	r22, 0x07	; 7
    27f8:	75 e0       	ldi	r23, 0x05	; 5
    27fa:	84 e3       	ldi	r24, 0x34	; 52
    27fc:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x35,0x0204);
    2800:	64 e0       	ldi	r22, 0x04	; 4
    2802:	72 e0       	ldi	r23, 0x02	; 2
    2804:	85 e3       	ldi	r24, 0x35	; 53
    2806:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x36,0x0204);
    280a:	64 e0       	ldi	r22, 0x04	; 4
    280c:	72 e0       	ldi	r23, 0x02	; 2
    280e:	86 e3       	ldi	r24, 0x36	; 54
    2810:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x37,0x0502);
    2814:	62 e0       	ldi	r22, 0x02	; 2
    2816:	75 e0       	ldi	r23, 0x05	; 5
    2818:	87 e3       	ldi	r24, 0x37	; 55
    281a:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3A,0x0302);
    281e:	62 e0       	ldi	r22, 0x02	; 2
    2820:	73 e0       	ldi	r23, 0x03	; 3
    2822:	8a e3       	ldi	r24, 0x3A	; 58
    2824:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3B,0x0302);
    2828:	62 e0       	ldi	r22, 0x02	; 2
    282a:	73 e0       	ldi	r23, 0x03	; 3
    282c:	8b e3       	ldi	r24, 0x3B	; 59
    282e:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x23,0x0000);
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	83 e2       	ldi	r24, 0x23	; 35
    2838:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x24,0x0000);
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	84 e2       	ldi	r24, 0x24	; 36
    2842:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x25,0x8000);
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	70 e8       	ldi	r23, 0x80	; 128
    284a:	85 e2       	ldi	r24, 0x25	; 37
    284c:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4f,0x0000);
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	8f e4       	ldi	r24, 0x4F	; 79
    2856:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4e,0x0000);
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	8e e4       	ldi	r24, 0x4E	; 78
    2860:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
	LCD_Write_COM(0x22);
    2864:	82 e2       	ldi	r24, 0x22	; 34
    2866:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCD_Write_COM>


	sbi(CS_PORT, CS_PIN);
    286a:	85 b3       	in	r24, 0x15	; 21
    286c:	81 60       	ori	r24, 0x01	; 1
    286e:	85 bb       	out	0x15, r24	; 21
    2870:	08 95       	ret

00002872 <_ZN4UTFTC1Ev>:
		}
		st[c2+f]=0;
	}

	print(st,x,y);
}
    2872:	4f ee       	ldi	r20, 0xEF	; 239
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	fc 01       	movw	r30, r24
    287c:	45 83       	std	Z+5, r20	; 0x05
    287e:	56 83       	std	Z+6, r21	; 0x06
    2880:	67 83       	std	Z+7, r22	; 0x07
    2882:	70 87       	std	Z+8, r23	; 0x08
    2884:	4f e3       	ldi	r20, 0x3F	; 63
    2886:	51 e0       	ldi	r21, 0x01	; 1
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	41 87       	std	Z+9, r20	; 0x09
    288e:	52 87       	std	Z+10, r21	; 0x0a
    2890:	63 87       	std	Z+11, r22	; 0x0b
    2892:	74 87       	std	Z+12, r23	; 0x0c
    2894:	0e 94 2c 13 	call	0x2658	; 0x2658 <SSD1289_init>
    2898:	08 95       	ret

0000289a <_ZN4UTFT5setXYEjjjj>:
    289a:	ef 92       	push	r14
    289c:	ff 92       	push	r15
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	eb 01       	movw	r28, r22
    28a8:	e4 2e       	mov	r14, r20
    28aa:	f5 2e       	mov	r15, r21
    28ac:	fc 01       	movw	r30, r24
    28ae:	44 81       	ldd	r20, Z+4	; 0x04
    28b0:	41 30       	cpi	r20, 0x01	; 1
    28b2:	89 f4       	brne	.+34     	; 0x28d6 <_ZN4UTFT5setXYEjjjj+0x3c>
    28b4:	81 85       	ldd	r24, Z+9	; 0x09
    28b6:	92 85       	ldd	r25, Z+10	; 0x0a
    28b8:	a3 85       	ldd	r26, Z+11	; 0x0b
    28ba:	b4 85       	ldd	r27, Z+12	; 0x0c
    28bc:	ac 01       	movw	r20, r24
    28be:	46 1b       	sub	r20, r22
    28c0:	57 0b       	sbc	r21, r23
    28c2:	82 1b       	sub	r24, r18
    28c4:	93 0b       	sbc	r25, r19
    28c6:	20 2f       	mov	r18, r16
    28c8:	31 2f       	mov	r19, r17
    28ca:	04 2f       	mov	r16, r20
    28cc:	15 2f       	mov	r17, r21
    28ce:	ce 2d       	mov	r28, r14
    28d0:	df 2d       	mov	r29, r15
    28d2:	e8 2e       	mov	r14, r24
    28d4:	f9 2e       	mov	r15, r25
    28d6:	32 2f       	mov	r19, r18
    28d8:	22 27       	eor	r18, r18
    28da:	be 01       	movw	r22, r28
    28dc:	62 0f       	add	r22, r18
    28de:	73 1f       	adc	r23, r19
    28e0:	84 e4       	ldi	r24, 0x44	; 68
    28e2:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    28e6:	6e 2d       	mov	r22, r14
    28e8:	7f 2d       	mov	r23, r15
    28ea:	85 e4       	ldi	r24, 0x45	; 69
    28ec:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    28f0:	60 2f       	mov	r22, r16
    28f2:	71 2f       	mov	r23, r17
    28f4:	86 e4       	ldi	r24, 0x46	; 70
    28f6:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    28fa:	be 01       	movw	r22, r28
    28fc:	8e e4       	ldi	r24, 0x4E	; 78
    28fe:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2902:	6e 2d       	mov	r22, r14
    2904:	7f 2d       	mov	r23, r15
    2906:	8f e4       	ldi	r24, 0x4F	; 79
    2908:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    290c:	82 e2       	ldi	r24, 0x22	; 34
    290e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCD_Write_COM>
    2912:	85 b3       	in	r24, 0x15	; 21
    2914:	80 68       	ori	r24, 0x80	; 128
    2916:	85 bb       	out	0x15, r24	; 21
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	08 95       	ret

00002926 <_ZN4UTFT8fillRectEiiii>:
    2926:	8f 92       	push	r8
    2928:	9f 92       	push	r9
    292a:	af 92       	push	r10
    292c:	bf 92       	push	r11
    292e:	cf 92       	push	r12
    2930:	df 92       	push	r13
    2932:	ef 92       	push	r14
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	4c 01       	movw	r8, r24
    2940:	5b 01       	movw	r10, r22
    2942:	7a 01       	movw	r14, r20
    2944:	69 01       	movw	r12, r18
    2946:	e8 01       	movw	r28, r16
    2948:	26 17       	cp	r18, r22
    294a:	37 07       	cpc	r19, r23
    294c:	24 f4       	brge	.+8      	; 0x2956 <_ZN4UTFT8fillRectEiiii+0x30>
    294e:	8b 2d       	mov	r24, r11
    2950:	59 01       	movw	r10, r18
    2952:	c6 2e       	mov	r12, r22
    2954:	d8 2e       	mov	r13, r24
    2956:	ce 15       	cp	r28, r14
    2958:	df 05       	cpc	r29, r15
    295a:	2c f4       	brge	.+10     	; 0x2966 <_ZN4UTFT8fillRectEiiii+0x40>
    295c:	9e 2d       	mov	r25, r14
    295e:	8f 2d       	mov	r24, r15
    2960:	7e 01       	movw	r14, r28
    2962:	c9 2f       	mov	r28, r25
    2964:	d8 2f       	mov	r29, r24
    2966:	85 b3       	in	r24, 0x15	; 21
    2968:	8e 7f       	andi	r24, 0xFE	; 254
    296a:	85 bb       	out	0x15, r24	; 21
    296c:	8e 01       	movw	r16, r28
    296e:	96 01       	movw	r18, r12
    2970:	a7 01       	movw	r20, r14
    2972:	b5 01       	movw	r22, r10
    2974:	c4 01       	movw	r24, r8
    2976:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN4UTFT5setXYEjjjj>
    297a:	f4 01       	movw	r30, r8
    297c:	80 81       	ld	r24, Z
    297e:	8b bb       	out	0x1b, r24	; 27
    2980:	81 81       	ldd	r24, Z+1	; 0x01
    2982:	82 bb       	out	0x12, r24	; 18
    2984:	96 01       	movw	r18, r12
    2986:	2a 19       	sub	r18, r10
    2988:	3b 09       	sbc	r19, r11
    298a:	c9 01       	movw	r24, r18
    298c:	33 0f       	add	r19, r19
    298e:	aa 0b       	sbc	r26, r26
    2990:	bb 0b       	sbc	r27, r27
    2992:	9c 01       	movw	r18, r24
    2994:	ad 01       	movw	r20, r26
    2996:	2f 5f       	subi	r18, 0xFF	; 255
    2998:	3f 4f       	sbci	r19, 0xFF	; 255
    299a:	4f 4f       	sbci	r20, 0xFF	; 255
    299c:	5f 4f       	sbci	r21, 0xFF	; 255
    299e:	be 01       	movw	r22, r28
    29a0:	6e 19       	sub	r22, r14
    29a2:	7f 09       	sbc	r23, r15
    29a4:	cb 01       	movw	r24, r22
    29a6:	77 0f       	add	r23, r23
    29a8:	aa 0b       	sbc	r26, r26
    29aa:	bb 0b       	sbc	r27, r27
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	6f 5f       	subi	r22, 0xFF	; 255
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	8f 4f       	sbci	r24, 0xFF	; 255
    29b6:	9f 4f       	sbci	r25, 0xFF	; 255
    29b8:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <__mulsi3>
    29bc:	0e 94 31 09 	call	0x1262	; 0x1262 <fastfill>
    29c0:	8f ef       	ldi	r24, 0xFF	; 255
    29c2:	82 bb       	out	0x12, r24	; 18
    29c4:	8b bb       	out	0x1b, r24	; 27
    29c6:	85 b3       	in	r24, 0x15	; 21
    29c8:	8e 7f       	andi	r24, 0xFE	; 254
    29ca:	85 bb       	out	0x15, r24	; 21
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	cf 90       	pop	r12
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	9f 90       	pop	r9
    29e2:	8f 90       	pop	r8
    29e4:	08 95       	ret

000029e6 <_ZN4UTFT6clrScrEv>:
    29e6:	85 b3       	in	r24, 0x15	; 21
    29e8:	8e 7f       	andi	r24, 0xFE	; 254
    29ea:	85 bb       	out	0x15, r24	; 21
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	7f ee       	ldi	r23, 0xEF	; 239
    29f0:	84 e4       	ldi	r24, 0x44	; 68
    29f2:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	85 e4       	ldi	r24, 0x45	; 69
    29fc:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2a00:	6f e3       	ldi	r22, 0x3F	; 63
    2a02:	71 e0       	ldi	r23, 0x01	; 1
    2a04:	86 e4       	ldi	r24, 0x46	; 70
    2a06:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	8e e4       	ldi	r24, 0x4E	; 78
    2a10:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	8f e4       	ldi	r24, 0x4F	; 79
    2a1a:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2a1e:	68 e7       	ldi	r22, 0x78	; 120
    2a20:	70 e6       	ldi	r23, 0x60	; 96
    2a22:	81 e1       	ldi	r24, 0x11	; 17
    2a24:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2a28:	82 e2       	ldi	r24, 0x22	; 34
    2a2a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCD_Write_COM>
    2a2e:	85 b3       	in	r24, 0x15	; 21
    2a30:	80 68       	ori	r24, 0x80	; 128
    2a32:	85 bb       	out	0x15, r24	; 21
    2a34:	12 ba       	out	0x12, r1	; 18
    2a36:	1b ba       	out	0x1b, r1	; 27
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	7c e2       	ldi	r23, 0x2C	; 44
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 31 09 	call	0x1262	; 0x1262 <fastfill>
    2a44:	8f ef       	ldi	r24, 0xFF	; 255
    2a46:	82 bb       	out	0x12, r24	; 18
    2a48:	8b bb       	out	0x1b, r24	; 27
    2a4a:	85 b3       	in	r24, 0x15	; 21
    2a4c:	8e 7f       	andi	r24, 0xFE	; 254
    2a4e:	85 bb       	out	0x15, r24	; 21
    2a50:	08 95       	ret

00002a52 <_ZN4UTFT8setColorEhhh>:
    2a52:	e4 2f       	mov	r30, r20
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	f5 95       	asr	r31
    2a58:	e7 95       	ror	r30
    2a5a:	f5 95       	asr	r31
    2a5c:	e7 95       	ror	r30
    2a5e:	f5 95       	asr	r31
    2a60:	e7 95       	ror	r30
    2a62:	f5 95       	asr	r31
    2a64:	e7 95       	ror	r30
    2a66:	f5 95       	asr	r31
    2a68:	e7 95       	ror	r30
    2a6a:	68 7f       	andi	r22, 0xF8	; 248
    2a6c:	e6 2b       	or	r30, r22
    2a6e:	dc 01       	movw	r26, r24
    2a70:	ec 93       	st	X, r30
    2a72:	4c 71       	andi	r20, 0x1C	; 28
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	44 0f       	add	r20, r20
    2a78:	55 1f       	adc	r21, r21
    2a7a:	44 0f       	add	r20, r20
    2a7c:	55 1f       	adc	r21, r21
    2a7e:	44 0f       	add	r20, r20
    2a80:	55 1f       	adc	r21, r21
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	35 95       	asr	r19
    2a86:	27 95       	ror	r18
    2a88:	35 95       	asr	r19
    2a8a:	27 95       	ror	r18
    2a8c:	35 95       	asr	r19
    2a8e:	27 95       	ror	r18
    2a90:	42 2b       	or	r20, r18
    2a92:	11 96       	adiw	r26, 0x01	; 1
    2a94:	4c 93       	st	X, r20
    2a96:	08 95       	ret

00002a98 <_ZN4UTFT12setBackColorEhhh>:
    2a98:	e4 2f       	mov	r30, r20
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	f5 95       	asr	r31
    2a9e:	e7 95       	ror	r30
    2aa0:	f5 95       	asr	r31
    2aa2:	e7 95       	ror	r30
    2aa4:	f5 95       	asr	r31
    2aa6:	e7 95       	ror	r30
    2aa8:	f5 95       	asr	r31
    2aaa:	e7 95       	ror	r30
    2aac:	f5 95       	asr	r31
    2aae:	e7 95       	ror	r30
    2ab0:	68 7f       	andi	r22, 0xF8	; 248
    2ab2:	e6 2b       	or	r30, r22
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	12 96       	adiw	r26, 0x02	; 2
    2ab8:	ec 93       	st	X, r30
    2aba:	12 97       	sbiw	r26, 0x02	; 2
    2abc:	4c 71       	andi	r20, 0x1C	; 28
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	44 0f       	add	r20, r20
    2ac2:	55 1f       	adc	r21, r21
    2ac4:	44 0f       	add	r20, r20
    2ac6:	55 1f       	adc	r21, r21
    2ac8:	44 0f       	add	r20, r20
    2aca:	55 1f       	adc	r21, r21
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	35 95       	asr	r19
    2ad0:	27 95       	ror	r18
    2ad2:	35 95       	asr	r19
    2ad4:	27 95       	ror	r18
    2ad6:	35 95       	asr	r19
    2ad8:	27 95       	ror	r18
    2ada:	42 2b       	or	r20, r18
    2adc:	13 96       	adiw	r26, 0x03	; 3
    2ade:	4c 93       	st	X, r20
    2ae0:	08 95       	ret

00002ae2 <_ZN4UTFT7InitLCDEh>:
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	ec 01       	movw	r28, r24
    2ae8:	6c 83       	std	Y+4, r22	; 0x04
    2aea:	2f ef       	ldi	r18, 0xFF	; 255
    2aec:	4f ef       	ldi	r20, 0xFF	; 255
    2aee:	6f ef       	ldi	r22, 0xFF	; 255
    2af0:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN4UTFT8setColorEhhh>
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	ce 01       	movw	r24, r28
    2afc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN4UTFT12setBackColorEhhh>
    2b00:	1e 86       	std	Y+14, r1	; 0x0e
    2b02:	1d 86       	std	Y+13, r1	; 0x0d
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	08 95       	ret

00002b0a <_ZN4UTFT8setPixelEj>:
    2b0a:	87 2f       	mov	r24, r23
    2b0c:	0e 94 81 09 	call	0x1302	; 0x1302 <LCD_Write_DATA>
    2b10:	08 95       	ret

00002b12 <_ZN4UTFT9drawHLineEiii>:
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	7c 01       	movw	r14, r24
    2b20:	e9 01       	movw	r28, r18
    2b22:	dd 23       	and	r29, r29
    2b24:	2c f4       	brge	.+10     	; 0x2b30 <_ZN4UTFT9drawHLineEiii+0x1e>
    2b26:	62 0f       	add	r22, r18
    2b28:	73 1f       	adc	r23, r19
    2b2a:	d1 95       	neg	r29
    2b2c:	c1 95       	neg	r28
    2b2e:	d1 09       	sbc	r29, r1
    2b30:	85 b3       	in	r24, 0x15	; 21
    2b32:	8e 7f       	andi	r24, 0xFE	; 254
    2b34:	85 bb       	out	0x15, r24	; 21
    2b36:	9b 01       	movw	r18, r22
    2b38:	2c 0f       	add	r18, r28
    2b3a:	3d 1f       	adc	r19, r29
    2b3c:	8a 01       	movw	r16, r20
    2b3e:	c7 01       	movw	r24, r14
    2b40:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN4UTFT5setXYEjjjj>
    2b44:	f7 01       	movw	r30, r14
    2b46:	80 81       	ld	r24, Z
    2b48:	8b bb       	out	0x1b, r24	; 27
    2b4a:	81 81       	ldd	r24, Z+1	; 0x01
    2b4c:	82 bb       	out	0x12, r24	; 18
    2b4e:	be 01       	movw	r22, r28
    2b50:	dd 0f       	add	r29, r29
    2b52:	88 0b       	sbc	r24, r24
    2b54:	99 0b       	sbc	r25, r25
    2b56:	0e 94 31 09 	call	0x1262	; 0x1262 <fastfill>
    2b5a:	8f ef       	ldi	r24, 0xFF	; 255
    2b5c:	82 bb       	out	0x12, r24	; 18
    2b5e:	8b bb       	out	0x1b, r24	; 27
    2b60:	85 b3       	in	r24, 0x15	; 21
    2b62:	81 60       	ori	r24, 0x01	; 1
    2b64:	85 bb       	out	0x15, r24	; 21
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	08 95       	ret

00002b74 <_ZN4UTFT9drawVLineEiii>:
    2b74:	ef 92       	push	r14
    2b76:	ff 92       	push	r15
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	7c 01       	movw	r14, r24
    2b82:	e9 01       	movw	r28, r18
    2b84:	dd 23       	and	r29, r29
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <_ZN4UTFT9drawVLineEiii+0x1e>
    2b88:	42 0f       	add	r20, r18
    2b8a:	53 1f       	adc	r21, r19
    2b8c:	d1 95       	neg	r29
    2b8e:	c1 95       	neg	r28
    2b90:	d1 09       	sbc	r29, r1
    2b92:	85 b3       	in	r24, 0x15	; 21
    2b94:	8e 7f       	andi	r24, 0xFE	; 254
    2b96:	85 bb       	out	0x15, r24	; 21
    2b98:	8a 01       	movw	r16, r20
    2b9a:	0c 0f       	add	r16, r28
    2b9c:	1d 1f       	adc	r17, r29
    2b9e:	9b 01       	movw	r18, r22
    2ba0:	c7 01       	movw	r24, r14
    2ba2:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN4UTFT5setXYEjjjj>
    2ba6:	f7 01       	movw	r30, r14
    2ba8:	80 81       	ld	r24, Z
    2baa:	8b bb       	out	0x1b, r24	; 27
    2bac:	81 81       	ldd	r24, Z+1	; 0x01
    2bae:	82 bb       	out	0x12, r24	; 18
    2bb0:	be 01       	movw	r22, r28
    2bb2:	dd 0f       	add	r29, r29
    2bb4:	88 0b       	sbc	r24, r24
    2bb6:	99 0b       	sbc	r25, r25
    2bb8:	0e 94 31 09 	call	0x1262	; 0x1262 <fastfill>
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	82 bb       	out	0x12, r24	; 18
    2bc0:	8b bb       	out	0x1b, r24	; 27
    2bc2:	85 b3       	in	r24, 0x15	; 21
    2bc4:	81 60       	ori	r24, 0x01	; 1
    2bc6:	85 bb       	out	0x15, r24	; 21
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	ff 90       	pop	r15
    2bd2:	ef 90       	pop	r14
    2bd4:	08 95       	ret

00002bd6 <_ZN4UTFT8drawRectEiiii>:
    2bd6:	8f 92       	push	r8
    2bd8:	9f 92       	push	r9
    2bda:	af 92       	push	r10
    2bdc:	bf 92       	push	r11
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	5c 01       	movw	r10, r24
    2bf0:	7b 01       	movw	r14, r22
    2bf2:	ea 01       	movw	r28, r20
    2bf4:	69 01       	movw	r12, r18
    2bf6:	26 17       	cp	r18, r22
    2bf8:	37 07       	cpc	r19, r23
    2bfa:	24 f4       	brge	.+8      	; 0x2c04 <_ZN4UTFT8drawRectEiiii+0x2e>
    2bfc:	8f 2d       	mov	r24, r15
    2bfe:	79 01       	movw	r14, r18
    2c00:	c6 2e       	mov	r12, r22
    2c02:	d8 2e       	mov	r13, r24
    2c04:	0c 17       	cp	r16, r28
    2c06:	1d 07       	cpc	r17, r29
    2c08:	2c f4       	brge	.+10     	; 0x2c14 <_ZN4UTFT8drawRectEiiii+0x3e>
    2c0a:	9c 2f       	mov	r25, r28
    2c0c:	8d 2f       	mov	r24, r29
    2c0e:	e8 01       	movw	r28, r16
    2c10:	09 2f       	mov	r16, r25
    2c12:	18 2f       	mov	r17, r24
    2c14:	46 01       	movw	r8, r12
    2c16:	8e 18       	sub	r8, r14
    2c18:	9f 08       	sbc	r9, r15
    2c1a:	94 01       	movw	r18, r8
    2c1c:	ae 01       	movw	r20, r28
    2c1e:	b7 01       	movw	r22, r14
    2c20:	c5 01       	movw	r24, r10
    2c22:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN4UTFT9drawHLineEiii>
    2c26:	94 01       	movw	r18, r8
    2c28:	a8 01       	movw	r20, r16
    2c2a:	b7 01       	movw	r22, r14
    2c2c:	c5 01       	movw	r24, r10
    2c2e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN4UTFT9drawHLineEiii>
    2c32:	0c 1b       	sub	r16, r28
    2c34:	1d 0b       	sbc	r17, r29
    2c36:	98 01       	movw	r18, r16
    2c38:	ae 01       	movw	r20, r28
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	c5 01       	movw	r24, r10
    2c3e:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN4UTFT9drawVLineEiii>
    2c42:	98 01       	movw	r18, r16
    2c44:	ae 01       	movw	r20, r28
    2c46:	b6 01       	movw	r22, r12
    2c48:	c5 01       	movw	r24, r10
    2c4a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN4UTFT9drawVLineEiii>
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	ff 90       	pop	r15
    2c58:	ef 90       	pop	r14
    2c5a:	df 90       	pop	r13
    2c5c:	cf 90       	pop	r12
    2c5e:	bf 90       	pop	r11
    2c60:	af 90       	pop	r10
    2c62:	9f 90       	pop	r9
    2c64:	8f 90       	pop	r8
    2c66:	08 95       	ret

00002c68 <_ZN4UTFT9printCharEhii>:
    2c68:	af 92       	push	r10
    2c6a:	bf 92       	push	r11
    2c6c:	cf 92       	push	r12
    2c6e:	df 92       	push	r13
    2c70:	ef 92       	push	r14
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	ec 01       	movw	r28, r24
    2c7e:	7a 01       	movw	r14, r20
    2c80:	89 01       	movw	r16, r18
    2c82:	85 b3       	in	r24, 0x15	; 21
    2c84:	8e 7f       	andi	r24, 0xFE	; 254
    2c86:	85 bb       	out	0x15, r24	; 21
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	81 11       	cpse	r24, r1
    2c8c:	69 c0       	rjmp	.+210    	; 0x2d60 <_ZN4UTFT9printCharEhii+0xf8>
    2c8e:	29 89       	ldd	r18, Y+17	; 0x11
    2c90:	86 2f       	mov	r24, r22
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	82 1b       	sub	r24, r18
    2c96:	91 09       	sbc	r25, r1
    2c98:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c9a:	54 2f       	mov	r21, r20
    2c9c:	56 95       	lsr	r21
    2c9e:	56 95       	lsr	r21
    2ca0:	56 95       	lsr	r21
    2ca2:	28 89       	ldd	r18, Y+16	; 0x10
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	52 9f       	mul	r21, r18
    2ca8:	b0 01       	movw	r22, r0
    2caa:	53 9f       	mul	r21, r19
    2cac:	70 0d       	add	r23, r0
    2cae:	11 24       	eor	r1, r1
    2cb0:	86 9f       	mul	r24, r22
    2cb2:	60 01       	movw	r12, r0
    2cb4:	87 9f       	mul	r24, r23
    2cb6:	d0 0c       	add	r13, r0
    2cb8:	96 9f       	mul	r25, r22
    2cba:	d0 0c       	add	r13, r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	84 e0       	ldi	r24, 0x04	; 4
    2cc0:	c8 0e       	add	r12, r24
    2cc2:	d1 1c       	adc	r13, r1
    2cc4:	c7 01       	movw	r24, r14
    2cc6:	84 0f       	add	r24, r20
    2cc8:	91 1d       	adc	r25, r1
    2cca:	20 0f       	add	r18, r16
    2ccc:	31 1f       	adc	r19, r17
    2cce:	59 01       	movw	r10, r18
    2cd0:	41 e0       	ldi	r20, 0x01	; 1
    2cd2:	a4 1a       	sub	r10, r20
    2cd4:	b1 08       	sbc	r11, r1
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	7f ef       	ldi	r23, 0xFF	; 255
    2cdc:	78 0f       	add	r23, r24
    2cde:	6e 0d       	add	r22, r14
    2ce0:	7f 1d       	adc	r23, r15
    2ce2:	84 e4       	ldi	r24, 0x44	; 68
    2ce4:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2ce8:	b8 01       	movw	r22, r16
    2cea:	85 e4       	ldi	r24, 0x45	; 69
    2cec:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2cf0:	b5 01       	movw	r22, r10
    2cf2:	86 e4       	ldi	r24, 0x46	; 70
    2cf4:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2cf8:	b7 01       	movw	r22, r14
    2cfa:	8e e4       	ldi	r24, 0x4E	; 78
    2cfc:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2d00:	b8 01       	movw	r22, r16
    2d02:	8f e4       	ldi	r24, 0x4F	; 79
    2d04:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2d08:	60 e7       	ldi	r22, 0x70	; 112
    2d0a:	70 e6       	ldi	r23, 0x60	; 96
    2d0c:	81 e1       	ldi	r24, 0x11	; 17
    2d0e:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2d12:	82 e2       	ldi	r24, 0x22	; 34
    2d14:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCD_Write_COM>
    2d18:	85 b3       	in	r24, 0x15	; 21
    2d1a:	80 68       	ori	r24, 0x80	; 128
    2d1c:	85 bb       	out	0x15, r24	; 21
    2d1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	32 2f       	mov	r19, r18
    2d24:	22 27       	eor	r18, r18
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	28 2b       	or	r18, r24
    2d2a:	48 81       	ld	r20, Y
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	54 2f       	mov	r21, r20
    2d30:	44 27       	eor	r20, r20
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	48 2b       	or	r20, r24
    2d36:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d38:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d3a:	6c 0d       	add	r22, r12
    2d3c:	7d 1d       	adc	r23, r13
    2d3e:	88 89       	ldd	r24, Y+16	; 0x10
    2d40:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d42:	89 9f       	mul	r24, r25
    2d44:	c0 01       	movw	r24, r0
    2d46:	11 24       	eor	r1, r1
    2d48:	99 23       	and	r25, r25
    2d4a:	0c f4       	brge	.+2      	; 0x2d4e <_ZN4UTFT9printCharEhii+0xe6>
    2d4c:	07 96       	adiw	r24, 0x07	; 7
    2d4e:	95 95       	asr	r25
    2d50:	87 95       	ror	r24
    2d52:	95 95       	asr	r25
    2d54:	87 95       	ror	r24
    2d56:	95 95       	asr	r25
    2d58:	87 95       	ror	r24
    2d5a:	0e 94 a2 08 	call	0x1144	; 0x1144 <fastbitmap_1bit>
    2d5e:	6f c0       	rjmp	.+222    	; 0x2e3e <_ZN4UTFT9printCharEhii+0x1d6>
    2d60:	29 89       	ldd	r18, Y+17	; 0x11
    2d62:	86 2f       	mov	r24, r22
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	82 1b       	sub	r24, r18
    2d68:	91 09       	sbc	r25, r1
    2d6a:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d6c:	54 2f       	mov	r21, r20
    2d6e:	56 95       	lsr	r21
    2d70:	56 95       	lsr	r21
    2d72:	56 95       	lsr	r21
    2d74:	28 89       	ldd	r18, Y+16	; 0x10
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	52 9f       	mul	r21, r18
    2d7a:	b0 01       	movw	r22, r0
    2d7c:	53 9f       	mul	r21, r19
    2d7e:	70 0d       	add	r23, r0
    2d80:	11 24       	eor	r1, r1
    2d82:	86 9f       	mul	r24, r22
    2d84:	60 01       	movw	r12, r0
    2d86:	87 9f       	mul	r24, r23
    2d88:	d0 0c       	add	r13, r0
    2d8a:	96 9f       	mul	r25, r22
    2d8c:	d0 0c       	add	r13, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	c8 0e       	add	r12, r24
    2d94:	d1 1c       	adc	r13, r1
    2d96:	c7 01       	movw	r24, r14
    2d98:	84 0f       	add	r24, r20
    2d9a:	91 1d       	adc	r25, r1
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	20 0f       	add	r18, r16
    2da0:	31 1f       	adc	r19, r17
    2da2:	49 85       	ldd	r20, Y+9	; 0x09
    2da4:	5a 85       	ldd	r21, Y+10	; 0x0a
    2da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2daa:	5a 01       	movw	r10, r20
    2dac:	ae 18       	sub	r10, r14
    2dae:	bf 08       	sbc	r11, r15
    2db0:	7a 01       	movw	r14, r20
    2db2:	e8 1a       	sub	r14, r24
    2db4:	f9 0a       	sbc	r15, r25
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	7f ef       	ldi	r23, 0xFF	; 255
    2dbc:	72 0f       	add	r23, r18
    2dbe:	60 0f       	add	r22, r16
    2dc0:	71 1f       	adc	r23, r17
    2dc2:	84 e4       	ldi	r24, 0x44	; 68
    2dc4:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2dc8:	b7 01       	movw	r22, r14
    2dca:	85 e4       	ldi	r24, 0x45	; 69
    2dcc:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2dd0:	b5 01       	movw	r22, r10
    2dd2:	86 e4       	ldi	r24, 0x46	; 70
    2dd4:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2dd8:	b8 01       	movw	r22, r16
    2dda:	8e e4       	ldi	r24, 0x4E	; 78
    2ddc:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2de0:	b5 01       	movw	r22, r10
    2de2:	8f e4       	ldi	r24, 0x4F	; 79
    2de4:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2de8:	68 e5       	ldi	r22, 0x58	; 88
    2dea:	70 e6       	ldi	r23, 0x60	; 96
    2dec:	81 e1       	ldi	r24, 0x11	; 17
    2dee:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Write_COM_DATA>
    2df2:	82 e2       	ldi	r24, 0x22	; 34
    2df4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCD_Write_COM>
    2df8:	85 b3       	in	r24, 0x15	; 21
    2dfa:	80 68       	ori	r24, 0x80	; 128
    2dfc:	85 bb       	out	0x15, r24	; 21
    2dfe:	2a 81       	ldd	r18, Y+2	; 0x02
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	32 2f       	mov	r19, r18
    2e04:	22 27       	eor	r18, r18
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	28 2b       	or	r18, r24
    2e0a:	48 81       	ld	r20, Y
    2e0c:	50 e0       	ldi	r21, 0x00	; 0
    2e0e:	54 2f       	mov	r21, r20
    2e10:	44 27       	eor	r20, r20
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	48 2b       	or	r20, r24
    2e16:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e18:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e1a:	6c 0d       	add	r22, r12
    2e1c:	7d 1d       	adc	r23, r13
    2e1e:	88 89       	ldd	r24, Y+16	; 0x10
    2e20:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e22:	89 9f       	mul	r24, r25
    2e24:	c0 01       	movw	r24, r0
    2e26:	11 24       	eor	r1, r1
    2e28:	99 23       	and	r25, r25
    2e2a:	0c f4       	brge	.+2      	; 0x2e2e <_ZN4UTFT9printCharEhii+0x1c6>
    2e2c:	07 96       	adiw	r24, 0x07	; 7
    2e2e:	95 95       	asr	r25
    2e30:	87 95       	ror	r24
    2e32:	95 95       	asr	r25
    2e34:	87 95       	ror	r24
    2e36:	95 95       	asr	r25
    2e38:	87 95       	ror	r24
    2e3a:	0e 94 a2 08 	call	0x1144	; 0x1144 <fastbitmap_1bit>
    2e3e:	85 b3       	in	r24, 0x15	; 21
    2e40:	81 60       	ori	r24, 0x01	; 1
    2e42:	85 bb       	out	0x15, r24	; 21
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	1f 91       	pop	r17
    2e4a:	0f 91       	pop	r16
    2e4c:	ff 90       	pop	r15
    2e4e:	ef 90       	pop	r14
    2e50:	df 90       	pop	r13
    2e52:	cf 90       	pop	r12
    2e54:	bf 90       	pop	r11
    2e56:	af 90       	pop	r10
    2e58:	08 95       	ret

00002e5a <_ZN4UTFT10rotateCharEhiiii>:
    2e5a:	2f 92       	push	r2
    2e5c:	3f 92       	push	r3
    2e5e:	4f 92       	push	r4
    2e60:	5f 92       	push	r5
    2e62:	6f 92       	push	r6
    2e64:	7f 92       	push	r7
    2e66:	8f 92       	push	r8
    2e68:	9f 92       	push	r9
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	6b 97       	sbiw	r28, 0x1b	; 27
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	5c 01       	movw	r10, r24
    2e90:	69 83       	std	Y+1, r22	; 0x01
    2e92:	3a 01       	movw	r6, r20
    2e94:	49 01       	movw	r8, r18
    2e96:	1f 8b       	std	Y+23, r17	; 0x17
    2e98:	0e 8b       	std	Y+22, r16	; 0x16
    2e9a:	b7 01       	movw	r22, r14
    2e9c:	ff 0c       	add	r15, r15
    2e9e:	88 0b       	sbc	r24, r24
    2ea0:	99 0b       	sbc	r25, r25
    2ea2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    2ea6:	29 e2       	ldi	r18, 0x29	; 41
    2ea8:	3c e5       	ldi	r19, 0x5C	; 92
    2eaa:	4f e8       	ldi	r20, 0x8F	; 143
    2eac:	5c e3       	ldi	r21, 0x3C	; 60
    2eae:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    2eb2:	69 8b       	std	Y+17, r22	; 0x11
    2eb4:	7a 8b       	std	Y+18, r23	; 0x12
    2eb6:	8b 8b       	std	Y+19, r24	; 0x13
    2eb8:	9c 8b       	std	Y+20, r25	; 0x14
    2eba:	85 b3       	in	r24, 0x15	; 21
    2ebc:	8e 7f       	andi	r24, 0xFE	; 254
    2ebe:	85 bb       	out	0x15, r24	; 21
    2ec0:	d5 01       	movw	r26, r10
    2ec2:	51 96       	adiw	r26, 0x11	; 17
    2ec4:	8c 91       	ld	r24, X
    2ec6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ec8:	2b 2f       	mov	r18, r27
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	28 1b       	sub	r18, r24
    2ece:	31 09       	sbc	r19, r1
    2ed0:	f5 01       	movw	r30, r10
    2ed2:	87 85       	ldd	r24, Z+15	; 0x0f
    2ed4:	86 95       	lsr	r24
    2ed6:	86 95       	lsr	r24
    2ed8:	86 95       	lsr	r24
    2eda:	90 89       	ldd	r25, Z+16	; 0x10
    2edc:	89 9f       	mul	r24, r25
    2ede:	c0 01       	movw	r24, r0
    2ee0:	11 24       	eor	r1, r1
    2ee2:	28 9f       	mul	r18, r24
    2ee4:	a0 01       	movw	r20, r0
    2ee6:	29 9f       	mul	r18, r25
    2ee8:	50 0d       	add	r21, r0
    2eea:	38 9f       	mul	r19, r24
    2eec:	50 0d       	add	r21, r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	9a 01       	movw	r18, r20
    2ef2:	2c 5f       	subi	r18, 0xFC	; 252
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	39 8f       	std	Y+25, r19	; 0x19
    2ef8:	28 8f       	std	Y+24, r18	; 0x18
    2efa:	1d 8a       	std	Y+21, r1	; 0x15
    2efc:	d5 01       	movw	r26, r10
    2efe:	50 96       	adiw	r26, 0x10	; 16
    2f00:	8c 91       	ld	r24, X
    2f02:	bd 89       	ldd	r27, Y+21	; 0x15
    2f04:	b8 17       	cp	r27, r24
    2f06:	08 f0       	brcs	.+2      	; 0x2f0a <_ZN4UTFT10rotateCharEhiiii+0xb0>
    2f08:	fb c0       	rjmp	.+502    	; 0x3100 <_ZN4UTFT10rotateCharEhiiii+0x2a6>
    2f0a:	41 2c       	mov	r4, r1
    2f0c:	51 2c       	mov	r5, r1
    2f0e:	f5 01       	movw	r30, r10
    2f10:	87 85       	ldd	r24, Z+15	; 0x0f
    2f12:	86 95       	lsr	r24
    2f14:	86 95       	lsr	r24
    2f16:	86 95       	lsr	r24
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	42 16       	cp	r4, r18
    2f1e:	53 06       	cpc	r5, r19
    2f20:	0c f0       	brlt	.+2      	; 0x2f24 <_ZN4UTFT10rotateCharEhiiii+0xca>
    2f22:	e4 c0       	rjmp	.+456    	; 0x30ec <_ZN4UTFT10rotateCharEhiiii+0x292>
    2f24:	05 84       	ldd	r0, Z+13	; 0x0d
    2f26:	f6 85       	ldd	r31, Z+14	; 0x0e
    2f28:	e0 2d       	mov	r30, r0
    2f2a:	88 8d       	ldd	r24, Y+24	; 0x18
    2f2c:	99 8d       	ldd	r25, Y+25	; 0x19
    2f2e:	84 0d       	add	r24, r4
    2f30:	95 1d       	adc	r25, r5
    2f32:	e8 0f       	add	r30, r24
    2f34:	f9 1f       	adc	r31, r25
    2f36:	24 90       	lpm	r2, Z
    2f38:	31 2c       	mov	r3, r1
    2f3a:	3a 8e       	std	Y+26, r3	; 0x1a
    2f3c:	2b 8e       	std	Y+27, r2	; 0x1b
    2f3e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2f40:	f8 30       	cpi	r31, 0x08	; 8
    2f42:	08 f0       	brcs	.+2      	; 0x2f46 <_ZN4UTFT10rotateCharEhiiii+0xec>
    2f44:	cf c0       	rjmp	.+414    	; 0x30e4 <_ZN4UTFT10rotateCharEhiiii+0x28a>
    2f46:	2f 2e       	mov	r2, r31
    2f48:	31 2c       	mov	r3, r1
    2f4a:	b2 01       	movw	r22, r4
    2f4c:	66 0f       	add	r22, r22
    2f4e:	77 1f       	adc	r23, r23
    2f50:	66 0f       	add	r22, r22
    2f52:	77 1f       	adc	r23, r23
    2f54:	66 0f       	add	r22, r22
    2f56:	77 1f       	adc	r23, r23
    2f58:	62 0d       	add	r22, r2
    2f5a:	73 1d       	adc	r23, r3
    2f5c:	d5 01       	movw	r26, r10
    2f5e:	1f 96       	adiw	r26, 0x0f	; 15
    2f60:	2c 91       	ld	r18, X
    2f62:	ee 89       	ldd	r30, Y+22	; 0x16
    2f64:	ff 89       	ldd	r31, Y+23	; 0x17
    2f66:	2e 9f       	mul	r18, r30
    2f68:	c0 01       	movw	r24, r0
    2f6a:	2f 9f       	mul	r18, r31
    2f6c:	90 0d       	add	r25, r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	68 0f       	add	r22, r24
    2f72:	79 1f       	adc	r23, r25
    2f74:	07 2e       	mov	r0, r23
    2f76:	00 0c       	add	r0, r0
    2f78:	88 0b       	sbc	r24, r24
    2f7a:	99 0b       	sbc	r25, r25
    2f7c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    2f80:	69 83       	std	Y+1, r22	; 0x01
    2f82:	7a 83       	std	Y+2, r23	; 0x02
    2f84:	8b 83       	std	Y+3, r24	; 0x03
    2f86:	9c 83       	std	Y+4, r25	; 0x04
    2f88:	69 89       	ldd	r22, Y+17	; 0x11
    2f8a:	7a 89       	ldd	r23, Y+18	; 0x12
    2f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f90:	0e 94 0c 1b 	call	0x3618	; 0x3618 <cos>
    2f94:	6d 83       	std	Y+5, r22	; 0x05
    2f96:	7e 83       	std	Y+6, r23	; 0x06
    2f98:	8f 83       	std	Y+7, r24	; 0x07
    2f9a:	98 87       	std	Y+8, r25	; 0x08
    2f9c:	9b 01       	movw	r18, r22
    2f9e:	ac 01       	movw	r20, r24
    2fa0:	69 81       	ldd	r22, Y+1	; 0x01
    2fa2:	7a 81       	ldd	r23, Y+2	; 0x02
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    2fac:	6b 01       	movw	r12, r22
    2fae:	7c 01       	movw	r14, r24
    2fb0:	fd 89       	ldd	r31, Y+21	; 0x15
    2fb2:	6f 2f       	mov	r22, r31
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    2fbe:	69 87       	std	Y+9, r22	; 0x09
    2fc0:	7a 87       	std	Y+10, r23	; 0x0a
    2fc2:	8b 87       	std	Y+11, r24	; 0x0b
    2fc4:	9c 87       	std	Y+12, r25	; 0x0c
    2fc6:	69 89       	ldd	r22, Y+17	; 0x11
    2fc8:	7a 89       	ldd	r23, Y+18	; 0x12
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <sin>
    2fd2:	6d 87       	std	Y+13, r22	; 0x0d
    2fd4:	7e 87       	std	Y+14, r23	; 0x0e
    2fd6:	8f 87       	std	Y+15, r24	; 0x0f
    2fd8:	98 8b       	std	Y+16, r25	; 0x10
    2fda:	9b 01       	movw	r18, r22
    2fdc:	ac 01       	movw	r20, r24
    2fde:	69 85       	ldd	r22, Y+9	; 0x09
    2fe0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fe2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fe4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fe6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    2fea:	9b 01       	movw	r18, r22
    2fec:	ac 01       	movw	r20, r24
    2fee:	c7 01       	movw	r24, r14
    2ff0:	b6 01       	movw	r22, r12
    2ff2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__subsf3>
    2ff6:	6b 01       	movw	r12, r22
    2ff8:	7c 01       	movw	r14, r24
    2ffa:	b3 01       	movw	r22, r6
    2ffc:	07 2c       	mov	r0, r7
    2ffe:	00 0c       	add	r0, r0
    3000:	88 0b       	sbc	r24, r24
    3002:	99 0b       	sbc	r25, r25
    3004:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    3008:	a7 01       	movw	r20, r14
    300a:	96 01       	movw	r18, r12
    300c:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__addsf3>
    3010:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    3014:	6b 01       	movw	r12, r22
    3016:	7c 01       	movw	r14, r24
    3018:	29 85       	ldd	r18, Y+9	; 0x09
    301a:	3a 85       	ldd	r19, Y+10	; 0x0a
    301c:	4b 85       	ldd	r20, Y+11	; 0x0b
    301e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3020:	6d 81       	ldd	r22, Y+5	; 0x05
    3022:	7e 81       	ldd	r23, Y+6	; 0x06
    3024:	8f 81       	ldd	r24, Y+7	; 0x07
    3026:	98 85       	ldd	r25, Y+8	; 0x08
    3028:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    302c:	6d 83       	std	Y+5, r22	; 0x05
    302e:	7e 83       	std	Y+6, r23	; 0x06
    3030:	8f 83       	std	Y+7, r24	; 0x07
    3032:	98 87       	std	Y+8, r25	; 0x08
    3034:	2d 85       	ldd	r18, Y+13	; 0x0d
    3036:	3e 85       	ldd	r19, Y+14	; 0x0e
    3038:	4f 85       	ldd	r20, Y+15	; 0x0f
    303a:	58 89       	ldd	r21, Y+16	; 0x10
    303c:	69 81       	ldd	r22, Y+1	; 0x01
    303e:	7a 81       	ldd	r23, Y+2	; 0x02
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	9c 81       	ldd	r25, Y+4	; 0x04
    3044:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    3048:	9b 01       	movw	r18, r22
    304a:	ac 01       	movw	r20, r24
    304c:	6d 81       	ldd	r22, Y+5	; 0x05
    304e:	7e 81       	ldd	r23, Y+6	; 0x06
    3050:	8f 81       	ldd	r24, Y+7	; 0x07
    3052:	98 85       	ldd	r25, Y+8	; 0x08
    3054:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__addsf3>
    3058:	69 83       	std	Y+1, r22	; 0x01
    305a:	7a 83       	std	Y+2, r23	; 0x02
    305c:	8b 83       	std	Y+3, r24	; 0x03
    305e:	9c 83       	std	Y+4, r25	; 0x04
    3060:	b4 01       	movw	r22, r8
    3062:	09 2c       	mov	r0, r9
    3064:	00 0c       	add	r0, r0
    3066:	88 0b       	sbc	r24, r24
    3068:	99 0b       	sbc	r25, r25
    306a:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__floatsisf>
    306e:	29 81       	ldd	r18, Y+1	; 0x01
    3070:	3a 81       	ldd	r19, Y+2	; 0x02
    3072:	4b 81       	ldd	r20, Y+3	; 0x03
    3074:	5c 81       	ldd	r21, Y+4	; 0x04
    3076:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__addsf3>
    307a:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fixsfsi>
    307e:	8b 01       	movw	r16, r22
    3080:	0f 5f       	subi	r16, 0xFF	; 255
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	96 01       	movw	r18, r12
    3086:	2f 5f       	subi	r18, 0xFF	; 255
    3088:	3f 4f       	sbci	r19, 0xFF	; 255
    308a:	ab 01       	movw	r20, r22
    308c:	b6 01       	movw	r22, r12
    308e:	c5 01       	movw	r24, r10
    3090:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN4UTFT5setXYEjjjj>
    3094:	27 e0       	ldi	r18, 0x07	; 7
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	22 19       	sub	r18, r2
    309a:	33 09       	sbc	r19, r3
    309c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    309e:	84 2f       	mov	r24, r20
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <_ZN4UTFT10rotateCharEhiiii+0x24e>
    30a4:	95 95       	asr	r25
    30a6:	87 95       	ror	r24
    30a8:	2a 95       	dec	r18
    30aa:	e2 f7       	brpl	.-8      	; 0x30a4 <_ZN4UTFT10rotateCharEhiiii+0x24a>
    30ac:	80 ff       	sbrs	r24, 0
    30ae:	0c c0       	rjmp	.+24     	; 0x30c8 <_ZN4UTFT10rotateCharEhiiii+0x26e>
    30b0:	d5 01       	movw	r26, r10
    30b2:	6c 91       	ld	r22, X
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	76 2f       	mov	r23, r22
    30b8:	66 27       	eor	r22, r22
    30ba:	11 96       	adiw	r26, 0x01	; 1
    30bc:	8c 91       	ld	r24, X
    30be:	68 2b       	or	r22, r24
    30c0:	c5 01       	movw	r24, r10
    30c2:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <_ZN4UTFT8setPixelEj>
    30c6:	0a c0       	rjmp	.+20     	; 0x30dc <_ZN4UTFT10rotateCharEhiiii+0x282>
    30c8:	f5 01       	movw	r30, r10
    30ca:	62 81       	ldd	r22, Z+2	; 0x02
    30cc:	70 e0       	ldi	r23, 0x00	; 0
    30ce:	76 2f       	mov	r23, r22
    30d0:	66 27       	eor	r22, r22
    30d2:	83 81       	ldd	r24, Z+3	; 0x03
    30d4:	68 2b       	or	r22, r24
    30d6:	c5 01       	movw	r24, r10
    30d8:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <_ZN4UTFT8setPixelEj>
    30dc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    30de:	ff 5f       	subi	r31, 0xFF	; 255
    30e0:	fa 8f       	std	Y+26, r31	; 0x1a
    30e2:	2d cf       	rjmp	.-422    	; 0x2f3e <_ZN4UTFT10rotateCharEhiiii+0xe4>
    30e4:	2f ef       	ldi	r18, 0xFF	; 255
    30e6:	42 1a       	sub	r4, r18
    30e8:	52 0a       	sbc	r5, r18
    30ea:	11 cf       	rjmp	.-478    	; 0x2f0e <_ZN4UTFT10rotateCharEhiiii+0xb4>
    30ec:	48 8d       	ldd	r20, Y+24	; 0x18
    30ee:	59 8d       	ldd	r21, Y+25	; 0x19
    30f0:	48 0f       	add	r20, r24
    30f2:	51 1d       	adc	r21, r1
    30f4:	59 8f       	std	Y+25, r21	; 0x19
    30f6:	48 8f       	std	Y+24, r20	; 0x18
    30f8:	5d 89       	ldd	r21, Y+21	; 0x15
    30fa:	5f 5f       	subi	r21, 0xFF	; 255
    30fc:	5d 8b       	std	Y+21, r21	; 0x15
    30fe:	fe ce       	rjmp	.-516    	; 0x2efc <_ZN4UTFT10rotateCharEhiiii+0xa2>
    3100:	85 b3       	in	r24, 0x15	; 21
    3102:	81 60       	ori	r24, 0x01	; 1
    3104:	85 bb       	out	0x15, r24	; 21
    3106:	6b 96       	adiw	r28, 0x1b	; 27
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	1f 91       	pop	r17
    3118:	0f 91       	pop	r16
    311a:	ff 90       	pop	r15
    311c:	ef 90       	pop	r14
    311e:	df 90       	pop	r13
    3120:	cf 90       	pop	r12
    3122:	bf 90       	pop	r11
    3124:	af 90       	pop	r10
    3126:	9f 90       	pop	r9
    3128:	8f 90       	pop	r8
    312a:	7f 90       	pop	r7
    312c:	6f 90       	pop	r6
    312e:	5f 90       	pop	r5
    3130:	4f 90       	pop	r4
    3132:	3f 90       	pop	r3
    3134:	2f 90       	pop	r2
    3136:	08 95       	ret

00003138 <_ZN4UTFT5printEPKciii>:
    3138:	2f 92       	push	r2
    313a:	3f 92       	push	r3
    313c:	4f 92       	push	r4
    313e:	5f 92       	push	r5
    3140:	6f 92       	push	r6
    3142:	7f 92       	push	r7
    3144:	8f 92       	push	r8
    3146:	9f 92       	push	r9
    3148:	af 92       	push	r10
    314a:	bf 92       	push	r11
    314c:	cf 92       	push	r12
    314e:	df 92       	push	r13
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	ec 01       	movw	r28, r24
    315e:	fb 01       	movw	r30, r22
    3160:	5a 01       	movw	r10, r20
    3162:	29 01       	movw	r4, r18
    3164:	68 01       	movw	r12, r16
    3166:	db 01       	movw	r26, r22
    3168:	0d 90       	ld	r0, X+
    316a:	00 20       	and	r0, r0
    316c:	e9 f7       	brne	.-6      	; 0x3168 <_ZN4UTFT5printEPKciii+0x30>
    316e:	11 97       	sbiw	r26, 0x01	; 1
    3170:	a6 1b       	sub	r26, r22
    3172:	b7 0b       	sbc	r27, r23
    3174:	4d 01       	movw	r8, r26
    3176:	8c 81       	ldd	r24, Y+4	; 0x04
    3178:	81 11       	cpse	r24, r1
    317a:	3e c0       	rjmp	.+124    	; 0x31f8 <_ZN4UTFT5printEPKciii+0xc0>
    317c:	4f 30       	cpi	r20, 0x0F	; 15
    317e:	57 42       	sbci	r21, 0x27	; 39
    3180:	81 f4       	brne	.+32     	; 0x31a2 <_ZN4UTFT5printEPKciii+0x6a>
    3182:	4d 81       	ldd	r20, Y+5	; 0x05
    3184:	5e 81       	ldd	r21, Y+6	; 0x06
    3186:	6f 81       	ldd	r22, Y+7	; 0x07
    3188:	78 85       	ldd	r23, Y+8	; 0x08
    318a:	2f 85       	ldd	r18, Y+15	; 0x0f
    318c:	2a 9f       	mul	r18, r26
    318e:	c0 01       	movw	r24, r0
    3190:	2b 9f       	mul	r18, r27
    3192:	90 0d       	add	r25, r0
    3194:	11 24       	eor	r1, r1
    3196:	48 1b       	sub	r20, r24
    3198:	59 0b       	sbc	r21, r25
    319a:	5a 01       	movw	r10, r20
    319c:	1f ef       	ldi	r17, 0xFF	; 255
    319e:	a1 1a       	sub	r10, r17
    31a0:	b1 0a       	sbc	r11, r17
    31a2:	2e e0       	ldi	r18, 0x0E	; 14
    31a4:	a2 16       	cp	r10, r18
    31a6:	27 e2       	ldi	r18, 0x27	; 39
    31a8:	b2 06       	cpc	r11, r18
    31aa:	09 f0       	breq	.+2      	; 0x31ae <_ZN4UTFT5printEPKciii+0x76>
    31ac:	61 c0       	rjmp	.+194    	; 0x3270 <_ZN4UTFT5printEPKciii+0x138>
    31ae:	4d 81       	ldd	r20, Y+5	; 0x05
    31b0:	5e 81       	ldd	r21, Y+6	; 0x06
    31b2:	6f 81       	ldd	r22, Y+7	; 0x07
    31b4:	78 85       	ldd	r23, Y+8	; 0x08
    31b6:	4f 5f       	subi	r20, 0xFF	; 255
    31b8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ba:	6f 4f       	sbci	r22, 0xFF	; 255
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	2f 85       	ldd	r18, Y+15	; 0x0f
    31c0:	2a 9f       	mul	r18, r26
    31c2:	c0 01       	movw	r24, r0
    31c4:	2b 9f       	mul	r18, r27
    31c6:	90 0d       	add	r25, r0
    31c8:	11 24       	eor	r1, r1
    31ca:	09 2e       	mov	r0, r25
    31cc:	00 0c       	add	r0, r0
    31ce:	aa 0b       	sbc	r26, r26
    31d0:	bb 0b       	sbc	r27, r27
    31d2:	8a 01       	movw	r16, r20
    31d4:	9b 01       	movw	r18, r22
    31d6:	08 1b       	sub	r16, r24
    31d8:	19 0b       	sbc	r17, r25
    31da:	2a 0b       	sbc	r18, r26
    31dc:	3b 0b       	sbc	r19, r27
    31de:	b9 01       	movw	r22, r18
    31e0:	a8 01       	movw	r20, r16
    31e2:	22 f4       	brpl	.+8      	; 0x31ec <_ZN4UTFT5printEPKciii+0xb4>
    31e4:	4f 5f       	subi	r20, 0xFF	; 255
    31e6:	5f 4f       	sbci	r21, 0xFF	; 255
    31e8:	6f 4f       	sbci	r22, 0xFF	; 255
    31ea:	7f 4f       	sbci	r23, 0xFF	; 255
    31ec:	75 95       	asr	r23
    31ee:	67 95       	ror	r22
    31f0:	57 95       	ror	r21
    31f2:	47 95       	ror	r20
    31f4:	5a 01       	movw	r10, r20
    31f6:	3c c0       	rjmp	.+120    	; 0x3270 <_ZN4UTFT5printEPKciii+0x138>
    31f8:	4f 30       	cpi	r20, 0x0F	; 15
    31fa:	57 42       	sbci	r21, 0x27	; 39
    31fc:	81 f4       	brne	.+32     	; 0x321e <_ZN4UTFT5printEPKciii+0xe6>
    31fe:	49 85       	ldd	r20, Y+9	; 0x09
    3200:	5a 85       	ldd	r21, Y+10	; 0x0a
    3202:	6b 85       	ldd	r22, Y+11	; 0x0b
    3204:	7c 85       	ldd	r23, Y+12	; 0x0c
    3206:	2f 85       	ldd	r18, Y+15	; 0x0f
    3208:	2a 9f       	mul	r18, r26
    320a:	c0 01       	movw	r24, r0
    320c:	2b 9f       	mul	r18, r27
    320e:	90 0d       	add	r25, r0
    3210:	11 24       	eor	r1, r1
    3212:	48 1b       	sub	r20, r24
    3214:	59 0b       	sbc	r21, r25
    3216:	5a 01       	movw	r10, r20
    3218:	2f ef       	ldi	r18, 0xFF	; 255
    321a:	a2 1a       	sub	r10, r18
    321c:	b2 0a       	sbc	r11, r18
    321e:	3e e0       	ldi	r19, 0x0E	; 14
    3220:	a3 16       	cp	r10, r19
    3222:	37 e2       	ldi	r19, 0x27	; 39
    3224:	b3 06       	cpc	r11, r19
    3226:	21 f5       	brne	.+72     	; 0x3270 <_ZN4UTFT5printEPKciii+0x138>
    3228:	49 85       	ldd	r20, Y+9	; 0x09
    322a:	5a 85       	ldd	r21, Y+10	; 0x0a
    322c:	6b 85       	ldd	r22, Y+11	; 0x0b
    322e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3230:	4f 5f       	subi	r20, 0xFF	; 255
    3232:	5f 4f       	sbci	r21, 0xFF	; 255
    3234:	6f 4f       	sbci	r22, 0xFF	; 255
    3236:	7f 4f       	sbci	r23, 0xFF	; 255
    3238:	2f 85       	ldd	r18, Y+15	; 0x0f
    323a:	2a 9f       	mul	r18, r26
    323c:	c0 01       	movw	r24, r0
    323e:	2b 9f       	mul	r18, r27
    3240:	90 0d       	add	r25, r0
    3242:	11 24       	eor	r1, r1
    3244:	09 2e       	mov	r0, r25
    3246:	00 0c       	add	r0, r0
    3248:	aa 0b       	sbc	r26, r26
    324a:	bb 0b       	sbc	r27, r27
    324c:	8a 01       	movw	r16, r20
    324e:	9b 01       	movw	r18, r22
    3250:	08 1b       	sub	r16, r24
    3252:	19 0b       	sbc	r17, r25
    3254:	2a 0b       	sbc	r18, r26
    3256:	3b 0b       	sbc	r19, r27
    3258:	b9 01       	movw	r22, r18
    325a:	a8 01       	movw	r20, r16
    325c:	22 f4       	brpl	.+8      	; 0x3266 <_ZN4UTFT5printEPKciii+0x12e>
    325e:	4f 5f       	subi	r20, 0xFF	; 255
    3260:	5f 4f       	sbci	r21, 0xFF	; 255
    3262:	6f 4f       	sbci	r22, 0xFF	; 255
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	75 95       	asr	r23
    3268:	67 95       	ror	r22
    326a:	57 95       	ror	r21
    326c:	47 95       	ror	r20
    326e:	5a 01       	movw	r10, r20
    3270:	61 2c       	mov	r6, r1
    3272:	71 2c       	mov	r7, r1
    3274:	68 14       	cp	r6, r8
    3276:	79 04       	cpc	r7, r9
    3278:	3c f5       	brge	.+78     	; 0x32c8 <_ZN4UTFT5printEPKciii+0x190>
    327a:	c1 14       	cp	r12, r1
    327c:	d1 04       	cpc	r13, r1
    327e:	99 f4       	brne	.+38     	; 0x32a6 <_ZN4UTFT5printEPKciii+0x16e>
    3280:	8f 85       	ldd	r24, Y+15	; 0x0f
    3282:	86 9d       	mul	r24, r6
    3284:	a0 01       	movw	r20, r0
    3286:	87 9d       	mul	r24, r7
    3288:	50 0d       	add	r21, r0
    328a:	11 24       	eor	r1, r1
    328c:	4a 0d       	add	r20, r10
    328e:	5b 1d       	adc	r21, r11
    3290:	1f 01       	movw	r2, r30
    3292:	1f ef       	ldi	r17, 0xFF	; 255
    3294:	21 1a       	sub	r2, r17
    3296:	31 0a       	sbc	r3, r17
    3298:	60 81       	ld	r22, Z
    329a:	92 01       	movw	r18, r4
    329c:	ce 01       	movw	r24, r28
    329e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN4UTFT9printCharEhii>
    32a2:	f1 01       	movw	r30, r2
    32a4:	0d c0       	rjmp	.+26     	; 0x32c0 <_ZN4UTFT5printEPKciii+0x188>
    32a6:	1f 01       	movw	r2, r30
    32a8:	2f ef       	ldi	r18, 0xFF	; 255
    32aa:	22 1a       	sub	r2, r18
    32ac:	32 0a       	sbc	r3, r18
    32ae:	60 81       	ld	r22, Z
    32b0:	76 01       	movw	r14, r12
    32b2:	83 01       	movw	r16, r6
    32b4:	92 01       	movw	r18, r4
    32b6:	a5 01       	movw	r20, r10
    32b8:	ce 01       	movw	r24, r28
    32ba:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <_ZN4UTFT10rotateCharEhiiii>
    32be:	f1 01       	movw	r30, r2
    32c0:	3f ef       	ldi	r19, 0xFF	; 255
    32c2:	63 1a       	sub	r6, r19
    32c4:	73 0a       	sbc	r7, r19
    32c6:	d6 cf       	rjmp	.-84     	; 0x3274 <_ZN4UTFT5printEPKciii+0x13c>
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	1f 91       	pop	r17
    32ce:	0f 91       	pop	r16
    32d0:	ff 90       	pop	r15
    32d2:	ef 90       	pop	r14
    32d4:	df 90       	pop	r13
    32d6:	cf 90       	pop	r12
    32d8:	bf 90       	pop	r11
    32da:	af 90       	pop	r10
    32dc:	9f 90       	pop	r9
    32de:	8f 90       	pop	r8
    32e0:	7f 90       	pop	r7
    32e2:	6f 90       	pop	r6
    32e4:	5f 90       	pop	r5
    32e6:	4f 90       	pop	r4
    32e8:	3f 90       	pop	r3
    32ea:	2f 90       	pop	r2
    32ec:	08 95       	ret

000032ee <_ZN4UTFT9printNumIEliiic>:
    32ee:	2f 92       	push	r2
    32f0:	3f 92       	push	r3
    32f2:	4f 92       	push	r4
    32f4:	5f 92       	push	r5
    32f6:	6f 92       	push	r6
    32f8:	7f 92       	push	r7
    32fa:	8f 92       	push	r8
    32fc:	9f 92       	push	r9
    32fe:	af 92       	push	r10
    3300:	bf 92       	push	r11
    3302:	cf 92       	push	r12
    3304:	df 92       	push	r13
    3306:	ef 92       	push	r14
    3308:	ff 92       	push	r15
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	e8 97       	sbiw	r28, 0x38	; 56
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	1c 01       	movw	r2, r24
    3324:	4a 01       	movw	r8, r20
    3326:	5b 01       	movw	r10, r22
    3328:	3e ab       	std	Y+54, r19	; 0x36
    332a:	2d ab       	std	Y+53, r18	; 0x35
    332c:	18 af       	std	Y+56, r17	; 0x38
    332e:	0f ab       	std	Y+55, r16	; 0x37
    3330:	41 15       	cp	r20, r1
    3332:	51 05       	cpc	r21, r1
    3334:	61 05       	cpc	r22, r1
    3336:	71 05       	cpc	r23, r1
    3338:	49 f5       	brne	.+82     	; 0x338c <_ZN4UTFT9printNumIEliiic+0x9e>
    333a:	e1 14       	cp	r14, r1
    333c:	f1 04       	cpc	r15, r1
    333e:	11 f1       	breq	.+68     	; 0x3384 <_ZN4UTFT9printNumIEliiic+0x96>
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	97 01       	movw	r18, r14
    3346:	21 50       	subi	r18, 0x01	; 1
    3348:	31 09       	sbc	r19, r1
    334a:	82 17       	cp	r24, r18
    334c:	93 07       	cpc	r25, r19
    334e:	4c f4       	brge	.+18     	; 0x3362 <_ZN4UTFT9printNumIEliiic+0x74>
    3350:	ea e1       	ldi	r30, 0x1A	; 26
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	ec 0f       	add	r30, r28
    3356:	fd 1f       	adc	r31, r29
    3358:	e8 0f       	add	r30, r24
    335a:	f9 1f       	adc	r31, r25
    335c:	c0 82       	st	Z, r12
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	f1 cf       	rjmp	.-30     	; 0x3344 <_ZN4UTFT9printNumIEliiic+0x56>
    3362:	ea e1       	ldi	r30, 0x1A	; 26
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	ec 0f       	add	r30, r28
    3368:	fd 1f       	adc	r31, r29
    336a:	e8 0f       	add	r30, r24
    336c:	f9 1f       	adc	r31, r25
    336e:	20 e3       	ldi	r18, 0x30	; 48
    3370:	20 83       	st	Z, r18
    3372:	01 96       	adiw	r24, 0x01	; 1
    3374:	ea e1       	ldi	r30, 0x1A	; 26
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	ec 0f       	add	r30, r28
    337a:	fd 1f       	adc	r31, r29
    337c:	e8 0f       	add	r30, r24
    337e:	f9 1f       	adc	r31, r25
    3380:	10 82       	st	Z, r1
    3382:	98 c0       	rjmp	.+304    	; 0x34b4 <_ZN4UTFT9printNumIEliiic+0x1c6>
    3384:	80 e3       	ldi	r24, 0x30	; 48
    3386:	8a 8f       	std	Y+26, r24	; 0x1a
    3388:	1b 8e       	std	Y+27, r1	; 0x1b
    338a:	94 c0       	rjmp	.+296    	; 0x34b4 <_ZN4UTFT9printNumIEliiic+0x1c6>
    338c:	77 23       	and	r23, r23
    338e:	5c f4       	brge	.+22     	; 0x33a6 <_ZN4UTFT9printNumIEliiic+0xb8>
    3390:	b0 94       	com	r11
    3392:	a0 94       	com	r10
    3394:	90 94       	com	r9
    3396:	80 94       	com	r8
    3398:	81 1c       	adc	r8, r1
    339a:	91 1c       	adc	r9, r1
    339c:	a1 1c       	adc	r10, r1
    339e:	b1 1c       	adc	r11, r1
    33a0:	dd 24       	eor	r13, r13
    33a2:	d3 94       	inc	r13
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <_ZN4UTFT9printNumIEliiic+0xba>
    33a6:	d1 2c       	mov	r13, r1
    33a8:	00 e0       	ldi	r16, 0x00	; 0
    33aa:	10 e0       	ldi	r17, 0x00	; 0
    33ac:	18 14       	cp	r1, r8
    33ae:	19 04       	cpc	r1, r9
    33b0:	1a 04       	cpc	r1, r10
    33b2:	1b 04       	cpc	r1, r11
    33b4:	3c f5       	brge	.+78     	; 0x3404 <_ZN4UTFT9printNumIEliiic+0x116>
    33b6:	0f 2e       	mov	r0, r31
    33b8:	fa e0       	ldi	r31, 0x0A	; 10
    33ba:	4f 2e       	mov	r4, r31
    33bc:	51 2c       	mov	r5, r1
    33be:	61 2c       	mov	r6, r1
    33c0:	71 2c       	mov	r7, r1
    33c2:	f0 2d       	mov	r31, r0
    33c4:	c5 01       	movw	r24, r10
    33c6:	b4 01       	movw	r22, r8
    33c8:	a3 01       	movw	r20, r6
    33ca:	92 01       	movw	r18, r4
    33cc:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodsi4>
    33d0:	e1 e0       	ldi	r30, 0x01	; 1
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	ec 0f       	add	r30, r28
    33d6:	fd 1f       	adc	r31, r29
    33d8:	e0 0f       	add	r30, r16
    33da:	f1 1f       	adc	r31, r17
    33dc:	20 e3       	ldi	r18, 0x30	; 48
    33de:	26 0f       	add	r18, r22
    33e0:	20 83       	st	Z, r18
    33e2:	0f 5f       	subi	r16, 0xFF	; 255
    33e4:	1f 4f       	sbci	r17, 0xFF	; 255
    33e6:	a5 01       	movw	r20, r10
    33e8:	94 01       	movw	r18, r8
    33ea:	26 1b       	sub	r18, r22
    33ec:	37 0b       	sbc	r19, r23
    33ee:	48 0b       	sbc	r20, r24
    33f0:	59 0b       	sbc	r21, r25
    33f2:	ca 01       	movw	r24, r20
    33f4:	b9 01       	movw	r22, r18
    33f6:	a3 01       	movw	r20, r6
    33f8:	92 01       	movw	r18, r4
    33fa:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodsi4>
    33fe:	49 01       	movw	r8, r18
    3400:	5a 01       	movw	r10, r20
    3402:	d4 cf       	rjmp	.-88     	; 0x33ac <_ZN4UTFT9printNumIEliiic+0xbe>
    3404:	e1 e0       	ldi	r30, 0x01	; 1
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	ec 0f       	add	r30, r28
    340a:	fd 1f       	adc	r31, r29
    340c:	e0 0f       	add	r30, r16
    340e:	f1 1f       	adc	r31, r17
    3410:	10 82       	st	Z, r1
    3412:	dd 20       	and	r13, r13
    3414:	11 f0       	breq	.+4      	; 0x341a <_ZN4UTFT9printNumIEliiic+0x12c>
    3416:	8d e2       	ldi	r24, 0x2D	; 45
    3418:	8a 8f       	std	Y+26, r24	; 0x1a
    341a:	2d 2d       	mov	r18, r13
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	b8 01       	movw	r22, r16
    3420:	62 0f       	add	r22, r18
    3422:	73 1f       	adc	r23, r19
    3424:	6e 15       	cp	r22, r14
    3426:	7f 05       	cpc	r23, r15
    3428:	d4 f4       	brge	.+52     	; 0x345e <_ZN4UTFT9printNumIEliiic+0x170>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	40 e0       	ldi	r20, 0x00	; 0
    3430:	50 e0       	ldi	r21, 0x00	; 0
    3432:	f7 01       	movw	r30, r14
    3434:	e0 1b       	sub	r30, r16
    3436:	f1 0b       	sbc	r31, r17
    3438:	e2 1b       	sub	r30, r18
    343a:	f3 0b       	sbc	r31, r19
    343c:	8e 17       	cp	r24, r30
    343e:	9f 07       	cpc	r25, r31
    3440:	84 f4       	brge	.+32     	; 0x3462 <_ZN4UTFT9printNumIEliiic+0x174>
    3442:	fc 01       	movw	r30, r24
    3444:	e2 0f       	add	r30, r18
    3446:	f3 1f       	adc	r31, r19
    3448:	aa e1       	ldi	r26, 0x1A	; 26
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	ac 0f       	add	r26, r28
    344e:	bd 1f       	adc	r27, r29
    3450:	ea 0f       	add	r30, r26
    3452:	fb 1f       	adc	r31, r27
    3454:	c0 82       	st	Z, r12
    3456:	4f 5f       	subi	r20, 0xFF	; 255
    3458:	5f 4f       	sbci	r21, 0xFF	; 255
    345a:	01 96       	adiw	r24, 0x01	; 1
    345c:	ea cf       	rjmp	.-44     	; 0x3432 <_ZN4UTFT9printNumIEliiic+0x144>
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	a0 e0       	ldi	r26, 0x00	; 0
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	a0 17       	cp	r26, r16
    3468:	b1 07       	cpc	r27, r17
    346a:	dc f4       	brge	.+54     	; 0x34a2 <_ZN4UTFT9printNumIEliiic+0x1b4>
    346c:	fd 01       	movw	r30, r26
    346e:	e2 0f       	add	r30, r18
    3470:	f3 1f       	adc	r31, r19
    3472:	6f 01       	movw	r12, r30
    3474:	c4 0e       	add	r12, r20
    3476:	d5 1e       	adc	r13, r21
    3478:	c8 01       	movw	r24, r16
    347a:	8a 1b       	sub	r24, r26
    347c:	9b 0b       	sbc	r25, r27
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	e1 e0       	ldi	r30, 0x01	; 1
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	ec 0f       	add	r30, r28
    3486:	fd 1f       	adc	r31, r29
    3488:	8e 0f       	add	r24, r30
    348a:	9f 1f       	adc	r25, r31
    348c:	fc 01       	movw	r30, r24
    348e:	80 81       	ld	r24, Z
    3490:	ea e1       	ldi	r30, 0x1A	; 26
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	ec 0f       	add	r30, r28
    3496:	fd 1f       	adc	r31, r29
    3498:	ec 0d       	add	r30, r12
    349a:	fd 1d       	adc	r31, r13
    349c:	80 83       	st	Z, r24
    349e:	11 96       	adiw	r26, 0x01	; 1
    34a0:	e2 cf       	rjmp	.-60     	; 0x3466 <_ZN4UTFT9printNumIEliiic+0x178>
    34a2:	46 0f       	add	r20, r22
    34a4:	57 1f       	adc	r21, r23
    34a6:	ea e1       	ldi	r30, 0x1A	; 26
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	ec 0f       	add	r30, r28
    34ac:	fd 1f       	adc	r31, r29
    34ae:	e4 0f       	add	r30, r20
    34b0:	f5 1f       	adc	r31, r21
    34b2:	10 82       	st	Z, r1
    34b4:	00 e0       	ldi	r16, 0x00	; 0
    34b6:	10 e0       	ldi	r17, 0x00	; 0
    34b8:	2f a9       	ldd	r18, Y+55	; 0x37
    34ba:	38 ad       	ldd	r19, Y+56	; 0x38
    34bc:	4d a9       	ldd	r20, Y+53	; 0x35
    34be:	5e a9       	ldd	r21, Y+54	; 0x36
    34c0:	be 01       	movw	r22, r28
    34c2:	66 5e       	subi	r22, 0xE6	; 230
    34c4:	7f 4f       	sbci	r23, 0xFF	; 255
    34c6:	c1 01       	movw	r24, r2
    34c8:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN4UTFT5printEPKciii>
    34cc:	e8 96       	adiw	r28, 0x38	; 56
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	1f 91       	pop	r17
    34de:	0f 91       	pop	r16
    34e0:	ff 90       	pop	r15
    34e2:	ef 90       	pop	r14
    34e4:	df 90       	pop	r13
    34e6:	cf 90       	pop	r12
    34e8:	bf 90       	pop	r11
    34ea:	af 90       	pop	r10
    34ec:	9f 90       	pop	r9
    34ee:	8f 90       	pop	r8
    34f0:	7f 90       	pop	r7
    34f2:	6f 90       	pop	r6
    34f4:	5f 90       	pop	r5
    34f6:	4f 90       	pop	r4
    34f8:	3f 90       	pop	r3
    34fa:	2f 90       	pop	r2
    34fc:	08 95       	ret

000034fe <_ZN4UTFT7setFontEPKh>:

void UTFT::setFont(const uint8_t* font)
{
    34fe:	dc 01       	movw	r26, r24
	cfont.font=font;
    3500:	1e 96       	adiw	r26, 0x0e	; 14
    3502:	7c 93       	st	X, r23
    3504:	6e 93       	st	-X, r22
    3506:	1d 97       	sbiw	r26, 0x0d	; 13
	cfont.x_size=fontbyte(0);
    3508:	fb 01       	movw	r30, r22
    350a:	84 91       	lpm	r24, Z
    350c:	1f 96       	adiw	r26, 0x0f	; 15
    350e:	8c 93       	st	X, r24
    3510:	1f 97       	sbiw	r26, 0x0f	; 15
	cfont.y_size=fontbyte(1);
    3512:	31 96       	adiw	r30, 0x01	; 1
    3514:	e4 91       	lpm	r30, Z
    3516:	50 96       	adiw	r26, 0x10	; 16
    3518:	ec 93       	st	X, r30
    351a:	50 97       	sbiw	r26, 0x10	; 16
	cfont.offset=fontbyte(2);
    351c:	fb 01       	movw	r30, r22
    351e:	32 96       	adiw	r30, 0x02	; 2
    3520:	e4 91       	lpm	r30, Z
    3522:	51 96       	adiw	r26, 0x11	; 17
    3524:	ec 93       	st	X, r30
    3526:	51 97       	sbiw	r26, 0x11	; 17
	cfont.numchars=fontbyte(3);
    3528:	fb 01       	movw	r30, r22
    352a:	33 96       	adiw	r30, 0x03	; 3
    352c:	64 91       	lpm	r22, Z
    352e:	52 96       	adiw	r26, 0x12	; 18
    3530:	6c 93       	st	X, r22
    3532:	08 95       	ret

00003534 <__subsf3>:
    3534:	50 58       	subi	r21, 0x80	; 128

00003536 <__addsf3>:
    3536:	bb 27       	eor	r27, r27
    3538:	aa 27       	eor	r26, r26
    353a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__addsf3x>
    353e:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__fp_round>
    3542:	0e 94 23 1c 	call	0x3846	; 0x3846 <__fp_pscA>
    3546:	38 f0       	brcs	.+14     	; 0x3556 <__addsf3+0x20>
    3548:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__fp_pscB>
    354c:	20 f0       	brcs	.+8      	; 0x3556 <__addsf3+0x20>
    354e:	39 f4       	brne	.+14     	; 0x355e <__addsf3+0x28>
    3550:	9f 3f       	cpi	r25, 0xFF	; 255
    3552:	19 f4       	brne	.+6      	; 0x355a <__addsf3+0x24>
    3554:	26 f4       	brtc	.+8      	; 0x355e <__addsf3+0x28>
    3556:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__fp_nan>
    355a:	0e f4       	brtc	.+2      	; 0x355e <__addsf3+0x28>
    355c:	e0 95       	com	r30
    355e:	e7 fb       	bst	r30, 7
    3560:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__fp_inf>

00003564 <__addsf3x>:
    3564:	e9 2f       	mov	r30, r25
    3566:	0e 94 81 1c 	call	0x3902	; 0x3902 <__fp_split3>
    356a:	58 f3       	brcs	.-42     	; 0x3542 <__addsf3+0xc>
    356c:	ba 17       	cp	r27, r26
    356e:	62 07       	cpc	r22, r18
    3570:	73 07       	cpc	r23, r19
    3572:	84 07       	cpc	r24, r20
    3574:	95 07       	cpc	r25, r21
    3576:	20 f0       	brcs	.+8      	; 0x3580 <__addsf3x+0x1c>
    3578:	79 f4       	brne	.+30     	; 0x3598 <__addsf3x+0x34>
    357a:	a6 f5       	brtc	.+104    	; 0x35e4 <__addsf3x+0x80>
    357c:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__fp_zero>
    3580:	0e f4       	brtc	.+2      	; 0x3584 <__addsf3x+0x20>
    3582:	e0 95       	com	r30
    3584:	0b 2e       	mov	r0, r27
    3586:	ba 2f       	mov	r27, r26
    3588:	a0 2d       	mov	r26, r0
    358a:	0b 01       	movw	r0, r22
    358c:	b9 01       	movw	r22, r18
    358e:	90 01       	movw	r18, r0
    3590:	0c 01       	movw	r0, r24
    3592:	ca 01       	movw	r24, r20
    3594:	a0 01       	movw	r20, r0
    3596:	11 24       	eor	r1, r1
    3598:	ff 27       	eor	r31, r31
    359a:	59 1b       	sub	r21, r25
    359c:	99 f0       	breq	.+38     	; 0x35c4 <__addsf3x+0x60>
    359e:	59 3f       	cpi	r21, 0xF9	; 249
    35a0:	50 f4       	brcc	.+20     	; 0x35b6 <__addsf3x+0x52>
    35a2:	50 3e       	cpi	r21, 0xE0	; 224
    35a4:	68 f1       	brcs	.+90     	; 0x3600 <__addsf3x+0x9c>
    35a6:	1a 16       	cp	r1, r26
    35a8:	f0 40       	sbci	r31, 0x00	; 0
    35aa:	a2 2f       	mov	r26, r18
    35ac:	23 2f       	mov	r18, r19
    35ae:	34 2f       	mov	r19, r20
    35b0:	44 27       	eor	r20, r20
    35b2:	58 5f       	subi	r21, 0xF8	; 248
    35b4:	f3 cf       	rjmp	.-26     	; 0x359c <__addsf3x+0x38>
    35b6:	46 95       	lsr	r20
    35b8:	37 95       	ror	r19
    35ba:	27 95       	ror	r18
    35bc:	a7 95       	ror	r26
    35be:	f0 40       	sbci	r31, 0x00	; 0
    35c0:	53 95       	inc	r21
    35c2:	c9 f7       	brne	.-14     	; 0x35b6 <__addsf3x+0x52>
    35c4:	7e f4       	brtc	.+30     	; 0x35e4 <__addsf3x+0x80>
    35c6:	1f 16       	cp	r1, r31
    35c8:	ba 0b       	sbc	r27, r26
    35ca:	62 0b       	sbc	r22, r18
    35cc:	73 0b       	sbc	r23, r19
    35ce:	84 0b       	sbc	r24, r20
    35d0:	ba f0       	brmi	.+46     	; 0x3600 <__addsf3x+0x9c>
    35d2:	91 50       	subi	r25, 0x01	; 1
    35d4:	a1 f0       	breq	.+40     	; 0x35fe <__addsf3x+0x9a>
    35d6:	ff 0f       	add	r31, r31
    35d8:	bb 1f       	adc	r27, r27
    35da:	66 1f       	adc	r22, r22
    35dc:	77 1f       	adc	r23, r23
    35de:	88 1f       	adc	r24, r24
    35e0:	c2 f7       	brpl	.-16     	; 0x35d2 <__addsf3x+0x6e>
    35e2:	0e c0       	rjmp	.+28     	; 0x3600 <__addsf3x+0x9c>
    35e4:	ba 0f       	add	r27, r26
    35e6:	62 1f       	adc	r22, r18
    35e8:	73 1f       	adc	r23, r19
    35ea:	84 1f       	adc	r24, r20
    35ec:	48 f4       	brcc	.+18     	; 0x3600 <__addsf3x+0x9c>
    35ee:	87 95       	ror	r24
    35f0:	77 95       	ror	r23
    35f2:	67 95       	ror	r22
    35f4:	b7 95       	ror	r27
    35f6:	f7 95       	ror	r31
    35f8:	9e 3f       	cpi	r25, 0xFE	; 254
    35fa:	08 f0       	brcs	.+2      	; 0x35fe <__addsf3x+0x9a>
    35fc:	b0 cf       	rjmp	.-160    	; 0x355e <__addsf3+0x28>
    35fe:	93 95       	inc	r25
    3600:	88 0f       	add	r24, r24
    3602:	08 f0       	brcs	.+2      	; 0x3606 <__addsf3x+0xa2>
    3604:	99 27       	eor	r25, r25
    3606:	ee 0f       	add	r30, r30
    3608:	97 95       	ror	r25
    360a:	87 95       	ror	r24
    360c:	08 95       	ret

0000360e <__cmpsf2>:
    360e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__fp_cmp>
    3612:	08 f4       	brcc	.+2      	; 0x3616 <__cmpsf2+0x8>
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	08 95       	ret

00003618 <cos>:
    3618:	0e 94 33 1c 	call	0x3866	; 0x3866 <__fp_rempio2>
    361c:	e3 95       	inc	r30
    361e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__fp_sinus>

00003622 <__divsf3>:
    3622:	0e 94 25 1b 	call	0x364a	; 0x364a <__divsf3x>
    3626:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__fp_round>
    362a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__fp_pscB>
    362e:	58 f0       	brcs	.+22     	; 0x3646 <__divsf3+0x24>
    3630:	0e 94 23 1c 	call	0x3846	; 0x3846 <__fp_pscA>
    3634:	40 f0       	brcs	.+16     	; 0x3646 <__divsf3+0x24>
    3636:	29 f4       	brne	.+10     	; 0x3642 <__divsf3+0x20>
    3638:	5f 3f       	cpi	r21, 0xFF	; 255
    363a:	29 f0       	breq	.+10     	; 0x3646 <__divsf3+0x24>
    363c:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__fp_inf>
    3640:	51 11       	cpse	r21, r1
    3642:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__fp_szero>
    3646:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__fp_nan>

0000364a <__divsf3x>:
    364a:	0e 94 81 1c 	call	0x3902	; 0x3902 <__fp_split3>
    364e:	68 f3       	brcs	.-38     	; 0x362a <__divsf3+0x8>

00003650 <__divsf3_pse>:
    3650:	99 23       	and	r25, r25
    3652:	b1 f3       	breq	.-20     	; 0x3640 <__divsf3+0x1e>
    3654:	55 23       	and	r21, r21
    3656:	91 f3       	breq	.-28     	; 0x363c <__divsf3+0x1a>
    3658:	95 1b       	sub	r25, r21
    365a:	55 0b       	sbc	r21, r21
    365c:	bb 27       	eor	r27, r27
    365e:	aa 27       	eor	r26, r26
    3660:	62 17       	cp	r22, r18
    3662:	73 07       	cpc	r23, r19
    3664:	84 07       	cpc	r24, r20
    3666:	38 f0       	brcs	.+14     	; 0x3676 <__divsf3_pse+0x26>
    3668:	9f 5f       	subi	r25, 0xFF	; 255
    366a:	5f 4f       	sbci	r21, 0xFF	; 255
    366c:	22 0f       	add	r18, r18
    366e:	33 1f       	adc	r19, r19
    3670:	44 1f       	adc	r20, r20
    3672:	aa 1f       	adc	r26, r26
    3674:	a9 f3       	breq	.-22     	; 0x3660 <__divsf3_pse+0x10>
    3676:	35 d0       	rcall	.+106    	; 0x36e2 <__divsf3_pse+0x92>
    3678:	0e 2e       	mov	r0, r30
    367a:	3a f0       	brmi	.+14     	; 0x368a <__divsf3_pse+0x3a>
    367c:	e0 e8       	ldi	r30, 0x80	; 128
    367e:	32 d0       	rcall	.+100    	; 0x36e4 <__divsf3_pse+0x94>
    3680:	91 50       	subi	r25, 0x01	; 1
    3682:	50 40       	sbci	r21, 0x00	; 0
    3684:	e6 95       	lsr	r30
    3686:	00 1c       	adc	r0, r0
    3688:	ca f7       	brpl	.-14     	; 0x367c <__divsf3_pse+0x2c>
    368a:	2b d0       	rcall	.+86     	; 0x36e2 <__divsf3_pse+0x92>
    368c:	fe 2f       	mov	r31, r30
    368e:	29 d0       	rcall	.+82     	; 0x36e2 <__divsf3_pse+0x92>
    3690:	66 0f       	add	r22, r22
    3692:	77 1f       	adc	r23, r23
    3694:	88 1f       	adc	r24, r24
    3696:	bb 1f       	adc	r27, r27
    3698:	26 17       	cp	r18, r22
    369a:	37 07       	cpc	r19, r23
    369c:	48 07       	cpc	r20, r24
    369e:	ab 07       	cpc	r26, r27
    36a0:	b0 e8       	ldi	r27, 0x80	; 128
    36a2:	09 f0       	breq	.+2      	; 0x36a6 <__divsf3_pse+0x56>
    36a4:	bb 0b       	sbc	r27, r27
    36a6:	80 2d       	mov	r24, r0
    36a8:	bf 01       	movw	r22, r30
    36aa:	ff 27       	eor	r31, r31
    36ac:	93 58       	subi	r25, 0x83	; 131
    36ae:	5f 4f       	sbci	r21, 0xFF	; 255
    36b0:	3a f0       	brmi	.+14     	; 0x36c0 <__divsf3_pse+0x70>
    36b2:	9e 3f       	cpi	r25, 0xFE	; 254
    36b4:	51 05       	cpc	r21, r1
    36b6:	78 f0       	brcs	.+30     	; 0x36d6 <__divsf3_pse+0x86>
    36b8:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__fp_inf>
    36bc:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__fp_szero>
    36c0:	5f 3f       	cpi	r21, 0xFF	; 255
    36c2:	e4 f3       	brlt	.-8      	; 0x36bc <__divsf3_pse+0x6c>
    36c4:	98 3e       	cpi	r25, 0xE8	; 232
    36c6:	d4 f3       	brlt	.-12     	; 0x36bc <__divsf3_pse+0x6c>
    36c8:	86 95       	lsr	r24
    36ca:	77 95       	ror	r23
    36cc:	67 95       	ror	r22
    36ce:	b7 95       	ror	r27
    36d0:	f7 95       	ror	r31
    36d2:	9f 5f       	subi	r25, 0xFF	; 255
    36d4:	c9 f7       	brne	.-14     	; 0x36c8 <__divsf3_pse+0x78>
    36d6:	88 0f       	add	r24, r24
    36d8:	91 1d       	adc	r25, r1
    36da:	96 95       	lsr	r25
    36dc:	87 95       	ror	r24
    36de:	97 f9       	bld	r25, 7
    36e0:	08 95       	ret
    36e2:	e1 e0       	ldi	r30, 0x01	; 1
    36e4:	66 0f       	add	r22, r22
    36e6:	77 1f       	adc	r23, r23
    36e8:	88 1f       	adc	r24, r24
    36ea:	bb 1f       	adc	r27, r27
    36ec:	62 17       	cp	r22, r18
    36ee:	73 07       	cpc	r23, r19
    36f0:	84 07       	cpc	r24, r20
    36f2:	ba 07       	cpc	r27, r26
    36f4:	20 f0       	brcs	.+8      	; 0x36fe <__divsf3_pse+0xae>
    36f6:	62 1b       	sub	r22, r18
    36f8:	73 0b       	sbc	r23, r19
    36fa:	84 0b       	sbc	r24, r20
    36fc:	ba 0b       	sbc	r27, r26
    36fe:	ee 1f       	adc	r30, r30
    3700:	88 f7       	brcc	.-30     	; 0x36e4 <__divsf3_pse+0x94>
    3702:	e0 95       	com	r30
    3704:	08 95       	ret

00003706 <__fixsfsi>:
    3706:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__fixunssfsi>
    370a:	68 94       	set
    370c:	b1 11       	cpse	r27, r1
    370e:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__fp_szero>
    3712:	08 95       	ret

00003714 <__fixunssfsi>:
    3714:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_splitA>
    3718:	88 f0       	brcs	.+34     	; 0x373c <__fixunssfsi+0x28>
    371a:	9f 57       	subi	r25, 0x7F	; 127
    371c:	98 f0       	brcs	.+38     	; 0x3744 <__fixunssfsi+0x30>
    371e:	b9 2f       	mov	r27, r25
    3720:	99 27       	eor	r25, r25
    3722:	b7 51       	subi	r27, 0x17	; 23
    3724:	b0 f0       	brcs	.+44     	; 0x3752 <__fixunssfsi+0x3e>
    3726:	e1 f0       	breq	.+56     	; 0x3760 <__fixunssfsi+0x4c>
    3728:	66 0f       	add	r22, r22
    372a:	77 1f       	adc	r23, r23
    372c:	88 1f       	adc	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	1a f0       	brmi	.+6      	; 0x3738 <__fixunssfsi+0x24>
    3732:	ba 95       	dec	r27
    3734:	c9 f7       	brne	.-14     	; 0x3728 <__fixunssfsi+0x14>
    3736:	14 c0       	rjmp	.+40     	; 0x3760 <__fixunssfsi+0x4c>
    3738:	b1 30       	cpi	r27, 0x01	; 1
    373a:	91 f0       	breq	.+36     	; 0x3760 <__fixunssfsi+0x4c>
    373c:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__fp_zero>
    3740:	b1 e0       	ldi	r27, 0x01	; 1
    3742:	08 95       	ret
    3744:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__fp_zero>
    3748:	67 2f       	mov	r22, r23
    374a:	78 2f       	mov	r23, r24
    374c:	88 27       	eor	r24, r24
    374e:	b8 5f       	subi	r27, 0xF8	; 248
    3750:	39 f0       	breq	.+14     	; 0x3760 <__fixunssfsi+0x4c>
    3752:	b9 3f       	cpi	r27, 0xF9	; 249
    3754:	cc f3       	brlt	.-14     	; 0x3748 <__fixunssfsi+0x34>
    3756:	86 95       	lsr	r24
    3758:	77 95       	ror	r23
    375a:	67 95       	ror	r22
    375c:	b3 95       	inc	r27
    375e:	d9 f7       	brne	.-10     	; 0x3756 <__fixunssfsi+0x42>
    3760:	3e f4       	brtc	.+14     	; 0x3770 <__fixunssfsi+0x5c>
    3762:	90 95       	com	r25
    3764:	80 95       	com	r24
    3766:	70 95       	com	r23
    3768:	61 95       	neg	r22
    376a:	7f 4f       	sbci	r23, 0xFF	; 255
    376c:	8f 4f       	sbci	r24, 0xFF	; 255
    376e:	9f 4f       	sbci	r25, 0xFF	; 255
    3770:	08 95       	ret

00003772 <__floatunsisf>:
    3772:	e8 94       	clt
    3774:	09 c0       	rjmp	.+18     	; 0x3788 <__floatsisf+0x12>

00003776 <__floatsisf>:
    3776:	97 fb       	bst	r25, 7
    3778:	3e f4       	brtc	.+14     	; 0x3788 <__floatsisf+0x12>
    377a:	90 95       	com	r25
    377c:	80 95       	com	r24
    377e:	70 95       	com	r23
    3780:	61 95       	neg	r22
    3782:	7f 4f       	sbci	r23, 0xFF	; 255
    3784:	8f 4f       	sbci	r24, 0xFF	; 255
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	99 23       	and	r25, r25
    378a:	a9 f0       	breq	.+42     	; 0x37b6 <__floatsisf+0x40>
    378c:	f9 2f       	mov	r31, r25
    378e:	96 e9       	ldi	r25, 0x96	; 150
    3790:	bb 27       	eor	r27, r27
    3792:	93 95       	inc	r25
    3794:	f6 95       	lsr	r31
    3796:	87 95       	ror	r24
    3798:	77 95       	ror	r23
    379a:	67 95       	ror	r22
    379c:	b7 95       	ror	r27
    379e:	f1 11       	cpse	r31, r1
    37a0:	f8 cf       	rjmp	.-16     	; 0x3792 <__floatsisf+0x1c>
    37a2:	fa f4       	brpl	.+62     	; 0x37e2 <__floatsisf+0x6c>
    37a4:	bb 0f       	add	r27, r27
    37a6:	11 f4       	brne	.+4      	; 0x37ac <__floatsisf+0x36>
    37a8:	60 ff       	sbrs	r22, 0
    37aa:	1b c0       	rjmp	.+54     	; 0x37e2 <__floatsisf+0x6c>
    37ac:	6f 5f       	subi	r22, 0xFF	; 255
    37ae:	7f 4f       	sbci	r23, 0xFF	; 255
    37b0:	8f 4f       	sbci	r24, 0xFF	; 255
    37b2:	9f 4f       	sbci	r25, 0xFF	; 255
    37b4:	16 c0       	rjmp	.+44     	; 0x37e2 <__floatsisf+0x6c>
    37b6:	88 23       	and	r24, r24
    37b8:	11 f0       	breq	.+4      	; 0x37be <__floatsisf+0x48>
    37ba:	96 e9       	ldi	r25, 0x96	; 150
    37bc:	11 c0       	rjmp	.+34     	; 0x37e0 <__floatsisf+0x6a>
    37be:	77 23       	and	r23, r23
    37c0:	21 f0       	breq	.+8      	; 0x37ca <__floatsisf+0x54>
    37c2:	9e e8       	ldi	r25, 0x8E	; 142
    37c4:	87 2f       	mov	r24, r23
    37c6:	76 2f       	mov	r23, r22
    37c8:	05 c0       	rjmp	.+10     	; 0x37d4 <__floatsisf+0x5e>
    37ca:	66 23       	and	r22, r22
    37cc:	71 f0       	breq	.+28     	; 0x37ea <__floatsisf+0x74>
    37ce:	96 e8       	ldi	r25, 0x86	; 134
    37d0:	86 2f       	mov	r24, r22
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	2a f0       	brmi	.+10     	; 0x37e2 <__floatsisf+0x6c>
    37d8:	9a 95       	dec	r25
    37da:	66 0f       	add	r22, r22
    37dc:	77 1f       	adc	r23, r23
    37de:	88 1f       	adc	r24, r24
    37e0:	da f7       	brpl	.-10     	; 0x37d8 <__floatsisf+0x62>
    37e2:	88 0f       	add	r24, r24
    37e4:	96 95       	lsr	r25
    37e6:	87 95       	ror	r24
    37e8:	97 f9       	bld	r25, 7
    37ea:	08 95       	ret

000037ec <__fp_cmp>:
    37ec:	99 0f       	add	r25, r25
    37ee:	00 08       	sbc	r0, r0
    37f0:	55 0f       	add	r21, r21
    37f2:	aa 0b       	sbc	r26, r26
    37f4:	e0 e8       	ldi	r30, 0x80	; 128
    37f6:	fe ef       	ldi	r31, 0xFE	; 254
    37f8:	16 16       	cp	r1, r22
    37fa:	17 06       	cpc	r1, r23
    37fc:	e8 07       	cpc	r30, r24
    37fe:	f9 07       	cpc	r31, r25
    3800:	c0 f0       	brcs	.+48     	; 0x3832 <__fp_cmp+0x46>
    3802:	12 16       	cp	r1, r18
    3804:	13 06       	cpc	r1, r19
    3806:	e4 07       	cpc	r30, r20
    3808:	f5 07       	cpc	r31, r21
    380a:	98 f0       	brcs	.+38     	; 0x3832 <__fp_cmp+0x46>
    380c:	62 1b       	sub	r22, r18
    380e:	73 0b       	sbc	r23, r19
    3810:	84 0b       	sbc	r24, r20
    3812:	95 0b       	sbc	r25, r21
    3814:	39 f4       	brne	.+14     	; 0x3824 <__fp_cmp+0x38>
    3816:	0a 26       	eor	r0, r26
    3818:	61 f0       	breq	.+24     	; 0x3832 <__fp_cmp+0x46>
    381a:	23 2b       	or	r18, r19
    381c:	24 2b       	or	r18, r20
    381e:	25 2b       	or	r18, r21
    3820:	21 f4       	brne	.+8      	; 0x382a <__fp_cmp+0x3e>
    3822:	08 95       	ret
    3824:	0a 26       	eor	r0, r26
    3826:	09 f4       	brne	.+2      	; 0x382a <__fp_cmp+0x3e>
    3828:	a1 40       	sbci	r26, 0x01	; 1
    382a:	a6 95       	lsr	r26
    382c:	8f ef       	ldi	r24, 0xFF	; 255
    382e:	81 1d       	adc	r24, r1
    3830:	81 1d       	adc	r24, r1
    3832:	08 95       	ret

00003834 <__fp_inf>:
    3834:	97 f9       	bld	r25, 7
    3836:	9f 67       	ori	r25, 0x7F	; 127
    3838:	80 e8       	ldi	r24, 0x80	; 128
    383a:	70 e0       	ldi	r23, 0x00	; 0
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	08 95       	ret

00003840 <__fp_nan>:
    3840:	9f ef       	ldi	r25, 0xFF	; 255
    3842:	80 ec       	ldi	r24, 0xC0	; 192
    3844:	08 95       	ret

00003846 <__fp_pscA>:
    3846:	00 24       	eor	r0, r0
    3848:	0a 94       	dec	r0
    384a:	16 16       	cp	r1, r22
    384c:	17 06       	cpc	r1, r23
    384e:	18 06       	cpc	r1, r24
    3850:	09 06       	cpc	r0, r25
    3852:	08 95       	ret

00003854 <__fp_pscB>:
    3854:	00 24       	eor	r0, r0
    3856:	0a 94       	dec	r0
    3858:	12 16       	cp	r1, r18
    385a:	13 06       	cpc	r1, r19
    385c:	14 06       	cpc	r1, r20
    385e:	05 06       	cpc	r0, r21
    3860:	08 95       	ret
    3862:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__fp_nan>

00003866 <__fp_rempio2>:
    3866:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_splitA>
    386a:	d8 f3       	brcs	.-10     	; 0x3862 <__fp_pscB+0xe>
    386c:	e8 94       	clt
    386e:	e0 e0       	ldi	r30, 0x00	; 0
    3870:	bb 27       	eor	r27, r27
    3872:	9f 57       	subi	r25, 0x7F	; 127
    3874:	f0 f0       	brcs	.+60     	; 0x38b2 <__fp_rempio2+0x4c>
    3876:	2a ed       	ldi	r18, 0xDA	; 218
    3878:	3f e0       	ldi	r19, 0x0F	; 15
    387a:	49 ec       	ldi	r20, 0xC9	; 201
    387c:	06 c0       	rjmp	.+12     	; 0x388a <__fp_rempio2+0x24>
    387e:	ee 0f       	add	r30, r30
    3880:	bb 0f       	add	r27, r27
    3882:	66 1f       	adc	r22, r22
    3884:	77 1f       	adc	r23, r23
    3886:	88 1f       	adc	r24, r24
    3888:	28 f0       	brcs	.+10     	; 0x3894 <__fp_rempio2+0x2e>
    388a:	b2 3a       	cpi	r27, 0xA2	; 162
    388c:	62 07       	cpc	r22, r18
    388e:	73 07       	cpc	r23, r19
    3890:	84 07       	cpc	r24, r20
    3892:	28 f0       	brcs	.+10     	; 0x389e <__fp_rempio2+0x38>
    3894:	b2 5a       	subi	r27, 0xA2	; 162
    3896:	62 0b       	sbc	r22, r18
    3898:	73 0b       	sbc	r23, r19
    389a:	84 0b       	sbc	r24, r20
    389c:	e3 95       	inc	r30
    389e:	9a 95       	dec	r25
    38a0:	72 f7       	brpl	.-36     	; 0x387e <__fp_rempio2+0x18>
    38a2:	80 38       	cpi	r24, 0x80	; 128
    38a4:	30 f4       	brcc	.+12     	; 0x38b2 <__fp_rempio2+0x4c>
    38a6:	9a 95       	dec	r25
    38a8:	bb 0f       	add	r27, r27
    38aa:	66 1f       	adc	r22, r22
    38ac:	77 1f       	adc	r23, r23
    38ae:	88 1f       	adc	r24, r24
    38b0:	d2 f7       	brpl	.-12     	; 0x38a6 <__fp_rempio2+0x40>
    38b2:	90 48       	sbci	r25, 0x80	; 128
    38b4:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__fp_mpack_finite>

000038b8 <__fp_round>:
    38b8:	09 2e       	mov	r0, r25
    38ba:	03 94       	inc	r0
    38bc:	00 0c       	add	r0, r0
    38be:	11 f4       	brne	.+4      	; 0x38c4 <__fp_round+0xc>
    38c0:	88 23       	and	r24, r24
    38c2:	52 f0       	brmi	.+20     	; 0x38d8 <__fp_round+0x20>
    38c4:	bb 0f       	add	r27, r27
    38c6:	40 f4       	brcc	.+16     	; 0x38d8 <__fp_round+0x20>
    38c8:	bf 2b       	or	r27, r31
    38ca:	11 f4       	brne	.+4      	; 0x38d0 <__fp_round+0x18>
    38cc:	60 ff       	sbrs	r22, 0
    38ce:	04 c0       	rjmp	.+8      	; 0x38d8 <__fp_round+0x20>
    38d0:	6f 5f       	subi	r22, 0xFF	; 255
    38d2:	7f 4f       	sbci	r23, 0xFF	; 255
    38d4:	8f 4f       	sbci	r24, 0xFF	; 255
    38d6:	9f 4f       	sbci	r25, 0xFF	; 255
    38d8:	08 95       	ret

000038da <__fp_sinus>:
    38da:	ef 93       	push	r30
    38dc:	e0 ff       	sbrs	r30, 0
    38de:	07 c0       	rjmp	.+14     	; 0x38ee <__fp_sinus+0x14>
    38e0:	a2 ea       	ldi	r26, 0xA2	; 162
    38e2:	2a ed       	ldi	r18, 0xDA	; 218
    38e4:	3f e0       	ldi	r19, 0x0F	; 15
    38e6:	49 ec       	ldi	r20, 0xC9	; 201
    38e8:	5f eb       	ldi	r21, 0xBF	; 191
    38ea:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__addsf3x>
    38ee:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__fp_round>
    38f2:	0f 90       	pop	r0
    38f4:	03 94       	inc	r0
    38f6:	01 fc       	sbrc	r0, 1
    38f8:	90 58       	subi	r25, 0x80	; 128
    38fa:	e4 e7       	ldi	r30, 0x74	; 116
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__fp_powsodd>

00003902 <__fp_split3>:
    3902:	57 fd       	sbrc	r21, 7
    3904:	90 58       	subi	r25, 0x80	; 128
    3906:	44 0f       	add	r20, r20
    3908:	55 1f       	adc	r21, r21
    390a:	59 f0       	breq	.+22     	; 0x3922 <__fp_splitA+0x10>
    390c:	5f 3f       	cpi	r21, 0xFF	; 255
    390e:	71 f0       	breq	.+28     	; 0x392c <__fp_splitA+0x1a>
    3910:	47 95       	ror	r20

00003912 <__fp_splitA>:
    3912:	88 0f       	add	r24, r24
    3914:	97 fb       	bst	r25, 7
    3916:	99 1f       	adc	r25, r25
    3918:	61 f0       	breq	.+24     	; 0x3932 <__fp_splitA+0x20>
    391a:	9f 3f       	cpi	r25, 0xFF	; 255
    391c:	79 f0       	breq	.+30     	; 0x393c <__fp_splitA+0x2a>
    391e:	87 95       	ror	r24
    3920:	08 95       	ret
    3922:	12 16       	cp	r1, r18
    3924:	13 06       	cpc	r1, r19
    3926:	14 06       	cpc	r1, r20
    3928:	55 1f       	adc	r21, r21
    392a:	f2 cf       	rjmp	.-28     	; 0x3910 <__fp_split3+0xe>
    392c:	46 95       	lsr	r20
    392e:	f1 df       	rcall	.-30     	; 0x3912 <__fp_splitA>
    3930:	08 c0       	rjmp	.+16     	; 0x3942 <__fp_splitA+0x30>
    3932:	16 16       	cp	r1, r22
    3934:	17 06       	cpc	r1, r23
    3936:	18 06       	cpc	r1, r24
    3938:	99 1f       	adc	r25, r25
    393a:	f1 cf       	rjmp	.-30     	; 0x391e <__fp_splitA+0xc>
    393c:	86 95       	lsr	r24
    393e:	71 05       	cpc	r23, r1
    3940:	61 05       	cpc	r22, r1
    3942:	08 94       	sec
    3944:	08 95       	ret

00003946 <__fp_zero>:
    3946:	e8 94       	clt

00003948 <__fp_szero>:
    3948:	bb 27       	eor	r27, r27
    394a:	66 27       	eor	r22, r22
    394c:	77 27       	eor	r23, r23
    394e:	cb 01       	movw	r24, r22
    3950:	97 f9       	bld	r25, 7
    3952:	08 95       	ret

00003954 <__mulsf3>:
    3954:	0e 94 bd 1c 	call	0x397a	; 0x397a <__mulsf3x>
    3958:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__fp_round>
    395c:	0e 94 23 1c 	call	0x3846	; 0x3846 <__fp_pscA>
    3960:	38 f0       	brcs	.+14     	; 0x3970 <__mulsf3+0x1c>
    3962:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__fp_pscB>
    3966:	20 f0       	brcs	.+8      	; 0x3970 <__mulsf3+0x1c>
    3968:	95 23       	and	r25, r21
    396a:	11 f0       	breq	.+4      	; 0x3970 <__mulsf3+0x1c>
    396c:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__fp_inf>
    3970:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__fp_nan>
    3974:	11 24       	eor	r1, r1
    3976:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__fp_szero>

0000397a <__mulsf3x>:
    397a:	0e 94 81 1c 	call	0x3902	; 0x3902 <__fp_split3>
    397e:	70 f3       	brcs	.-36     	; 0x395c <__mulsf3+0x8>

00003980 <__mulsf3_pse>:
    3980:	95 9f       	mul	r25, r21
    3982:	c1 f3       	breq	.-16     	; 0x3974 <__mulsf3+0x20>
    3984:	95 0f       	add	r25, r21
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	55 1f       	adc	r21, r21
    398a:	62 9f       	mul	r22, r18
    398c:	f0 01       	movw	r30, r0
    398e:	72 9f       	mul	r23, r18
    3990:	bb 27       	eor	r27, r27
    3992:	f0 0d       	add	r31, r0
    3994:	b1 1d       	adc	r27, r1
    3996:	63 9f       	mul	r22, r19
    3998:	aa 27       	eor	r26, r26
    399a:	f0 0d       	add	r31, r0
    399c:	b1 1d       	adc	r27, r1
    399e:	aa 1f       	adc	r26, r26
    39a0:	64 9f       	mul	r22, r20
    39a2:	66 27       	eor	r22, r22
    39a4:	b0 0d       	add	r27, r0
    39a6:	a1 1d       	adc	r26, r1
    39a8:	66 1f       	adc	r22, r22
    39aa:	82 9f       	mul	r24, r18
    39ac:	22 27       	eor	r18, r18
    39ae:	b0 0d       	add	r27, r0
    39b0:	a1 1d       	adc	r26, r1
    39b2:	62 1f       	adc	r22, r18
    39b4:	73 9f       	mul	r23, r19
    39b6:	b0 0d       	add	r27, r0
    39b8:	a1 1d       	adc	r26, r1
    39ba:	62 1f       	adc	r22, r18
    39bc:	83 9f       	mul	r24, r19
    39be:	a0 0d       	add	r26, r0
    39c0:	61 1d       	adc	r22, r1
    39c2:	22 1f       	adc	r18, r18
    39c4:	74 9f       	mul	r23, r20
    39c6:	33 27       	eor	r19, r19
    39c8:	a0 0d       	add	r26, r0
    39ca:	61 1d       	adc	r22, r1
    39cc:	23 1f       	adc	r18, r19
    39ce:	84 9f       	mul	r24, r20
    39d0:	60 0d       	add	r22, r0
    39d2:	21 1d       	adc	r18, r1
    39d4:	82 2f       	mov	r24, r18
    39d6:	76 2f       	mov	r23, r22
    39d8:	6a 2f       	mov	r22, r26
    39da:	11 24       	eor	r1, r1
    39dc:	9f 57       	subi	r25, 0x7F	; 127
    39de:	50 40       	sbci	r21, 0x00	; 0
    39e0:	9a f0       	brmi	.+38     	; 0x3a08 <__mulsf3_pse+0x88>
    39e2:	f1 f0       	breq	.+60     	; 0x3a20 <__mulsf3_pse+0xa0>
    39e4:	88 23       	and	r24, r24
    39e6:	4a f0       	brmi	.+18     	; 0x39fa <__mulsf3_pse+0x7a>
    39e8:	ee 0f       	add	r30, r30
    39ea:	ff 1f       	adc	r31, r31
    39ec:	bb 1f       	adc	r27, r27
    39ee:	66 1f       	adc	r22, r22
    39f0:	77 1f       	adc	r23, r23
    39f2:	88 1f       	adc	r24, r24
    39f4:	91 50       	subi	r25, 0x01	; 1
    39f6:	50 40       	sbci	r21, 0x00	; 0
    39f8:	a9 f7       	brne	.-22     	; 0x39e4 <__mulsf3_pse+0x64>
    39fa:	9e 3f       	cpi	r25, 0xFE	; 254
    39fc:	51 05       	cpc	r21, r1
    39fe:	80 f0       	brcs	.+32     	; 0x3a20 <__mulsf3_pse+0xa0>
    3a00:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__fp_inf>
    3a04:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__fp_szero>
    3a08:	5f 3f       	cpi	r21, 0xFF	; 255
    3a0a:	e4 f3       	brlt	.-8      	; 0x3a04 <__mulsf3_pse+0x84>
    3a0c:	98 3e       	cpi	r25, 0xE8	; 232
    3a0e:	d4 f3       	brlt	.-12     	; 0x3a04 <__mulsf3_pse+0x84>
    3a10:	86 95       	lsr	r24
    3a12:	77 95       	ror	r23
    3a14:	67 95       	ror	r22
    3a16:	b7 95       	ror	r27
    3a18:	f7 95       	ror	r31
    3a1a:	e7 95       	ror	r30
    3a1c:	9f 5f       	subi	r25, 0xFF	; 255
    3a1e:	c1 f7       	brne	.-16     	; 0x3a10 <__mulsf3_pse+0x90>
    3a20:	fe 2b       	or	r31, r30
    3a22:	88 0f       	add	r24, r24
    3a24:	91 1d       	adc	r25, r1
    3a26:	96 95       	lsr	r25
    3a28:	87 95       	ror	r24
    3a2a:	97 f9       	bld	r25, 7
    3a2c:	08 95       	ret

00003a2e <sin>:
    3a2e:	9f 93       	push	r25
    3a30:	0e 94 33 1c 	call	0x3866	; 0x3866 <__fp_rempio2>
    3a34:	0f 90       	pop	r0
    3a36:	07 fc       	sbrc	r0, 7
    3a38:	ee 5f       	subi	r30, 0xFE	; 254
    3a3a:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__fp_sinus>

00003a3e <__fp_mpack>:
    3a3e:	9f 3f       	cpi	r25, 0xFF	; 255
    3a40:	31 f0       	breq	.+12     	; 0x3a4e <__fp_mpack_finite+0xc>

00003a42 <__fp_mpack_finite>:
    3a42:	91 50       	subi	r25, 0x01	; 1
    3a44:	20 f4       	brcc	.+8      	; 0x3a4e <__fp_mpack_finite+0xc>
    3a46:	87 95       	ror	r24
    3a48:	77 95       	ror	r23
    3a4a:	67 95       	ror	r22
    3a4c:	b7 95       	ror	r27
    3a4e:	88 0f       	add	r24, r24
    3a50:	91 1d       	adc	r25, r1
    3a52:	96 95       	lsr	r25
    3a54:	87 95       	ror	r24
    3a56:	97 f9       	bld	r25, 7
    3a58:	08 95       	ret

00003a5a <__fp_powsodd>:
    3a5a:	9f 93       	push	r25
    3a5c:	8f 93       	push	r24
    3a5e:	7f 93       	push	r23
    3a60:	6f 93       	push	r22
    3a62:	ff 93       	push	r31
    3a64:	ef 93       	push	r30
    3a66:	9b 01       	movw	r18, r22
    3a68:	ac 01       	movw	r20, r24
    3a6a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__mulsf3>
    3a6e:	ef 91       	pop	r30
    3a70:	ff 91       	pop	r31
    3a72:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__fp_powser>
    3a76:	2f 91       	pop	r18
    3a78:	3f 91       	pop	r19
    3a7a:	4f 91       	pop	r20
    3a7c:	5f 91       	pop	r21
    3a7e:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <__mulsf3>

00003a82 <__fp_powser>:
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	1f 93       	push	r17
    3a88:	0f 93       	push	r16
    3a8a:	ff 92       	push	r15
    3a8c:	ef 92       	push	r14
    3a8e:	df 92       	push	r13
    3a90:	7b 01       	movw	r14, r22
    3a92:	8c 01       	movw	r16, r24
    3a94:	68 94       	set
    3a96:	06 c0       	rjmp	.+12     	; 0x3aa4 <__fp_powser+0x22>
    3a98:	da 2e       	mov	r13, r26
    3a9a:	ef 01       	movw	r28, r30
    3a9c:	0e 94 bd 1c 	call	0x397a	; 0x397a <__mulsf3x>
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e8 94       	clt
    3aa4:	a5 91       	lpm	r26, Z+
    3aa6:	25 91       	lpm	r18, Z+
    3aa8:	35 91       	lpm	r19, Z+
    3aaa:	45 91       	lpm	r20, Z+
    3aac:	55 91       	lpm	r21, Z+
    3aae:	a6 f3       	brts	.-24     	; 0x3a98 <__fp_powser+0x16>
    3ab0:	ef 01       	movw	r28, r30
    3ab2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__addsf3x>
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	97 01       	movw	r18, r14
    3aba:	a8 01       	movw	r20, r16
    3abc:	da 94       	dec	r13
    3abe:	69 f7       	brne	.-38     	; 0x3a9a <__fp_powser+0x18>
    3ac0:	df 90       	pop	r13
    3ac2:	ef 90       	pop	r14
    3ac4:	ff 90       	pop	r15
    3ac6:	0f 91       	pop	r16
    3ac8:	1f 91       	pop	r17
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <__mulsi3>:
    3ad0:	db 01       	movw	r26, r22
    3ad2:	8f 93       	push	r24
    3ad4:	9f 93       	push	r25
    3ad6:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__muluhisi3>
    3ada:	bf 91       	pop	r27
    3adc:	af 91       	pop	r26
    3ade:	a2 9f       	mul	r26, r18
    3ae0:	80 0d       	add	r24, r0
    3ae2:	91 1d       	adc	r25, r1
    3ae4:	a3 9f       	mul	r26, r19
    3ae6:	90 0d       	add	r25, r0
    3ae8:	b2 9f       	mul	r27, r18
    3aea:	90 0d       	add	r25, r0
    3aec:	11 24       	eor	r1, r1
    3aee:	08 95       	ret

00003af0 <__divmodhi4>:
    3af0:	97 fb       	bst	r25, 7
    3af2:	07 2e       	mov	r0, r23
    3af4:	16 f4       	brtc	.+4      	; 0x3afa <__divmodhi4+0xa>
    3af6:	00 94       	com	r0
    3af8:	07 d0       	rcall	.+14     	; 0x3b08 <__divmodhi4_neg1>
    3afa:	77 fd       	sbrc	r23, 7
    3afc:	09 d0       	rcall	.+18     	; 0x3b10 <__divmodhi4_neg2>
    3afe:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodhi4>
    3b02:	07 fc       	sbrc	r0, 7
    3b04:	05 d0       	rcall	.+10     	; 0x3b10 <__divmodhi4_neg2>
    3b06:	3e f4       	brtc	.+14     	; 0x3b16 <__divmodhi4_exit>

00003b08 <__divmodhi4_neg1>:
    3b08:	90 95       	com	r25
    3b0a:	81 95       	neg	r24
    3b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0e:	08 95       	ret

00003b10 <__divmodhi4_neg2>:
    3b10:	70 95       	com	r23
    3b12:	61 95       	neg	r22
    3b14:	7f 4f       	sbci	r23, 0xFF	; 255

00003b16 <__divmodhi4_exit>:
    3b16:	08 95       	ret

00003b18 <__udivmodsi4>:
    3b18:	a1 e2       	ldi	r26, 0x21	; 33
    3b1a:	1a 2e       	mov	r1, r26
    3b1c:	aa 1b       	sub	r26, r26
    3b1e:	bb 1b       	sub	r27, r27
    3b20:	fd 01       	movw	r30, r26
    3b22:	0d c0       	rjmp	.+26     	; 0x3b3e <__udivmodsi4_ep>

00003b24 <__udivmodsi4_loop>:
    3b24:	aa 1f       	adc	r26, r26
    3b26:	bb 1f       	adc	r27, r27
    3b28:	ee 1f       	adc	r30, r30
    3b2a:	ff 1f       	adc	r31, r31
    3b2c:	a2 17       	cp	r26, r18
    3b2e:	b3 07       	cpc	r27, r19
    3b30:	e4 07       	cpc	r30, r20
    3b32:	f5 07       	cpc	r31, r21
    3b34:	20 f0       	brcs	.+8      	; 0x3b3e <__udivmodsi4_ep>
    3b36:	a2 1b       	sub	r26, r18
    3b38:	b3 0b       	sbc	r27, r19
    3b3a:	e4 0b       	sbc	r30, r20
    3b3c:	f5 0b       	sbc	r31, r21

00003b3e <__udivmodsi4_ep>:
    3b3e:	66 1f       	adc	r22, r22
    3b40:	77 1f       	adc	r23, r23
    3b42:	88 1f       	adc	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	1a 94       	dec	r1
    3b48:	69 f7       	brne	.-38     	; 0x3b24 <__udivmodsi4_loop>
    3b4a:	60 95       	com	r22
    3b4c:	70 95       	com	r23
    3b4e:	80 95       	com	r24
    3b50:	90 95       	com	r25
    3b52:	9b 01       	movw	r18, r22
    3b54:	ac 01       	movw	r20, r24
    3b56:	bd 01       	movw	r22, r26
    3b58:	cf 01       	movw	r24, r30
    3b5a:	08 95       	ret

00003b5c <__divmodsi4>:
    3b5c:	05 2e       	mov	r0, r21
    3b5e:	97 fb       	bst	r25, 7
    3b60:	1e f4       	brtc	.+6      	; 0x3b68 <__divmodsi4+0xc>
    3b62:	00 94       	com	r0
    3b64:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <__negsi2>
    3b68:	57 fd       	sbrc	r21, 7
    3b6a:	07 d0       	rcall	.+14     	; 0x3b7a <__divmodsi4_neg2>
    3b6c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    3b70:	07 fc       	sbrc	r0, 7
    3b72:	03 d0       	rcall	.+6      	; 0x3b7a <__divmodsi4_neg2>
    3b74:	4e f4       	brtc	.+18     	; 0x3b88 <__divmodsi4_exit>
    3b76:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <__negsi2>

00003b7a <__divmodsi4_neg2>:
    3b7a:	50 95       	com	r21
    3b7c:	40 95       	com	r20
    3b7e:	30 95       	com	r19
    3b80:	21 95       	neg	r18
    3b82:	3f 4f       	sbci	r19, 0xFF	; 255
    3b84:	4f 4f       	sbci	r20, 0xFF	; 255
    3b86:	5f 4f       	sbci	r21, 0xFF	; 255

00003b88 <__divmodsi4_exit>:
    3b88:	08 95       	ret

00003b8a <__negsi2>:
    3b8a:	90 95       	com	r25
    3b8c:	80 95       	com	r24
    3b8e:	70 95       	com	r23
    3b90:	61 95       	neg	r22
    3b92:	7f 4f       	sbci	r23, 0xFF	; 255
    3b94:	8f 4f       	sbci	r24, 0xFF	; 255
    3b96:	9f 4f       	sbci	r25, 0xFF	; 255
    3b98:	08 95       	ret

00003b9a <__tablejump2__>:
    3b9a:	ee 0f       	add	r30, r30
    3b9c:	ff 1f       	adc	r31, r31
    3b9e:	05 90       	lpm	r0, Z+
    3ba0:	f4 91       	lpm	r31, Z
    3ba2:	e0 2d       	mov	r30, r0
    3ba4:	09 94       	ijmp

00003ba6 <__muluhisi3>:
    3ba6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <__umulhisi3>
    3baa:	a5 9f       	mul	r26, r21
    3bac:	90 0d       	add	r25, r0
    3bae:	b4 9f       	mul	r27, r20
    3bb0:	90 0d       	add	r25, r0
    3bb2:	a4 9f       	mul	r26, r20
    3bb4:	80 0d       	add	r24, r0
    3bb6:	91 1d       	adc	r25, r1
    3bb8:	11 24       	eor	r1, r1
    3bba:	08 95       	ret

00003bbc <__mulshisi3>:
    3bbc:	b7 ff       	sbrs	r27, 7
    3bbe:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__muluhisi3>

00003bc2 <__mulohisi3>:
    3bc2:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__muluhisi3>
    3bc6:	82 1b       	sub	r24, r18
    3bc8:	93 0b       	sbc	r25, r19
    3bca:	08 95       	ret

00003bcc <__udivmodhi4>:
    3bcc:	aa 1b       	sub	r26, r26
    3bce:	bb 1b       	sub	r27, r27
    3bd0:	51 e1       	ldi	r21, 0x11	; 17
    3bd2:	07 c0       	rjmp	.+14     	; 0x3be2 <__udivmodhi4_ep>

00003bd4 <__udivmodhi4_loop>:
    3bd4:	aa 1f       	adc	r26, r26
    3bd6:	bb 1f       	adc	r27, r27
    3bd8:	a6 17       	cp	r26, r22
    3bda:	b7 07       	cpc	r27, r23
    3bdc:	10 f0       	brcs	.+4      	; 0x3be2 <__udivmodhi4_ep>
    3bde:	a6 1b       	sub	r26, r22
    3be0:	b7 0b       	sbc	r27, r23

00003be2 <__udivmodhi4_ep>:
    3be2:	88 1f       	adc	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	5a 95       	dec	r21
    3be8:	a9 f7       	brne	.-22     	; 0x3bd4 <__udivmodhi4_loop>
    3bea:	80 95       	com	r24
    3bec:	90 95       	com	r25
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	08 95       	ret

00003bf4 <__umulhisi3>:
    3bf4:	a2 9f       	mul	r26, r18
    3bf6:	b0 01       	movw	r22, r0
    3bf8:	b3 9f       	mul	r27, r19
    3bfa:	c0 01       	movw	r24, r0
    3bfc:	a3 9f       	mul	r26, r19
    3bfe:	70 0d       	add	r23, r0
    3c00:	81 1d       	adc	r24, r1
    3c02:	11 24       	eor	r1, r1
    3c04:	91 1d       	adc	r25, r1
    3c06:	b2 9f       	mul	r27, r18
    3c08:	70 0d       	add	r23, r0
    3c0a:	81 1d       	adc	r24, r1
    3c0c:	11 24       	eor	r1, r1
    3c0e:	91 1d       	adc	r25, r1
    3c10:	08 95       	ret

00003c12 <do_rand>:
    3c12:	8f 92       	push	r8
    3c14:	9f 92       	push	r9
    3c16:	af 92       	push	r10
    3c18:	bf 92       	push	r11
    3c1a:	cf 92       	push	r12
    3c1c:	df 92       	push	r13
    3c1e:	ef 92       	push	r14
    3c20:	ff 92       	push	r15
    3c22:	cf 93       	push	r28
    3c24:	df 93       	push	r29
    3c26:	ec 01       	movw	r28, r24
    3c28:	68 81       	ld	r22, Y
    3c2a:	79 81       	ldd	r23, Y+1	; 0x01
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c30:	61 15       	cp	r22, r1
    3c32:	71 05       	cpc	r23, r1
    3c34:	81 05       	cpc	r24, r1
    3c36:	91 05       	cpc	r25, r1
    3c38:	21 f4       	brne	.+8      	; 0x3c42 <do_rand+0x30>
    3c3a:	64 e2       	ldi	r22, 0x24	; 36
    3c3c:	79 ed       	ldi	r23, 0xD9	; 217
    3c3e:	8b e5       	ldi	r24, 0x5B	; 91
    3c40:	97 e0       	ldi	r25, 0x07	; 7
    3c42:	2d e1       	ldi	r18, 0x1D	; 29
    3c44:	33 ef       	ldi	r19, 0xF3	; 243
    3c46:	41 e0       	ldi	r20, 0x01	; 1
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodsi4>
    3c4e:	49 01       	movw	r8, r18
    3c50:	5a 01       	movw	r10, r20
    3c52:	9b 01       	movw	r18, r22
    3c54:	ac 01       	movw	r20, r24
    3c56:	a7 ea       	ldi	r26, 0xA7	; 167
    3c58:	b1 e4       	ldi	r27, 0x41	; 65
    3c5a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__muluhisi3>
    3c5e:	6b 01       	movw	r12, r22
    3c60:	7c 01       	movw	r14, r24
    3c62:	ac ee       	ldi	r26, 0xEC	; 236
    3c64:	b4 ef       	ldi	r27, 0xF4	; 244
    3c66:	a5 01       	movw	r20, r10
    3c68:	94 01       	movw	r18, r8
    3c6a:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <__mulohisi3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	8c 0d       	add	r24, r12
    3c74:	9d 1d       	adc	r25, r13
    3c76:	ae 1d       	adc	r26, r14
    3c78:	bf 1d       	adc	r27, r15
    3c7a:	b7 ff       	sbrs	r27, 7
    3c7c:	03 c0       	rjmp	.+6      	; 0x3c84 <do_rand+0x72>
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	a1 09       	sbc	r26, r1
    3c82:	b0 48       	sbci	r27, 0x80	; 128
    3c84:	88 83       	st	Y, r24
    3c86:	99 83       	std	Y+1, r25	; 0x01
    3c88:	aa 83       	std	Y+2, r26	; 0x02
    3c8a:	bb 83       	std	Y+3, r27	; 0x03
    3c8c:	9f 77       	andi	r25, 0x7F	; 127
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	9f 90       	pop	r9
    3ca0:	8f 90       	pop	r8
    3ca2:	08 95       	ret

00003ca4 <rand_r>:
    3ca4:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <do_rand>
    3ca8:	08 95       	ret

00003caa <rand>:
    3caa:	80 e6       	ldi	r24, 0x60	; 96
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <do_rand>
    3cb2:	08 95       	ret

00003cb4 <srand>:
    3cb4:	a0 e0       	ldi	r26, 0x00	; 0
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    3cbc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    3cc0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    3cc4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    3cc8:	08 95       	ret

00003cca <_exit>:
    3cca:	f8 94       	cli

00003ccc <__stop_program>:
    3ccc:	ff cf       	rjmp	.-2      	; 0x3ccc <__stop_program>
