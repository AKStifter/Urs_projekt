
Urs_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00003c58  00003cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800064  00800064  00003cf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00003d60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fac  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00006fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001099  00000000  00000000  00007694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000964  00000000  00000000  00008730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aca  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001468  00000000  00000000  00009b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000afc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__ctors_end>
       4:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
       8:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
       c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      10:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      14:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      18:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      1c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      20:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      24:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      28:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      2c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      30:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      34:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      38:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      3c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      40:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      44:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      48:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      4c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      50:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x55f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <BigFont>:
      72:	10 10 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
	...
      9a:	07 00 0f 80 0f 80 0f 80 0f 80 0f 80 07 00 07 00     ................
      aa:	00 00 00 00 07 00 07 00 07 00 00 00 00 00 0e 38     ...............8
      ba:	0e 38 0e 38 0e 38 06 30 00 00 00 00 00 00 00 00     .8.8.8.0........
	...
      d6:	00 00 0c 30 0c 30 0c 30 7f fe 7f fe 0c 30 0c 30     ...0.0.0.....0.0
      e6:	0c 30 0c 30 7f fe 7f fe 0c 30 0c 30 0c 30 00 00     .0.0.....0.0.0..
      f6:	00 00 02 40 02 40 0f f8 1f f8 1a 40 1a 40 1f f0     ...@.@.....@.@..
     106:	0f f8 02 58 02 58 1f f8 1f f0 02 40 02 40 00 00     ...X.X.....@.@..
     116:	00 00 00 00 00 00 0e 10 0e 30 0e 70 00 e0 01 c0     .........0.p....
     126:	03 80 07 00 0e 70 0c 70 08 70 00 00 00 00 00 00     .....p.p.p......
     136:	00 00 00 00 0f 00 19 80 19 80 19 80 0f 00 0f 08     ................
     146:	0f 98 19 f8 18 f0 18 e0 19 f0 0f 98 00 00 00 00     ................
     156:	00 00 00 00 07 00 07 00 07 00 0e 00 00 00 00 00     ................
	...
     17a:	00 f0 01 c0 03 80 07 00 0e 00 0e 00 0e 00 0e 00     ................
     18a:	07 00 03 80 01 c0 00 f0 00 00 00 00 00 00 00 00     ................
     19a:	0f 00 03 80 01 c0 00 e0 00 70 00 70 00 70 00 70     .........p.p.p.p
     1aa:	00 e0 01 c0 03 80 0f 00 00 00 00 00 00 00 00 00     ................
     1ba:	01 80 11 88 09 90 07 e0 07 e0 3f fc 3f fc 07 e0     ..........?.?...
     1ca:	07 e0 09 90 11 88 01 80 00 00 00 00 00 00 00 00     ................
     1da:	00 00 00 00 01 80 01 80 01 80 0f f0 0f f0 01 80     ................
     1ea:	01 80 01 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     20a:	00 00 07 00 07 00 07 00 0e 00 00 00 00 00 00 00     ................
	...
     222:	00 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
	...
     24a:	00 00 07 00 07 00 07 00 00 00 00 00 00 00 00 00     ................
     25a:	00 02 00 06 00 0e 00 1c 00 38 00 70 00 e0 01 c0     .........8.p....
     26a:	03 80 07 00 0e 00 1c 00 00 00 00 00 00 00 00 00     ................
     27a:	0f f0 1c 38 1c 78 1c f8 1c f8 1d b8 1d b8 1f 38     ...8.x.........8
     28a:	1f 38 1e 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     29a:	01 80 01 80 03 80 1f 80 1f 80 03 80 03 80 03 80     ................
     2aa:	03 80 03 80 03 80 1f f0 00 00 00 00 00 00 00 00     ................
     2ba:	0f e0 1c 70 1c 38 00 38 00 70 00 e0 01 c0 03 80     ...p.8.8.p......
     2ca:	07 00 0e 38 1c 38 1f f8 00 00 00 00 00 00 00 00     ...8.8..........
     2da:	0f e0 1c 70 1c 38 00 38 00 70 03 c0 03 c0 00 70     ...p.8.8.p.....p
     2ea:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     2fa:	00 e0 01 e0 03 e0 06 e0 0c e0 18 e0 1f f8 1f f8     ................
     30a:	00 e0 00 e0 00 e0 03 f8 00 00 00 00 00 00 00 00     ................
     31a:	1f f8 1c 00 1c 00 1c 00 1c 00 1f e0 1f f0 00 78     ...............x
     32a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     33a:	03 e0 07 00 0e 00 1c 00 1c 00 1f f0 1f f8 1c 38     ...............8
     34a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     35a:	1f fc 1c 1c 1c 1c 1c 1c 00 1c 00 38 00 70 00 e0     ...........8.p..
     36a:	01 c0 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
     37a:	0f f0 1c 38 1c 38 1c 38 1f 38 07 e0 07 e0 1c f8     ...8.8.8.8......
     38a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     39a:	0f f0 1c 38 1c 38 1c 38 1c 38 1f f8 0f f8 00 38     ...8.8.8.8.....8
     3aa:	00 38 00 70 00 e0 07 c0 00 00 00 00 00 00 00 00     .8.p............
     3ba:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     3ca:	03 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3da:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     3ea:	03 80 03 80 07 00 00 00 00 00 00 00 00 00 00 70     ...............p
     3fa:	00 e0 01 c0 03 80 07 00 0e 00 1c 00 1c 00 0e 00     ................
     40a:	07 00 03 80 01 c0 00 e0 00 70 00 00 00 00 00 00     .........p......
     41a:	00 00 00 00 00 00 3f fc 3f fc 00 00 00 00 3f fc     ......?.?.....?.
     42a:	3f fc 00 00 00 00 00 00 00 00 00 00 00 00 1c 00     ?...............
     43a:	0e 00 07 00 03 80 01 c0 00 e0 00 70 00 70 00 e0     ...........p.p..
     44a:	01 c0 03 80 07 00 0e 00 1c 00 00 00 00 00 03 c0     ................
     45a:	0f f0 1e 78 18 38 00 38 00 70 00 e0 01 c0 01 c0     ...x.8.8.p......
     46a:	00 00 00 00 01 c0 01 c0 01 c0 00 00 00 00 0f f8     ................
     47a:	1c 1c 1c 1c 1c 1c 1c 1c 1c fc 1c fc 1c fc 1c fc     ................
     48a:	1c 00 1c 00 1c 00 1f f0 07 f8 00 00 00 00 00 00     ................
     49a:	03 c0 07 e0 0e 70 1c 38 1c 38 1c 38 1c 38 1f f8     .....p.8.8.8.8..
     4aa:	1c 38 1c 38 1c 38 1c 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     4ba:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 38     ...8.8.8.8.....8
     4ca:	0e 38 0e 38 0e 38 1f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     4da:	07 f0 0e 38 1c 38 1c 00 1c 00 1c 00 1c 00 1c 00     ...8.8..........
     4ea:	1c 00 1c 38 0e 38 07 f0 00 00 00 00 00 00 00 00     ...8.8..........
     4fa:	1f e0 0e 70 0e 38 0e 38 0e 38 0e 38 0e 38 0e 38     ...p.8.8.8.8.8.8
     50a:	0e 38 0e 38 0e 70 1f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     51a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     52a:	0e 00 0e 08 0e 18 1f f8 00 00 00 00 00 00 00 00     ................
     53a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     54a:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     55a:	07 f0 0e 38 1c 38 1c 38 1c 00 1c 00 1c 00 1c f8     ...8.8.8........
     56a:	1c 38 1c 38 0e 38 07 f8 00 00 00 00 00 00 00 00     .8.8.8..........
     57a:	1c 70 1c 70 1c 70 1c 70 1c 70 1f f0 1f f0 1c 70     .p.p.p.p.p.....p
     58a:	1c 70 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     .p.p.p.p........
     59a:	0f e0 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     5aa:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     5ba:	01 fc 00 70 00 70 00 70 00 70 00 70 00 70 38 70     ...p.p.p.p.p.p8p
     5ca:	38 70 38 70 38 70 0f e0 00 00 00 00 00 00 00 00     8p8p8p..........
     5da:	1e 38 0e 38 0e 70 0e e0 0f c0 0f 80 0f 80 0f c0     .8.8.p..........
     5ea:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     5fa:	1f 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     60a:	0e 08 0e 18 0e 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     61a:	1c 1c 1e 3c 1f 7c 1f fc 1f fc 1d dc 1c 9c 1c 1c     ...<.|..........
     62a:	1c 1c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     ................
     63a:	1c 1c 1c 1c 1e 1c 1f 1c 1f 9c 1d dc 1c fc 1c 7c     ...............|
     64a:	1c 3c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     .<..............
     65a:	03 e0 07 f0 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     .....8..........
     66a:	1c 1c 0e 38 07 f0 03 e0 00 00 00 00 00 00 00 00     ...8............
     67a:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 00     ...8.8.8.8......
     68a:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     69a:	03 e0 0f 78 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 7c     ...x.8.........|
     6aa:	1c fc 0f f8 0f f8 00 38 00 fc 00 00 00 00 00 00     .......8........
     6ba:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 70     ...8.8.8.8.....p
     6ca:	0e 38 0e 38 0e 38 1e 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     6da:	0f f0 1c 38 1c 38 1c 38 1c 00 0f e0 07 f0 00 38     ...8.8.8.......8
     6ea:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     6fa:	1f fc 19 cc 11 c4 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     70a:	01 c0 01 c0 01 c0 07 f0 00 00 00 00 00 00 00 00     ................
     71a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     72a:	1c 70 1c 70 1c 70 0f e0 00 00 00 00 00 00 00 00     .p.p.p..........
     73a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     74a:	1c 70 0e e0 07 c0 03 80 00 00 00 00 00 00 00 00     .p..............
     75a:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 1c 9c     ................
     76a:	0f f8 0f f8 07 70 07 70 00 00 00 00 00 00 00 00     .....p.p........
     77a:	1c 70 1c 70 1c 70 0e e0 07 c0 03 80 03 80 07 c0     .p.p.p..........
     78a:	0e e0 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     ...p.p.p........
     79a:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
     7aa:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     7ba:	1f f8 1c 38 18 38 10 70 00 e0 01 c0 03 80 07 00     ...8.8.p........
     7ca:	0e 08 1c 18 1c 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     7da:	07 f0 07 00 07 00 07 00 07 00 07 00 07 00 07 00     ................
     7ea:	07 00 07 00 07 00 07 f0 00 00 00 00 00 00 00 00     ................
     7fa:	10 00 18 00 1c 00 0e 00 07 00 03 80 01 c0 00 e0     ................
     80a:	00 70 00 38 00 1c 00 07 00 00 00 00 00 00 00 00     .p.8............
     81a:	07 f0 00 70 00 70 00 70 00 70 00 70 00 70 00 70     ...p.p.p.p.p.p.p
     82a:	00 70 00 70 00 70 07 f0 00 00 00 00 00 00 01 80     .p.p.p..........
     83a:	03 c0 07 e0 0e 70 1c 38 00 00 00 00 00 00 00 00     .....p.8........
	...
     872:	7f ff 7f ff 00 00 00 00 1c 00 1c 00 07 00 07 00     ................
	...
     8a2:	0f e0 00 70 00 70 0f f0 1c 70 1c 70 1c 70 0f d8     ...p.p...p.p.p..
	...
     8ba:	1e 00 0e 00 0e 00 0e 00 0f f0 0e 38 0e 38 0e 38     ...........8.8.8
     8ca:	0e 38 0e 38 0e 38 1b f0 00 00 00 00 00 00 00 00     .8.8.8..........
	...
     8e2:	0f e0 1c 70 1c 70 1c 00 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     8fa:	00 f8 00 70 00 70 00 70 0f f0 1c 70 1c 70 1c 70     ...p.p.p...p.p.p
     90a:	1c 70 1c 70 1c 70 0f d8 00 00 00 00 00 00 00 00     .p.p.p..........
	...
     922:	0f e0 1c 70 1c 70 1f f0 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     93a:	03 e0 07 70 07 70 07 00 07 00 1f e0 1f e0 07 00     ...p.p..........
     94a:	07 00 07 00 07 00 1f c0 00 00 00 00 00 00 00 00     ................
	...
     962:	0f d8 1c 70 1c 70 1c 70 1c 70 0f f0 07 f0 00 70     ...p.p.p.p.....p
     972:	1c 70 0f e0 00 00 00 00 1e 00 0e 00 0e 00 0e 00     .p..............
     982:	0e f0 0f 38 0f 38 0e 38 0e 38 0e 38 0e 38 1e 38     ...8.8.8.8.8.8.8
	...
     99a:	01 c0 01 c0 01 c0 00 00 0f c0 01 c0 01 c0 01 c0     ................
     9aa:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
     9ba:	00 70 00 70 00 70 00 00 03 f0 00 70 00 70 00 70     .p.p.p.....p.p.p
     9ca:	00 70 00 70 00 70 1c 70 0c f0 07 e0 00 00 00 00     .p.p.p.p........
     9da:	1e 00 0e 00 0e 00 0e 00 0e 38 0e 70 0e e0 0f c0     .........8.p....
     9ea:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     9fa:	0f c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     a0a:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
	...
     a22:	1f f8 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c     ................
	...
     a42:	1f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     ...p.p.p.p.p.p.p
	...
     a62:	0f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f e0     ...p.p.p.p.p.p..
	...
     a82:	1b f0 0e 38 0e 38 0e 38 0e 38 0e 38 0f f0 0e 00     ...8.8.8.8.8....
     a92:	0e 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aa2:	1f b0 38 e0 38 e0 38 e0 38 e0 38 e0 1f e0 00 e0     ..8.8.8.8.8.....
     ab2:	00 e0 01 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ac2:	1e f0 0f f8 0f 38 0e 00 0e 00 0e 00 0e 00 1f 00     .....8..........
	...
     ae2:	0f e0 1c 30 1c 30 0f 80 03 e0 18 70 18 70 0f e0     ...0.0.....p.p..
	...
     afa:	00 00 01 00 03 00 07 00 1f f0 07 00 07 00 07 00     ................
     b0a:	07 00 07 70 07 70 03 e0 00 00 00 00 00 00 00 00     ...p.p..........
	...
     b22:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f d8     .p.p.p.p.p.p.p..
	...
     b42:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
	...
     b62:	1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 0f f8 07 70 07 70     .............p.p
	...
     b82:	1c e0 1c e0 0f c0 07 80 07 80 0f c0 1c e0 1c e0     ................
	...
     ba2:	0e 38 0e 38 0e 38 0e 38 0e 38 07 f0 03 e0 00 e0     .8.8.8.8.8......
     bb2:	01 c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     bc2:	1f e0 18 e0 11 c0 03 80 07 00 0e 20 1c 60 1f e0     ........... .`..
	...
     bda:	01 f8 03 80 03 80 03 80 07 00 1c 00 1c 00 07 00     ................
     bea:	03 80 03 80 03 80 01 f8 00 00 00 00 00 00 01 c0     ................
     bfa:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     c0a:	01 c0 01 c0 01 c0 01 c0 01 c0 00 00 00 00 00 00     ................
     c1a:	1f 80 01 c0 01 c0 01 c0 00 e0 00 38 00 38 00 e0     ...........8.8..
     c2a:	01 c0 01 c0 01 c0 1f 80 00 00 00 00 00 00 00 00     ................
     c3a:	1f 1c 3b 9c 39 dc 38 f8 00 00 00 00 00 00 00 00     ..;.9.8.........
	...

00000c56 <__ctors_start>:
     c56:	00 0d       	add	r16, r0

00000c58 <__ctors_end>:
     c58:	11 24       	eor	r1, r1
     c5a:	1f be       	out	0x3f, r1	; 63
     c5c:	cf e5       	ldi	r28, 0x5F	; 95
     c5e:	d4 e0       	ldi	r29, 0x04	; 4
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	cd bf       	out	0x3d, r28	; 61

00000c64 <__do_clear_bss>:
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	a4 e6       	ldi	r26, 0x64	; 100
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <.do_clear_bss_start>

00000c6c <.do_clear_bss_loop>:
     c6c:	1d 92       	st	X+, r1

00000c6e <.do_clear_bss_start>:
     c6e:	a7 38       	cpi	r26, 0x87	; 135
     c70:	b2 07       	cpc	r27, r18
     c72:	e1 f7       	brne	.-8      	; 0xc6c <.do_clear_bss_loop>

00000c74 <__do_copy_data>:
     c74:	10 e0       	ldi	r17, 0x00	; 0
     c76:	a0 e6       	ldi	r26, 0x60	; 96
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e8 e5       	ldi	r30, 0x58	; 88
     c7c:	fc e3       	ldi	r31, 0x3C	; 60
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <__do_copy_data+0x10>
     c80:	05 90       	lpm	r0, Z+
     c82:	0d 92       	st	X+, r0
     c84:	a4 36       	cpi	r26, 0x64	; 100
     c86:	b1 07       	cpc	r27, r17
     c88:	d9 f7       	brne	.-10     	; 0xc80 <__do_copy_data+0xc>

00000c8a <__do_global_ctors>:
     c8a:	16 e0       	ldi	r17, 0x06	; 6
     c8c:	cc e2       	ldi	r28, 0x2C	; 44
     c8e:	d6 e0       	ldi	r29, 0x06	; 6
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__do_global_ctors+0x10>
     c92:	21 97       	sbiw	r28, 0x01	; 1
     c94:	fe 01       	movw	r30, r28
     c96:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__tablejump2__>
     c9a:	cb 32       	cpi	r28, 0x2B	; 43
     c9c:	d1 07       	cpc	r29, r17
     c9e:	c9 f7       	brne	.-14     	; 0xc92 <__do_global_ctors+0x8>
     ca0:	0e 94 b9 0c 	call	0x1972	; 0x1972 <main>
     ca4:	0c 94 2a 1e 	jmp	0x3c54	; 0x3c54 <_exit>

00000ca8 <__bad_interrupt>:
     ca8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000cac <fastbitmap_1bit>:
		r20:r21 fg color 
		r18:r19 bg color
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     cac:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     cae:	ba 2f       	mov	r27, r26
	set
     cb0:	68 94       	set
	bld r26,WR_PIN
     cb2:	a6 f9       	bld	r26, 6
	clt
     cb4:	e8 94       	clt
	bld r27,WR_PIN
     cb6:	b6 f9       	bld	r27, 6
	
	movw r30, r22
     cb8:	fb 01       	movw	r30, r22

00000cba <FB1BIT_LOOP>:

FB1BIT_LOOP:

	LPM r0, Z+
     cba:	05 90       	lpm	r0, Z+

	PLOT_MONO_PIXEL r0,7
     cbc:	07 fa       	bst	r0, 7
     cbe:	1e f4       	brtc	.+6      	; 0xcc6 <FB1BIT_LOOP+0xc>
     cc0:	42 bb       	out	0x12, r20	; 18
     cc2:	5b bb       	out	0x1b, r21	; 27
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <FB1BIT_LOOP+0x10>
     cc6:	22 bb       	out	0x12, r18	; 18
     cc8:	3b bb       	out	0x1b, r19	; 27
     cca:	b5 bb       	out	0x15, r27	; 21
     ccc:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,6
     cce:	06 fa       	bst	r0, 6
     cd0:	1e f4       	brtc	.+6      	; 0xcd8 <FB1BIT_LOOP+0x1e>
     cd2:	42 bb       	out	0x12, r20	; 18
     cd4:	5b bb       	out	0x1b, r21	; 27
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <FB1BIT_LOOP+0x22>
     cd8:	22 bb       	out	0x12, r18	; 18
     cda:	3b bb       	out	0x1b, r19	; 27
     cdc:	b5 bb       	out	0x15, r27	; 21
     cde:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,5
     ce0:	05 fa       	bst	r0, 5
     ce2:	1e f4       	brtc	.+6      	; 0xcea <FB1BIT_LOOP+0x30>
     ce4:	42 bb       	out	0x12, r20	; 18
     ce6:	5b bb       	out	0x1b, r21	; 27
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <FB1BIT_LOOP+0x34>
     cea:	22 bb       	out	0x12, r18	; 18
     cec:	3b bb       	out	0x1b, r19	; 27
     cee:	b5 bb       	out	0x15, r27	; 21
     cf0:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,4
     cf2:	04 fa       	bst	r0, 4
     cf4:	1e f4       	brtc	.+6      	; 0xcfc <FB1BIT_LOOP+0x42>
     cf6:	42 bb       	out	0x12, r20	; 18
     cf8:	5b bb       	out	0x1b, r21	; 27
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <FB1BIT_LOOP+0x46>
     cfc:	22 bb       	out	0x12, r18	; 18
     cfe:	3b bb       	out	0x1b, r19	; 27
     d00:	b5 bb       	out	0x15, r27	; 21
     d02:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,3
     d04:	03 fa       	bst	r0, 3
     d06:	1e f4       	brtc	.+6      	; 0xd0e <FB1BIT_LOOP+0x54>
     d08:	42 bb       	out	0x12, r20	; 18
     d0a:	5b bb       	out	0x1b, r21	; 27
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <FB1BIT_LOOP+0x58>
     d0e:	22 bb       	out	0x12, r18	; 18
     d10:	3b bb       	out	0x1b, r19	; 27
     d12:	b5 bb       	out	0x15, r27	; 21
     d14:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,2
     d16:	02 fa       	bst	r0, 2
     d18:	1e f4       	brtc	.+6      	; 0xd20 <FB1BIT_LOOP+0x66>
     d1a:	42 bb       	out	0x12, r20	; 18
     d1c:	5b bb       	out	0x1b, r21	; 27
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <FB1BIT_LOOP+0x6a>
     d20:	22 bb       	out	0x12, r18	; 18
     d22:	3b bb       	out	0x1b, r19	; 27
     d24:	b5 bb       	out	0x15, r27	; 21
     d26:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,1
     d28:	01 fa       	bst	r0, 1
     d2a:	1e f4       	brtc	.+6      	; 0xd32 <FB1BIT_LOOP+0x78>
     d2c:	42 bb       	out	0x12, r20	; 18
     d2e:	5b bb       	out	0x1b, r21	; 27
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <FB1BIT_LOOP+0x7c>
     d32:	22 bb       	out	0x12, r18	; 18
     d34:	3b bb       	out	0x1b, r19	; 27
     d36:	b5 bb       	out	0x15, r27	; 21
     d38:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,0
     d3a:	00 fa       	bst	r0, 0
     d3c:	1e f4       	brtc	.+6      	; 0xd44 <FB1BIT_LOOP+0x8a>
     d3e:	42 bb       	out	0x12, r20	; 18
     d40:	5b bb       	out	0x1b, r21	; 27
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <FB1BIT_LOOP+0x8e>
     d44:	22 bb       	out	0x12, r18	; 18
     d46:	3b bb       	out	0x1b, r19	; 27
     d48:	b5 bb       	out	0x15, r27	; 21
     d4a:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
     d4c:	81 50       	subi	r24, 0x01	; 1
     d4e:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
     d50:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
     d52:	91 05       	cpc	r25, r1
	breq FB1BIT_DONE
     d54:	11 f0       	breq	.+4      	; 0xd5a <FB1BIT_DONE>
	jmp FB1BIT_LOOP
     d56:	0c 94 5d 06 	jmp	0xcba	; 0xcba <FB1BIT_LOOP>

00000d5a <FB1BIT_DONE>:


FB1BIT_DONE:

	ret;
     d5a:	08 95       	ret

00000d5c <fastbitmap_16bit>:
		r24:r25 lenght in pixels/words
		r22:r23 pointer to data
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     d5c:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     d5e:	ba 2f       	mov	r27, r26
	set
     d60:	68 94       	set
	bld r26,WR_PIN
     d62:	a6 f9       	bld	r26, 6
	clt
     d64:	e8 94       	clt
	bld r27,WR_PIN
     d66:	b6 f9       	bld	r27, 6
	
	movw r30, r22
     d68:	fb 01       	movw	r30, r22

00000d6a <FB16BIT_LOOP>:

FB16BIT_LOOP:

	
	LPM r0, Z+	
     d6a:	05 90       	lpm	r0, Z+
	out DPHIO, r0	
     d6c:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+	
     d6e:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     d70:	02 ba       	out	0x12, r0	; 18

	TOGGLE_WR_FAST r27,r26	// place a pixel!
     d72:	b5 bb       	out	0x15, r27	; 21
     d74:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
     d76:	81 50       	subi	r24, 0x01	; 1
     d78:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
     d7a:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
     d7c:	91 05       	cpc	r25, r1
	breq FB16BIT_DONE
     d7e:	11 f0       	breq	.+4      	; 0xd84 <FB16BIT_DONE>
	jmp FB16BIT_LOOP
     d80:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <FB16BIT_LOOP>

00000d84 <FB16BIT_DONE>:


FB16BIT_DONE:

	ret;
     d84:	08 95       	ret

00000d86 <fastbitmap_pb565>:
		r24:r25 data
		
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     d86:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     d88:	ba 2f       	mov	r27, r26
	set
     d8a:	68 94       	set
	bld r26,WR_PIN
     d8c:	a6 f9       	bld	r26, 6
	clt
     d8e:	e8 94       	clt
	bld r27,WR_PIN
     d90:	b6 f9       	bld	r27, 6
	
	movw r30, r24
     d92:	fc 01       	movw	r30, r24

	clr r1
     d94:	11 24       	eor	r1, r1

00000d96 <PB565BIT_LOOP>:

PB565BIT_LOOP:
	
	LPM r18, Z+	
     d96:	25 91       	lpm	r18, Z+
	cpi r18,0
     d98:	20 30       	cpi	r18, 0x00	; 0
	breq PB565BIT_DONE
     d9a:	a9 f0       	breq	.+42     	; 0xdc6 <PB565BIT_DONE>
	
	bst r18,7
     d9c:	27 fb       	bst	r18, 7
	brtc PB565PLAIN
     d9e:	56 f4       	brtc	.+20     	; 0xdb4 <PB565PLAIN>
	
	// compressed loop.
	andi r18,0x7F
     da0:	2f 77       	andi	r18, 0x7F	; 127
	LPM r0, Z+
     da2:	05 90       	lpm	r0, Z+
	out DPHIO, r0
     da4:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
     da6:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     da8:	02 ba       	out	0x12, r0	; 18

00000daa <PB565COMPRESSED>:
	

PB565COMPRESSED:
	TOGGLE_WR_FAST r27,r26
     daa:	b5 bb       	out	0x15, r27	; 21
     dac:	a5 bb       	out	0x15, r26	; 21
	dec r18
     dae:	2a 95       	dec	r18
	brne PB565COMPRESSED
     db0:	e1 f7       	brne	.-8      	; 0xdaa <PB565COMPRESSED>
	rjmp PB565BIT_LOOP
     db2:	f1 cf       	rjmp	.-30     	; 0xd96 <PB565BIT_LOOP>

00000db4 <PB565PLAIN>:


PB565PLAIN:

	LPM r0, Z+
     db4:	05 90       	lpm	r0, Z+
	out DPHIO, r0
     db6:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
     db8:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     dba:	02 ba       	out	0x12, r0	; 18
	TOGGLE_WR_FAST r27,r26
     dbc:	b5 bb       	out	0x15, r27	; 21
     dbe:	a5 bb       	out	0x15, r26	; 21
	dec r18
     dc0:	2a 95       	dec	r18
	brne PB565PLAIN
     dc2:	c1 f7       	brne	.-16     	; 0xdb4 <PB565PLAIN>
	rjmp PB565BIT_LOOP
     dc4:	e8 cf       	rjmp	.-48     	; 0xd96 <PB565BIT_LOOP>

00000dc6 <PB565BIT_DONE>:




PB565BIT_DONE:
	clr r0
     dc6:	00 24       	eor	r0, r0
     dc8:	08 95       	ret

00000dca <fastfill>:
// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill:

	clr r18
     dca:	22 27       	eor	r18, r18

	// devide by 2
	// no need for register 25 it has no bits we care about.
	lsr r24
     dcc:	86 95       	lsr	r24
	ror r23
     dce:	77 95       	ror	r23
	ror r22
     dd0:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     dd2:	27 95       	ror	r18

	// devide by 4
	// no need for register 24, it had a max of 1 bit we care about.
	lsr r23
     dd4:	76 95       	lsr	r23
	ror r22
     dd6:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     dd8:	27 95       	ror	r18

	// devide by 8
	//lsr r24
	lsr r23
     dda:	76 95       	lsr	r23
	ror r22
     ddc:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     dde:	27 95       	ror	r18

	// devide by 16		
	// lsr r24
	lsr r23
     de0:	76 95       	lsr	r23
	ror r22
     de2:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     de4:	27 95       	ror	r18

	// finish rolling a full 8 bits aka swap nibbles
	swap r18
     de6:	22 95       	swap	r18

	movw r24, r22
     de8:	cb 01       	movw	r24, r22

00000dea <fastfill2>:
// r24 + r25 hold 16 bit unsigned number of 16xloops.
// r18 holds 8 bit unsigned numner of single loops
fastfill2:

	// prepare the out port registers
	in r30, _SFR_IO_ADDR(WR_PORT)
     dea:	e5 b3       	in	r30, 0x15	; 21
	mov r31, r30
     dec:	fe 2f       	mov	r31, r30
	set
     dee:	68 94       	set
	bld r30,WR_PIN
     df0:	e6 f9       	bld	r30, 6
	clt
     df2:	e8 94       	clt
	bld r31,WR_PIN
     df4:	f6 f9       	bld	r31, 6

	sbiw r24,0 // subtract zero and test if zero	
     df6:	00 97       	sbiw	r24, 0x00	; 0
	breq exitloop16
     df8:	11 f1       	breq	.+68     	; 0xe3e <exitloop16>

00000dfa <loop16>:
loop16:
		
	TOGGLE_WR_FAST r31,r30
     dfa:	f5 bb       	out	0x15, r31	; 21
     dfc:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     dfe:	f5 bb       	out	0x15, r31	; 21
     e00:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e02:	f5 bb       	out	0x15, r31	; 21
     e04:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e06:	f5 bb       	out	0x15, r31	; 21
     e08:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e0a:	f5 bb       	out	0x15, r31	; 21
     e0c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e0e:	f5 bb       	out	0x15, r31	; 21
     e10:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e12:	f5 bb       	out	0x15, r31	; 21
     e14:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e16:	f5 bb       	out	0x15, r31	; 21
     e18:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e1a:	f5 bb       	out	0x15, r31	; 21
     e1c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e1e:	f5 bb       	out	0x15, r31	; 21
     e20:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e22:	f5 bb       	out	0x15, r31	; 21
     e24:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e26:	f5 bb       	out	0x15, r31	; 21
     e28:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e2a:	f5 bb       	out	0x15, r31	; 21
     e2c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e2e:	f5 bb       	out	0x15, r31	; 21
     e30:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e32:	f5 bb       	out	0x15, r31	; 21
     e34:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e36:	f5 bb       	out	0x15, r31	; 21
     e38:	e5 bb       	out	0x15, r30	; 21

	sbiw r24,1	
     e3a:	01 97       	sbiw	r24, 0x01	; 1
	brne loop16
     e3c:	f1 f6       	brne	.-68     	; 0xdfa <loop16>

00000e3e <exitloop16>:

exitloop16:

	cpi r18,0
     e3e:	20 30       	cpi	r18, 0x00	; 0
	breq exitsingleloop
     e40:	21 f0       	breq	.+8      	; 0xe4a <exitsingleloop>

00000e42 <singleloop>:
singleloop:			
	TOGGLE_WR_FAST r31,r30
     e42:	f5 bb       	out	0x15, r31	; 21
     e44:	e5 bb       	out	0x15, r30	; 21
	dec r18
     e46:	2a 95       	dec	r18
	brne singleloop
     e48:	e1 f7       	brne	.-8      	; 0xe42 <singleloop>

00000e4a <exitsingleloop>:

exitsingleloop:
	ret 
     e4a:	08 95       	ret

00000e4c <fastfill3>:

// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill3:
	TOGGLE_WR
     e4c:	ae 98       	cbi	0x15, 6	; 21
     e4e:	ae 9a       	sbi	0x15, 6	; 21
	SUB32 r22,r23,r24,r25,1
     e50:	61 50       	subi	r22, 0x01	; 1
     e52:	70 40       	sbci	r23, 0x00	; 0
     e54:	80 40       	sbci	r24, 0x00	; 0
     e56:	90 40       	sbci	r25, 0x00	; 0
	brne fastfill3
     e58:	c9 f7       	brne	.-14     	; 0xe4c <fastfill3>

     e5a:	08 95       	ret

00000e5c <LCD_Write_COM>:
#include "as_macros.h"


.global LCD_Write_COM
LCD_Write_COM:
	BUS_START_REG
     e5c:	af 98       	cbi	0x15, 7	; 21
	clr r1
     e5e:	11 24       	eor	r1, r1
	out DPLIO, r24
     e60:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     e62:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     e64:	ae 98       	cbi	0x15, 6	; 21
     e66:	ae 9a       	sbi	0x15, 6	; 21
	ret
     e68:	08 95       	ret

00000e6a <LCD_Write_DATA>:

.global LCD_Write_DATA
LCD_Write_DATA:
	BUS_START_DATA	
     e6a:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
     e6c:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r24
     e6e:	8b bb       	out	0x1b, r24	; 27
	TOGGLE_WR
     e70:	ae 98       	cbi	0x15, 6	; 21
     e72:	ae 9a       	sbi	0x15, 6	; 21
	ret
     e74:	08 95       	ret

00000e76 <LCD_Write_DATA2>:

.global LCD_Write_DATA2
LCD_Write_DATA2:
	BUS_START_DATA	
     e76:	af 9a       	sbi	0x15, 7	; 21
	clr r1
     e78:	11 24       	eor	r1, r1
	out DPLIO, r24
     e7a:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     e7c:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     e7e:	ae 98       	cbi	0x15, 6	; 21
     e80:	ae 9a       	sbi	0x15, 6	; 21
	ret
     e82:	08 95       	ret

00000e84 <LCD_Write_COM_DATA>:


.global LCD_Write_COM_DATA
LCD_Write_COM_DATA:
	
	BUS_START_REG
     e84:	af 98       	cbi	0x15, 7	; 21
	clr r1
     e86:	11 24       	eor	r1, r1
	out DPLIO, r24
     e88:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     e8a:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     e8c:	ae 98       	cbi	0x15, 6	; 21
     e8e:	ae 9a       	sbi	0x15, 6	; 21

	BUS_START_DATA	
     e90:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
     e92:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r23
     e94:	7b bb       	out	0x1b, r23	; 27
	TOGGLE_WR
     e96:	ae 98       	cbi	0x15, 6	; 21
     e98:	ae 9a       	sbi	0x15, 6	; 21

	ret
     e9a:	08 95       	ret

00000e9c <LCD_Writ_Bus>:


.global LCD_Writ_Bus
	LCD_Writ_Bus:

	out DPHIO, r24
     e9c:	8b bb       	out	0x1b, r24	; 27
	out DPLIO, r22
     e9e:	62 bb       	out	0x12, r22	; 18
	TOGGLE_WR
     ea0:	ae 98       	cbi	0x15, 6	; 21
     ea2:	ae 9a       	sbi	0x15, 6	; 21

     ea4:	08 95       	ret

00000ea6 <_Z7Touchedv>:
#define Y2_3 178
#define Y2_4 239

UTFT display;

bool Touched() {
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	// PINB3(T-IRQ) nizak pri dodiru
	if (bit_is_clear(PINB, T_IRQ)){
     eae:	86 e3       	ldi	r24, 0x36	; 54
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	88 70       	andi	r24, 0x08	; 8
     ebc:	99 27       	eor	r25, r25
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f0       	breq	.+2      	; 0xec6 <_Z7Touchedv+0x20>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	22 23       	and	r18, r18
     ec8:	11 f0       	breq	.+4      	; 0xece <_Z7Touchedv+0x28>
		return true;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <_Z7Touchedv+0x2a>
		} else {
		return false;
     ece:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <_Z4getXv>:

//TEST

uint16_t getX() {
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	62 97       	sbiw	r28, 0x12	; 18
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
	SPI_Write(0X90);
     eea:	80 e9       	ldi	r24, 0x90	; 144
     eec:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <SPI_Write>
	float x = SPI_Read() / 120.0 * 320 - 15;
     ef0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <SPI_Read>
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	09 2e       	mov	r0, r25
     efa:	00 0c       	add	r0, r0
     efc:	aa 0b       	sbc	r26, r26
     efe:	bb 0b       	sbc	r27, r27
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 ef       	ldi	r20, 0xF0	; 240
     f12:	52 e4       	ldi	r21, 0x42	; 66
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__divsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 ea       	ldi	r20, 0xA0	; 160
     f26:	53 e4       	ldi	r21, 0x43	; 67
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e7       	ldi	r20, 0x70	; 112
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__subsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	ab 83       	std	Y+3, r26	; 0x03
     f4e:	bc 83       	std	Y+4, r27	; 0x04
	SPI_Write(0);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <SPI_Write>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a0 e2       	ldi	r26, 0x20	; 32
     f5c:	b1 e4       	ldi	r27, 0x41	; 65
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	af 83       	std	Y+7, r26	; 0x07
     f64:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f66:	26 e6       	ldi	r18, 0x66	; 102
     f68:	36 e6       	ldi	r19, 0x66	; 102
     f6a:	46 ee       	ldi	r20, 0xE6	; 230
     f6c:	54 e4       	ldi	r21, 0x44	; 68
     f6e:	6d 81       	ldd	r22, Y+5	; 0x05
     f70:	7e 81       	ldd	r23, Y+6	; 0x06
     f72:	8f 81       	ldd	r24, Y+7	; 0x07
     f74:	98 85       	ldd	r25, Y+8	; 0x08
     f76:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	89 87       	std	Y+9, r24	; 0x09
     f80:	9a 87       	std	Y+10, r25	; 0x0a
     f82:	ab 87       	std	Y+11, r26	; 0x0b
     f84:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e8       	ldi	r20, 0x80	; 128
     f8c:	5f e3       	ldi	r21, 0x3F	; 63
     f8e:	69 85       	ldd	r22, Y+9	; 0x09
     f90:	7a 85       	ldd	r23, Y+10	; 0x0a
     f92:	8b 85       	ldd	r24, Y+11	; 0x0b
     f94:	9c 85       	ldd	r25, Y+12	; 0x0c
     f96:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
     f9a:	88 23       	and	r24, r24
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <_Z4getXv+0xd2>
		__ticks = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9e 87       	std	Y+14, r25	; 0x0e
     fa4:	8d 87       	std	Y+13, r24	; 0x0d
     fa6:	3f c0       	rjmp	.+126    	; 0x1026 <_Z4getXv+0x150>
	else if (__tmp > 65535)
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	3f ef       	ldi	r19, 0xFF	; 255
     fac:	4f e7       	ldi	r20, 0x7F	; 127
     fae:	57 e4       	ldi	r21, 0x47	; 71
     fb0:	69 85       	ldd	r22, Y+9	; 0x09
     fb2:	7a 85       	ldd	r23, Y+10	; 0x0a
     fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb8:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
     fbc:	18 16       	cp	r1, r24
     fbe:	4c f5       	brge	.+82     	; 0x1012 <_Z4getXv+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e2       	ldi	r20, 0x20	; 32
     fc6:	51 e4       	ldi	r21, 0x41	; 65
     fc8:	6d 81       	ldd	r22, Y+5	; 0x05
     fca:	7e 81       	ldd	r23, Y+6	; 0x06
     fcc:	8f 81       	ldd	r24, Y+7	; 0x07
     fce:	98 85       	ldd	r25, Y+8	; 0x08
     fd0:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9e 87       	std	Y+14, r25	; 0x0e
     fe6:	8d 87       	std	Y+13, r24	; 0x0d
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <_Z4getXv+0x132>
     fea:	88 eb       	ldi	r24, 0xB8	; 184
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	98 8b       	std	Y+16, r25	; 0x10
     ff0:	8f 87       	std	Y+15, r24	; 0x0f
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff4:	98 89       	ldd	r25, Y+16	; 0x10
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <_Z4getXv+0x120>
     ffa:	98 8b       	std	Y+16, r25	; 0x10
     ffc:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	9e 87       	std	Y+14, r25	; 0x0e
    1006:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	8d 85       	ldd	r24, Y+13	; 0x0d
    100a:	9e 85       	ldd	r25, Y+14	; 0x0e
    100c:	89 2b       	or	r24, r25
    100e:	69 f7       	brne	.-38     	; 0xfea <_Z4getXv+0x114>
    1010:	14 c0       	rjmp	.+40     	; 0x103a <_Z4getXv+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1012:	69 85       	ldd	r22, Y+9	; 0x09
    1014:	7a 85       	ldd	r23, Y+10	; 0x0a
    1016:	8b 85       	ldd	r24, Y+11	; 0x0b
    1018:	9c 85       	ldd	r25, Y+12	; 0x0c
    101a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9e 87       	std	Y+14, r25	; 0x0e
    1024:	8d 87       	std	Y+13, r24	; 0x0d
    1026:	8d 85       	ldd	r24, Y+13	; 0x0d
    1028:	9e 85       	ldd	r25, Y+14	; 0x0e
    102a:	9a 8b       	std	Y+18, r25	; 0x12
    102c:	89 8b       	std	Y+17, r24	; 0x11
    102e:	89 89       	ldd	r24, Y+17	; 0x11
    1030:	9a 89       	ldd	r25, Y+18	; 0x12
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <_Z4getXv+0x15c>
    1036:	9a 8b       	std	Y+18, r25	; 0x12
    1038:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(10);
	return (uint16_t) x;
    103a:	69 81       	ldd	r22, Y+1	; 0x01
    103c:	7a 81       	ldd	r23, Y+2	; 0x02
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
}
    104a:	62 96       	adiw	r28, 0x12	; 18
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <_Z4getYv>:

uint16_t getY() {
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	62 97       	sbiw	r28, 0x12	; 18
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
	float y = 0;
    1070:	19 82       	std	Y+1, r1	; 0x01
    1072:	1a 82       	std	Y+2, r1	; 0x02
    1074:	1b 82       	std	Y+3, r1	; 0x03
    1076:	1c 82       	std	Y+4, r1	; 0x04
	while(y <= 0 ){
    1078:	2c c0       	rjmp	.+88     	; 0x10d2 <_Z4getYv+0x76>
		SPI_Write(0XD0);
    107a:	80 ed       	ldi	r24, 0xD0	; 208
    107c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <SPI_Write>
		y = SPI_Read() / 120.0 * 240;
    1080:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <SPI_Read>
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	09 2e       	mov	r0, r25
    108a:	00 0c       	add	r0, r0
    108c:	aa 0b       	sbc	r26, r26
    108e:	bb 0b       	sbc	r27, r27
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 ef       	ldi	r20, 0xF0	; 240
    10a2:	52 e4       	ldi	r21, 0x42	; 66
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__divsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e7       	ldi	r20, 0x70	; 112
    10b6:	53 e4       	ldi	r21, 0x43	; 67
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	ab 83       	std	Y+3, r26	; 0x03
    10ca:	bc 83       	std	Y+4, r27	; 0x04
		SPI_Write(0);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <SPI_Write>
	return (uint16_t) x;
}

uint16_t getY() {
	float y = 0;
	while(y <= 0 ){
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	69 81       	ldd	r22, Y+1	; 0x01
    10da:	7a 81       	ldd	r23, Y+2	; 0x02
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	4c f6       	brge	.-110    	; 0x107a <_Z4getYv+0x1e>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e2       	ldi	r26, 0x20	; 32
    10ee:	b1 e4       	ldi	r27, 0x41	; 65
    10f0:	8d 83       	std	Y+5, r24	; 0x05
    10f2:	9e 83       	std	Y+6, r25	; 0x06
    10f4:	af 83       	std	Y+7, r26	; 0x07
    10f6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10f8:	26 e6       	ldi	r18, 0x66	; 102
    10fa:	36 e6       	ldi	r19, 0x66	; 102
    10fc:	46 ee       	ldi	r20, 0xE6	; 230
    10fe:	54 e4       	ldi	r21, 0x44	; 68
    1100:	6d 81       	ldd	r22, Y+5	; 0x05
    1102:	7e 81       	ldd	r23, Y+6	; 0x06
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	98 85       	ldd	r25, Y+8	; 0x08
    1108:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	89 87       	std	Y+9, r24	; 0x09
    1112:	9a 87       	std	Y+10, r25	; 0x0a
    1114:	ab 87       	std	Y+11, r26	; 0x0b
    1116:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	69 85       	ldd	r22, Y+9	; 0x09
    1122:	7a 85       	ldd	r23, Y+10	; 0x0a
    1124:	8b 85       	ldd	r24, Y+11	; 0x0b
    1126:	9c 85       	ldd	r25, Y+12	; 0x0c
    1128:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
    112c:	88 23       	and	r24, r24
    112e:	2c f4       	brge	.+10     	; 0x113a <_Z4getYv+0xde>
		__ticks = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9e 87       	std	Y+14, r25	; 0x0e
    1136:	8d 87       	std	Y+13, r24	; 0x0d
    1138:	3f c0       	rjmp	.+126    	; 0x11b8 <_Z4getYv+0x15c>
	else if (__tmp > 65535)
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	4f e7       	ldi	r20, 0x7F	; 127
    1140:	57 e4       	ldi	r21, 0x47	; 71
    1142:	69 85       	ldd	r22, Y+9	; 0x09
    1144:	7a 85       	ldd	r23, Y+10	; 0x0a
    1146:	8b 85       	ldd	r24, Y+11	; 0x0b
    1148:	9c 85       	ldd	r25, Y+12	; 0x0c
    114a:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    114e:	18 16       	cp	r1, r24
    1150:	4c f5       	brge	.+82     	; 0x11a4 <_Z4getYv+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	6d 81       	ldd	r22, Y+5	; 0x05
    115c:	7e 81       	ldd	r23, Y+6	; 0x06
    115e:	8f 81       	ldd	r24, Y+7	; 0x07
    1160:	98 85       	ldd	r25, Y+8	; 0x08
    1162:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9e 87       	std	Y+14, r25	; 0x0e
    1178:	8d 87       	std	Y+13, r24	; 0x0d
    117a:	0f c0       	rjmp	.+30     	; 0x119a <_Z4getYv+0x13e>
    117c:	88 eb       	ldi	r24, 0xB8	; 184
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	98 8b       	std	Y+16, r25	; 0x10
    1182:	8f 87       	std	Y+15, r24	; 0x0f
    1184:	8f 85       	ldd	r24, Y+15	; 0x0f
    1186:	98 89       	ldd	r25, Y+16	; 0x10
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <_Z4getYv+0x12c>
    118c:	98 8b       	std	Y+16, r25	; 0x10
    118e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1190:	8d 85       	ldd	r24, Y+13	; 0x0d
    1192:	9e 85       	ldd	r25, Y+14	; 0x0e
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9e 87       	std	Y+14, r25	; 0x0e
    1198:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	89 2b       	or	r24, r25
    11a0:	69 f7       	brne	.-38     	; 0x117c <_Z4getYv+0x120>
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <_Z4getYv+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a4:	69 85       	ldd	r22, Y+9	; 0x09
    11a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    11a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ac:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9e 87       	std	Y+14, r25	; 0x0e
    11b6:	8d 87       	std	Y+13, r24	; 0x0d
    11b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    11bc:	9a 8b       	std	Y+18, r25	; 0x12
    11be:	89 8b       	std	Y+17, r24	; 0x11
    11c0:	89 89       	ldd	r24, Y+17	; 0x11
    11c2:	9a 89       	ldd	r25, Y+18	; 0x12
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <_Z4getYv+0x168>
    11c8:	9a 8b       	std	Y+18, r25	; 0x12
    11ca:	89 8b       	std	Y+17, r24	; 0x11
		SPI_Write(0XD0);
		y = SPI_Read() / 120.0 * 240;
		SPI_Write(0);
	}
	_delay_ms(10);
	return (uint16_t) y;
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
}
    11dc:	62 96       	adiw	r28, 0x12	; 18
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <_Z9fillBoardv>:
//uint8_t c1, c2;  //TODO - provjerava ako su okrenute dvije iste karte
//uint8_t state = 0;  //TODO stanje igre 0 - nema okrenutih karti, 1 - jedna okrenuta karta, 2 - dvije okrenute karte - provjera jesu li iste
// uint8_t gameFinished = 0; // 0 - igra jos traje, 1 - pobjeda, 2 - vrijeme je isteklo, TODO ideja je da imamo timer

// Popuni plocu nasumicno simbolima
void fillBoard() {
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <_Z9fillBoardv+0x6>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
    11f8:	1a 82       	std	Y+2, r1	; 0x02
    11fa:	29 c0       	rjmp	.+82     	; 0x124e <_Z9fillBoardv+0x60>
		index = rand() % 16;
    11fc:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <rand>
    1200:	8f 70       	andi	r24, 0x0F	; 15
    1202:	90 78       	andi	r25, 0x80	; 128
    1204:	99 23       	and	r25, r25
    1206:	24 f4       	brge	.+8      	; 0x1210 <_Z9fillBoardv+0x22>
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	80 6f       	ori	r24, 0xF0	; 240
    120c:	9f 6f       	ori	r25, 0xFF	; 255
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
    1212:	07 c0       	rjmp	.+14     	; 0x1222 <_Z9fillBoardv+0x34>
			index++;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	89 83       	std	Y+1, r24	; 0x01
			if (index > 15) {
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	80 31       	cpi	r24, 0x10	; 16
    121e:	08 f0       	brcs	.+2      	; 0x1222 <_Z9fillBoardv+0x34>
				index = 0;
    1220:	19 82       	std	Y+1, r1	; 0x01
// Popuni plocu nasumicno simbolima
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
		index = rand() % 16;
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	89 58       	subi	r24, 0x89	; 137
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	fc 01       	movw	r30, r24
    122e:	80 81       	ld	r24, Z
    1230:	88 23       	and	r24, r24
    1232:	81 f7       	brne	.-32     	; 0x1214 <_Z9fillBoardv+0x26>
			index++;
			if (index > 15) {
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2a 81       	ldd	r18, Y+2	; 0x02
    123c:	27 70       	andi	r18, 0x07	; 7
    123e:	2f 5f       	subi	r18, 0xFF	; 255
    1240:	89 58       	subi	r24, 0x89	; 137
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
// uint8_t gameFinished = 0; // 0 - igra jos traje, 1 - pobjeda, 2 - vrijeme je isteklo, TODO ideja je da imamo timer

// Popuni plocu nasumicno simbolima
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	80 31       	cpi	r24, 0x10	; 16
    1252:	a0 f2       	brcs	.-88     	; 0x11fc <_Z9fillBoardv+0xe>
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
	}
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <_Z14memoryGetInputv>:

// vraca indeks + 1 polja na koje smo kliknuli
uint8_t memoryGetInput() {
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <_Z14memoryGetInputv+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <_Z14memoryGetInputv+0x8>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	while(!Touched());
    126a:	00 00       	nop
    126c:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z7Touchedv>
    1270:	98 2f       	mov	r25, r24
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 27       	eor	r24, r25
    1276:	88 23       	and	r24, r24
    1278:	c9 f7       	brne	.-14     	; 0x126c <_Z14memoryGetInputv+0xe>
	uint16_t x = getX();
    127a:	0e 94 6b 07 	call	0xed6	; 0xed6 <_Z4getXv>
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
	uint16_t y = getY();
    1282:	0e 94 2e 08 	call	0x105c	; 0x105c <_Z4getYv>
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	8b 83       	std	Y+3, r24	; 0x03
	
	if ((x > X1_1) && (x < X2_1) && (y > Y1_1) && (y < Y2_1)) return 1;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	88 97       	sbiw	r24, 0x28	; 40
    1290:	78 f0       	brcs	.+30     	; 0x12b0 <_Z14memoryGetInputv+0x52>
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	8f 35       	cpi	r24, 0x5F	; 95
    1298:	91 05       	cpc	r25, r1
    129a:	50 f4       	brcc	.+20     	; 0x12b0 <_Z14memoryGetInputv+0x52>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	89 2b       	or	r24, r25
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <_Z14memoryGetInputv+0x52>
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	c8 97       	sbiw	r24, 0x38	; 56
    12aa:	10 f4       	brcc	.+4      	; 0x12b0 <_Z14memoryGetInputv+0x52>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	3e c1       	rjmp	.+636    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_1) && (y < Y2_1)) return 2;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	85 36       	cpi	r24, 0x65	; 101
    12b6:	91 05       	cpc	r25, r1
    12b8:	78 f0       	brcs	.+30     	; 0x12d8 <_Z14memoryGetInputv+0x7a>
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	8c 39       	cpi	r24, 0x9C	; 156
    12c0:	91 05       	cpc	r25, r1
    12c2:	50 f4       	brcc	.+20     	; 0x12d8 <_Z14memoryGetInputv+0x7a>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	89 2b       	or	r24, r25
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <_Z14memoryGetInputv+0x7a>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	c8 97       	sbiw	r24, 0x38	; 56
    12d2:	10 f4       	brcc	.+4      	; 0x12d8 <_Z14memoryGetInputv+0x7a>
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	2a c1       	rjmp	.+596    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_1) && (y < Y2_1)) return 3;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	82 3a       	cpi	r24, 0xA2	; 162
    12de:	91 05       	cpc	r25, r1
    12e0:	78 f0       	brcs	.+30     	; 0x1300 <_Z14memoryGetInputv+0xa2>
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	89 3d       	cpi	r24, 0xD9	; 217
    12e8:	91 05       	cpc	r25, r1
    12ea:	50 f4       	brcc	.+20     	; 0x1300 <_Z14memoryGetInputv+0xa2>
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	89 2b       	or	r24, r25
    12f2:	31 f0       	breq	.+12     	; 0x1300 <_Z14memoryGetInputv+0xa2>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	c8 97       	sbiw	r24, 0x38	; 56
    12fa:	10 f4       	brcc	.+4      	; 0x1300 <_Z14memoryGetInputv+0xa2>
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	16 c1       	rjmp	.+556    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_1) && (y < Y2_1)) return 4;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	8f 3d       	cpi	r24, 0xDF	; 223
    1306:	91 05       	cpc	r25, r1
    1308:	78 f0       	brcs	.+30     	; 0x1328 <_Z14memoryGetInputv+0xca>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	86 31       	cpi	r24, 0x16	; 22
    1310:	91 40       	sbci	r25, 0x01	; 1
    1312:	50 f4       	brcc	.+20     	; 0x1328 <_Z14memoryGetInputv+0xca>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	89 2b       	or	r24, r25
    131a:	31 f0       	breq	.+12     	; 0x1328 <_Z14memoryGetInputv+0xca>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	c8 97       	sbiw	r24, 0x38	; 56
    1322:	10 f4       	brcc	.+4      	; 0x1328 <_Z14memoryGetInputv+0xca>
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	02 c1       	rjmp	.+516    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_2) && (y < Y2_2)) return 5;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	88 97       	sbiw	r24, 0x28	; 40
    132e:	80 f0       	brcs	.+32     	; 0x1350 <_Z14memoryGetInputv+0xf2>
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	8f 35       	cpi	r24, 0x5F	; 95
    1336:	91 05       	cpc	r25, r1
    1338:	58 f4       	brcc	.+22     	; 0x1350 <_Z14memoryGetInputv+0xf2>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	ce 97       	sbiw	r24, 0x3e	; 62
    1340:	38 f0       	brcs	.+14     	; 0x1350 <_Z14memoryGetInputv+0xf2>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	85 37       	cpi	r24, 0x75	; 117
    1348:	91 05       	cpc	r25, r1
    134a:	10 f4       	brcc	.+4      	; 0x1350 <_Z14memoryGetInputv+0xf2>
    134c:	85 e0       	ldi	r24, 0x05	; 5
    134e:	ee c0       	rjmp	.+476    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_2) && (y < Y2_2)) return 6;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	85 36       	cpi	r24, 0x65	; 101
    1356:	91 05       	cpc	r25, r1
    1358:	80 f0       	brcs	.+32     	; 0x137a <_Z14memoryGetInputv+0x11c>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	8c 39       	cpi	r24, 0x9C	; 156
    1360:	91 05       	cpc	r25, r1
    1362:	58 f4       	brcc	.+22     	; 0x137a <_Z14memoryGetInputv+0x11c>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	ce 97       	sbiw	r24, 0x3e	; 62
    136a:	38 f0       	brcs	.+14     	; 0x137a <_Z14memoryGetInputv+0x11c>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	85 37       	cpi	r24, 0x75	; 117
    1372:	91 05       	cpc	r25, r1
    1374:	10 f4       	brcc	.+4      	; 0x137a <_Z14memoryGetInputv+0x11c>
    1376:	86 e0       	ldi	r24, 0x06	; 6
    1378:	d9 c0       	rjmp	.+434    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_2) && (y < Y2_2)) return 7;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	82 3a       	cpi	r24, 0xA2	; 162
    1380:	91 05       	cpc	r25, r1
    1382:	80 f0       	brcs	.+32     	; 0x13a4 <_Z14memoryGetInputv+0x146>
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	89 3d       	cpi	r24, 0xD9	; 217
    138a:	91 05       	cpc	r25, r1
    138c:	58 f4       	brcc	.+22     	; 0x13a4 <_Z14memoryGetInputv+0x146>
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	ce 97       	sbiw	r24, 0x3e	; 62
    1394:	38 f0       	brcs	.+14     	; 0x13a4 <_Z14memoryGetInputv+0x146>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	85 37       	cpi	r24, 0x75	; 117
    139c:	91 05       	cpc	r25, r1
    139e:	10 f4       	brcc	.+4      	; 0x13a4 <_Z14memoryGetInputv+0x146>
    13a0:	87 e0       	ldi	r24, 0x07	; 7
    13a2:	c4 c0       	rjmp	.+392    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_2) && (y < Y2_2)) return 8;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	8f 3d       	cpi	r24, 0xDF	; 223
    13aa:	91 05       	cpc	r25, r1
    13ac:	80 f0       	brcs	.+32     	; 0x13ce <_Z14memoryGetInputv+0x170>
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	86 31       	cpi	r24, 0x16	; 22
    13b4:	91 40       	sbci	r25, 0x01	; 1
    13b6:	58 f4       	brcc	.+22     	; 0x13ce <_Z14memoryGetInputv+0x170>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	ce 97       	sbiw	r24, 0x3e	; 62
    13be:	38 f0       	brcs	.+14     	; 0x13ce <_Z14memoryGetInputv+0x170>
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	85 37       	cpi	r24, 0x75	; 117
    13c6:	91 05       	cpc	r25, r1
    13c8:	10 f4       	brcc	.+4      	; 0x13ce <_Z14memoryGetInputv+0x170>
    13ca:	88 e0       	ldi	r24, 0x08	; 8
    13cc:	af c0       	rjmp	.+350    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_3) && (y < Y2_3)) return 9;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	88 97       	sbiw	r24, 0x28	; 40
    13d4:	88 f0       	brcs	.+34     	; 0x13f8 <_Z14memoryGetInputv+0x19a>
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	8f 35       	cpi	r24, 0x5F	; 95
    13dc:	91 05       	cpc	r25, r1
    13de:	60 f4       	brcc	.+24     	; 0x13f8 <_Z14memoryGetInputv+0x19a>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	8b 37       	cpi	r24, 0x7B	; 123
    13e6:	91 05       	cpc	r25, r1
    13e8:	38 f0       	brcs	.+14     	; 0x13f8 <_Z14memoryGetInputv+0x19a>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	82 3b       	cpi	r24, 0xB2	; 178
    13f0:	91 05       	cpc	r25, r1
    13f2:	10 f4       	brcc	.+4      	; 0x13f8 <_Z14memoryGetInputv+0x19a>
    13f4:	89 e0       	ldi	r24, 0x09	; 9
    13f6:	9a c0       	rjmp	.+308    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_3) && (y < Y2_3)) return 10;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	85 36       	cpi	r24, 0x65	; 101
    13fe:	91 05       	cpc	r25, r1
    1400:	88 f0       	brcs	.+34     	; 0x1424 <_Z14memoryGetInputv+0x1c6>
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	8c 39       	cpi	r24, 0x9C	; 156
    1408:	91 05       	cpc	r25, r1
    140a:	60 f4       	brcc	.+24     	; 0x1424 <_Z14memoryGetInputv+0x1c6>
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	8b 37       	cpi	r24, 0x7B	; 123
    1412:	91 05       	cpc	r25, r1
    1414:	38 f0       	brcs	.+14     	; 0x1424 <_Z14memoryGetInputv+0x1c6>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	82 3b       	cpi	r24, 0xB2	; 178
    141c:	91 05       	cpc	r25, r1
    141e:	10 f4       	brcc	.+4      	; 0x1424 <_Z14memoryGetInputv+0x1c6>
    1420:	8a e0       	ldi	r24, 0x0A	; 10
    1422:	84 c0       	rjmp	.+264    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_3) && (y < Y2_3)) return 11;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	82 3a       	cpi	r24, 0xA2	; 162
    142a:	91 05       	cpc	r25, r1
    142c:	88 f0       	brcs	.+34     	; 0x1450 <_Z14memoryGetInputv+0x1f2>
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	89 3d       	cpi	r24, 0xD9	; 217
    1434:	91 05       	cpc	r25, r1
    1436:	60 f4       	brcc	.+24     	; 0x1450 <_Z14memoryGetInputv+0x1f2>
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	8b 37       	cpi	r24, 0x7B	; 123
    143e:	91 05       	cpc	r25, r1
    1440:	38 f0       	brcs	.+14     	; 0x1450 <_Z14memoryGetInputv+0x1f2>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	82 3b       	cpi	r24, 0xB2	; 178
    1448:	91 05       	cpc	r25, r1
    144a:	10 f4       	brcc	.+4      	; 0x1450 <_Z14memoryGetInputv+0x1f2>
    144c:	8b e0       	ldi	r24, 0x0B	; 11
    144e:	6e c0       	rjmp	.+220    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	8f 3d       	cpi	r24, 0xDF	; 223
    1456:	91 05       	cpc	r25, r1
    1458:	88 f0       	brcs	.+34     	; 0x147c <_Z14memoryGetInputv+0x21e>
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	86 31       	cpi	r24, 0x16	; 22
    1460:	91 40       	sbci	r25, 0x01	; 1
    1462:	60 f4       	brcc	.+24     	; 0x147c <_Z14memoryGetInputv+0x21e>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	8b 37       	cpi	r24, 0x7B	; 123
    146a:	91 05       	cpc	r25, r1
    146c:	38 f0       	brcs	.+14     	; 0x147c <_Z14memoryGetInputv+0x21e>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	82 3b       	cpi	r24, 0xB2	; 178
    1474:	91 05       	cpc	r25, r1
    1476:	10 f4       	brcc	.+4      	; 0x147c <_Z14memoryGetInputv+0x21e>
    1478:	8c e0       	ldi	r24, 0x0C	; 12
    147a:	58 c0       	rjmp	.+176    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	88 97       	sbiw	r24, 0x28	; 40
    1482:	88 f0       	brcs	.+34     	; 0x14a6 <_Z14memoryGetInputv+0x248>
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	8f 35       	cpi	r24, 0x5F	; 95
    148a:	91 05       	cpc	r25, r1
    148c:	60 f4       	brcc	.+24     	; 0x14a6 <_Z14memoryGetInputv+0x248>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	88 3b       	cpi	r24, 0xB8	; 184
    1494:	91 05       	cpc	r25, r1
    1496:	38 f0       	brcs	.+14     	; 0x14a6 <_Z14memoryGetInputv+0x248>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	8f 3e       	cpi	r24, 0xEF	; 239
    149e:	91 05       	cpc	r25, r1
    14a0:	10 f4       	brcc	.+4      	; 0x14a6 <_Z14memoryGetInputv+0x248>
    14a2:	8d e0       	ldi	r24, 0x0D	; 13
    14a4:	43 c0       	rjmp	.+134    	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	85 36       	cpi	r24, 0x65	; 101
    14ac:	91 05       	cpc	r25, r1
    14ae:	88 f0       	brcs	.+34     	; 0x14d2 <_Z14memoryGetInputv+0x274>
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	8c 39       	cpi	r24, 0x9C	; 156
    14b6:	91 05       	cpc	r25, r1
    14b8:	60 f4       	brcc	.+24     	; 0x14d2 <_Z14memoryGetInputv+0x274>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	88 3b       	cpi	r24, 0xB8	; 184
    14c0:	91 05       	cpc	r25, r1
    14c2:	38 f0       	brcs	.+14     	; 0x14d2 <_Z14memoryGetInputv+0x274>
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	8f 3e       	cpi	r24, 0xEF	; 239
    14ca:	91 05       	cpc	r25, r1
    14cc:	10 f4       	brcc	.+4      	; 0x14d2 <_Z14memoryGetInputv+0x274>
    14ce:	8e e0       	ldi	r24, 0x0E	; 14
    14d0:	2d c0       	rjmp	.+90     	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	82 3a       	cpi	r24, 0xA2	; 162
    14d8:	91 05       	cpc	r25, r1
    14da:	88 f0       	brcs	.+34     	; 0x14fe <_Z14memoryGetInputv+0x2a0>
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	89 3d       	cpi	r24, 0xD9	; 217
    14e2:	91 05       	cpc	r25, r1
    14e4:	60 f4       	brcc	.+24     	; 0x14fe <_Z14memoryGetInputv+0x2a0>
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	88 3b       	cpi	r24, 0xB8	; 184
    14ec:	91 05       	cpc	r25, r1
    14ee:	38 f0       	brcs	.+14     	; 0x14fe <_Z14memoryGetInputv+0x2a0>
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	8f 3e       	cpi	r24, 0xEF	; 239
    14f6:	91 05       	cpc	r25, r1
    14f8:	10 f4       	brcc	.+4      	; 0x14fe <_Z14memoryGetInputv+0x2a0>
    14fa:	8f e0       	ldi	r24, 0x0F	; 15
    14fc:	17 c0       	rjmp	.+46     	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	8f 3d       	cpi	r24, 0xDF	; 223
    1504:	91 05       	cpc	r25, r1
    1506:	88 f0       	brcs	.+34     	; 0x152a <_Z14memoryGetInputv+0x2cc>
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	86 31       	cpi	r24, 0x16	; 22
    150e:	91 40       	sbci	r25, 0x01	; 1
    1510:	60 f4       	brcc	.+24     	; 0x152a <_Z14memoryGetInputv+0x2cc>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	88 3b       	cpi	r24, 0xB8	; 184
    1518:	91 05       	cpc	r25, r1
    151a:	38 f0       	brcs	.+14     	; 0x152a <_Z14memoryGetInputv+0x2cc>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	8f 3e       	cpi	r24, 0xEF	; 239
    1522:	91 05       	cpc	r25, r1
    1524:	10 f4       	brcc	.+4      	; 0x152a <_Z14memoryGetInputv+0x2cc>
    1526:	80 e1       	ldi	r24, 0x10	; 16
    1528:	01 c0       	rjmp	.+2      	; 0x152c <_Z14memoryGetInputv+0x2ce>
	else return 0;
    152a:	80 e0       	ldi	r24, 0x00	; 0
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <_Z16memoryRevealCardh>:
//bool memoryCheckOpen() {
//return 0;
//}

// otkrivanje karte - crtanje simbol iz polja na plocu
void memoryRevealCard(uint8_t input) {
    153a:	cf 92       	push	r12
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	64 97       	sbiw	r28, 0x14	; 20
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	8c 8b       	std	Y+20, r24	; 0x14
	display.setColor(255, 255, 255);
    155a:	2f ef       	ldi	r18, 0xFF	; 255
    155c:	4f ef       	ldi	r20, 0xFF	; 255
    155e:	6f ef       	ldi	r22, 0xFF	; 255
    1560:	84 e6       	ldi	r24, 0x64	; 100
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN4UTFT8setColorEhhh>
	display.setFont(BigFont);
    1568:	62 e7       	ldi	r22, 0x72	; 114
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	84 e6       	ldi	r24, 0x64	; 100
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 14 1a 	call	0x3428	; 0x3428 <_ZN4UTFT7setFontEPKh>
	
	uint16_t x = 0, y = 0;
    1574:	1a 82       	std	Y+2, r1	; 0x02
    1576:	19 82       	std	Y+1, r1	; 0x01
    1578:	1c 82       	std	Y+4, r1	; 0x04
    157a:	1b 82       	std	Y+3, r1	; 0x03
	
	if (input % 4 == 1) {             // prvi stupac
    157c:	8c 89       	ldd	r24, Y+20	; 0x14
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	83 70       	andi	r24, 0x03	; 3
    1584:	99 27       	eor	r25, r25
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	29 f4       	brne	.+10     	; 0x1594 <_Z16memoryRevealCardh+0x5a>
		x = X1_1;
    158a:	87 e2       	ldi	r24, 0x27	; 39
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	23 c0       	rjmp	.+70     	; 0x15da <_Z16memoryRevealCardh+0xa0>
		} else if (input % 4 == 2) {      // drugi stupac
    1594:	8c 89       	ldd	r24, Y+20	; 0x14
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	83 70       	andi	r24, 0x03	; 3
    159c:	99 27       	eor	r25, r25
    159e:	02 97       	sbiw	r24, 0x02	; 2
    15a0:	29 f4       	brne	.+10     	; 0x15ac <_Z16memoryRevealCardh+0x72>
		x = X1_2;
    15a2:	84 e6       	ldi	r24, 0x64	; 100
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	17 c0       	rjmp	.+46     	; 0x15da <_Z16memoryRevealCardh+0xa0>
		} else if (input % 4 == 3) {      // treci stupac
    15ac:	8c 89       	ldd	r24, Y+20	; 0x14
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	83 70       	andi	r24, 0x03	; 3
    15b4:	99 27       	eor	r25, r25
    15b6:	03 97       	sbiw	r24, 0x03	; 3
    15b8:	29 f4       	brne	.+10     	; 0x15c4 <_Z16memoryRevealCardh+0x8a>
		x = X1_3;
    15ba:	81 ea       	ldi	r24, 0xA1	; 161
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	0b c0       	rjmp	.+22     	; 0x15da <_Z16memoryRevealCardh+0xa0>
		} else if (input % 4 == 0) {      // cetvrti stupac
    15c4:	8c 89       	ldd	r24, Y+20	; 0x14
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	83 70       	andi	r24, 0x03	; 3
    15cc:	99 27       	eor	r25, r25
    15ce:	89 2b       	or	r24, r25
    15d0:	21 f4       	brne	.+8      	; 0x15da <_Z16memoryRevealCardh+0xa0>
		x = X1_4;
    15d2:	8e ed       	ldi	r24, 0xDE	; 222
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ((input > 0) && (input < 5)) { // prvi red
    15da:	8c 89       	ldd	r24, Y+20	; 0x14
    15dc:	88 23       	and	r24, r24
    15de:	31 f0       	breq	.+12     	; 0x15ec <_Z16memoryRevealCardh+0xb2>
    15e0:	8c 89       	ldd	r24, Y+20	; 0x14
    15e2:	85 30       	cpi	r24, 0x05	; 5
    15e4:	18 f4       	brcc	.+6      	; 0x15ec <_Z16memoryRevealCardh+0xb2>
		y = Y1_1;
    15e6:	1c 82       	std	Y+4, r1	; 0x04
    15e8:	1b 82       	std	Y+3, r1	; 0x03
    15ea:	20 c0       	rjmp	.+64     	; 0x162c <_Z16memoryRevealCardh+0xf2>
		} else if ((input > 4) && (input < 9)) {      // drugi stupac
    15ec:	8c 89       	ldd	r24, Y+20	; 0x14
    15ee:	85 30       	cpi	r24, 0x05	; 5
    15f0:	40 f0       	brcs	.+16     	; 0x1602 <_Z16memoryRevealCardh+0xc8>
    15f2:	8c 89       	ldd	r24, Y+20	; 0x14
    15f4:	89 30       	cpi	r24, 0x09	; 9
    15f6:	28 f4       	brcc	.+10     	; 0x1602 <_Z16memoryRevealCardh+0xc8>
		y = Y1_2;
    15f8:	8d e3       	ldi	r24, 0x3D	; 61
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
    1600:	15 c0       	rjmp	.+42     	; 0x162c <_Z16memoryRevealCardh+0xf2>
		} else if ((input > 8) && (input < 13)) {      // treci stupac
    1602:	8c 89       	ldd	r24, Y+20	; 0x14
    1604:	89 30       	cpi	r24, 0x09	; 9
    1606:	40 f0       	brcs	.+16     	; 0x1618 <_Z16memoryRevealCardh+0xde>
    1608:	8c 89       	ldd	r24, Y+20	; 0x14
    160a:	8d 30       	cpi	r24, 0x0D	; 13
    160c:	28 f4       	brcc	.+10     	; 0x1618 <_Z16memoryRevealCardh+0xde>
		y = Y1_3;
    160e:	8a e7       	ldi	r24, 0x7A	; 122
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	0a c0       	rjmp	.+20     	; 0x162c <_Z16memoryRevealCardh+0xf2>
		} else if ((input > 12) && (input < 17)) {      // cetvrti stupac
    1618:	8c 89       	ldd	r24, Y+20	; 0x14
    161a:	8d 30       	cpi	r24, 0x0D	; 13
    161c:	38 f0       	brcs	.+14     	; 0x162c <_Z16memoryRevealCardh+0xf2>
    161e:	8c 89       	ldd	r24, Y+20	; 0x14
    1620:	81 31       	cpi	r24, 0x11	; 17
    1622:	20 f4       	brcc	.+8      	; 0x162c <_Z16memoryRevealCardh+0xf2>
		y = Y1_4;
    1624:	87 eb       	ldi	r24, 0xB7	; 183
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9c 83       	std	Y+4, r25	; 0x04
    162a:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	uint8_t openSymbol = board[input - 1];
    162c:	8c 89       	ldd	r24, Y+20	; 0x14
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	89 58       	subi	r24, 0x89	; 137
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	fc 01       	movw	r30, r24
    163a:	80 81       	ld	r24, Z
    163c:	8d 83       	std	Y+5, r24	; 0x05
	
	display.printNumI(openSymbol, x + 20, y + 20);
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	44 96       	adiw	r24, 0x14	; 20
    1644:	ac 01       	movw	r20, r24
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	44 96       	adiw	r24, 0x14	; 20
    164c:	9c 01       	movw	r18, r24
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	68 94       	set
    165a:	cc 24       	eor	r12, r12
    165c:	c5 f8       	bld	r12, 5
    165e:	e1 2c       	mov	r14, r1
    1660:	f1 2c       	mov	r15, r1
    1662:	8a 01       	movw	r16, r20
    1664:	ac 01       	movw	r20, r24
    1666:	bd 01       	movw	r22, r26
    1668:	84 e6       	ldi	r24, 0x64	; 100
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 4c 18 	call	0x3098	; 0x3098 <_ZN4UTFT9printNumIEliiic>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a8 e4       	ldi	r26, 0x48	; 72
    1676:	b3 e4       	ldi	r27, 0x43	; 67
    1678:	8e 83       	std	Y+6, r24	; 0x06
    167a:	9f 83       	std	Y+7, r25	; 0x07
    167c:	a8 87       	std	Y+8, r26	; 0x08
    167e:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1680:	26 e6       	ldi	r18, 0x66	; 102
    1682:	36 e6       	ldi	r19, 0x66	; 102
    1684:	46 ee       	ldi	r20, 0xE6	; 230
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	6e 81       	ldd	r22, Y+6	; 0x06
    168a:	7f 81       	ldd	r23, Y+7	; 0x07
    168c:	88 85       	ldd	r24, Y+8	; 0x08
    168e:	99 85       	ldd	r25, Y+9	; 0x09
    1690:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	8a 87       	std	Y+10, r24	; 0x0a
    169a:	9b 87       	std	Y+11, r25	; 0x0b
    169c:	ac 87       	std	Y+12, r26	; 0x0c
    169e:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	6a 85       	ldd	r22, Y+10	; 0x0a
    16aa:	7b 85       	ldd	r23, Y+11	; 0x0b
    16ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    16b0:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
    16b4:	88 23       	and	r24, r24
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <_Z16memoryRevealCardh+0x188>
		__ticks = 1;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9f 87       	std	Y+15, r25	; 0x0f
    16be:	8e 87       	std	Y+14, r24	; 0x0e
    16c0:	3f c0       	rjmp	.+126    	; 0x1740 <_Z16memoryRevealCardh+0x206>
	else if (__tmp > 65535)
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	6a 85       	ldd	r22, Y+10	; 0x0a
    16cc:	7b 85       	ldd	r23, Y+11	; 0x0b
    16ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    16d6:	18 16       	cp	r1, r24
    16d8:	4c f5       	brge	.+82     	; 0x172c <_Z16memoryRevealCardh+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	6e 81       	ldd	r22, Y+6	; 0x06
    16e4:	7f 81       	ldd	r23, Y+7	; 0x07
    16e6:	88 85       	ldd	r24, Y+8	; 0x08
    16e8:	99 85       	ldd	r25, Y+9	; 0x09
    16ea:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9f 87       	std	Y+15, r25	; 0x0f
    1700:	8e 87       	std	Y+14, r24	; 0x0e
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <_Z16memoryRevealCardh+0x1e8>
    1704:	88 eb       	ldi	r24, 0xB8	; 184
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	99 8b       	std	Y+17, r25	; 0x11
    170a:	88 8b       	std	Y+16, r24	; 0x10
    170c:	88 89       	ldd	r24, Y+16	; 0x10
    170e:	99 89       	ldd	r25, Y+17	; 0x11
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <_Z16memoryRevealCardh+0x1d6>
    1714:	99 8b       	std	Y+17, r25	; 0x11
    1716:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1718:	8e 85       	ldd	r24, Y+14	; 0x0e
    171a:	9f 85       	ldd	r25, Y+15	; 0x0f
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9f 87       	std	Y+15, r25	; 0x0f
    1720:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1722:	8e 85       	ldd	r24, Y+14	; 0x0e
    1724:	9f 85       	ldd	r25, Y+15	; 0x0f
    1726:	89 2b       	or	r24, r25
    1728:	69 f7       	brne	.-38     	; 0x1704 <_Z16memoryRevealCardh+0x1ca>
    172a:	14 c0       	rjmp	.+40     	; 0x1754 <_Z16memoryRevealCardh+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	6a 85       	ldd	r22, Y+10	; 0x0a
    172e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1730:	8c 85       	ldd	r24, Y+12	; 0x0c
    1732:	9d 85       	ldd	r25, Y+13	; 0x0d
    1734:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9f 87       	std	Y+15, r25	; 0x0f
    173e:	8e 87       	std	Y+14, r24	; 0x0e
    1740:	8e 85       	ldd	r24, Y+14	; 0x0e
    1742:	9f 85       	ldd	r25, Y+15	; 0x0f
    1744:	9b 8b       	std	Y+19, r25	; 0x13
    1746:	8a 8b       	std	Y+18, r24	; 0x12
    1748:	8a 89       	ldd	r24, Y+18	; 0x12
    174a:	9b 89       	ldd	r25, Y+19	; 0x13
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <_Z16memoryRevealCardh+0x212>
    1750:	9b 8b       	std	Y+19, r25	; 0x13
    1752:	8a 8b       	std	Y+18, r24	; 0x12
	
	_delay_ms(200);     // Debounce cekanjem
}
    1754:	64 96       	adiw	r28, 0x14	; 20
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	cf 90       	pop	r12
    176e:	08 95       	ret

00001770 <_Z10memoryInitv>:

// inicijalno stanje memory igre - generiranje sadrzaja polja i crtanje ploce
void memoryInit() {
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	display.clrScr();
    177c:	84 e6       	ldi	r24, 0x64	; 100
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 ba 11 	call	0x2374	; 0x2374 <_ZN4UTFT6clrScrEv>
	fillBoard();
    1784:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_Z9fillBoardv>
	
	//crtanje ploce za memory
	display.fillRect(BORDER_L, BOARD_Y1, BORDER_L + BORDER_WIDTH, BOARD_Y2);
    1788:	0f ee       	ldi	r16, 0xEF	; 239
    178a:	10 e0       	ldi	r17, 0x00	; 0
    178c:	25 e6       	ldi	r18, 0x65	; 101
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	60 e6       	ldi	r22, 0x60	; 96
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	84 e6       	ldi	r24, 0x64	; 100
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_C, BOARD_Y1, BORDER_C + BORDER_WIDTH, BOARD_Y2);
    17a0:	0f ee       	ldi	r16, 0xEF	; 239
    17a2:	10 e0       	ldi	r17, 0x00	; 0
    17a4:	22 ea       	ldi	r18, 0xA2	; 162
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	6d e9       	ldi	r22, 0x9D	; 157
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	84 e6       	ldi	r24, 0x64	; 100
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_R, BOARD_Y1, BORDER_R + BORDER_WIDTH, BOARD_Y2);
    17b8:	0f ee       	ldi	r16, 0xEF	; 239
    17ba:	10 e0       	ldi	r17, 0x00	; 0
    17bc:	2f ed       	ldi	r18, 0xDF	; 223
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	6a ed       	ldi	r22, 0xDA	; 218
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	84 e6       	ldi	r24, 0x64	; 100
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_T, BOARD_X2, BORDER_T + BORDER_WIDTH);
    17d0:	0d e3       	ldi	r16, 0x3D	; 61
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	26 e1       	ldi	r18, 0x16	; 22
    17d6:	31 e0       	ldi	r19, 0x01	; 1
    17d8:	48 e3       	ldi	r20, 0x38	; 56
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	67 e2       	ldi	r22, 0x27	; 39
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	84 e6       	ldi	r24, 0x64	; 100
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_M, BOARD_X2, BORDER_M + BORDER_WIDTH);
    17e8:	0a e7       	ldi	r16, 0x7A	; 122
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	26 e1       	ldi	r18, 0x16	; 22
    17ee:	31 e0       	ldi	r19, 0x01	; 1
    17f0:	45 e7       	ldi	r20, 0x75	; 117
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	67 e2       	ldi	r22, 0x27	; 39
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	84 e6       	ldi	r24, 0x64	; 100
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_B, BOARD_X2, BORDER_B + BORDER_WIDTH);
    1800:	07 eb       	ldi	r16, 0xB7	; 183
    1802:	10 e0       	ldi	r17, 0x00	; 0
    1804:	26 e1       	ldi	r18, 0x16	; 22
    1806:	31 e0       	ldi	r19, 0x01	; 1
    1808:	42 eb       	ldi	r20, 0xB2	; 178
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	67 e2       	ldi	r22, 0x27	; 39
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	84 e6       	ldi	r24, 0x64	; 100
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN4UTFT8fillRectEiiii>
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <_Z10memoryGamev>:

//TODO - zavrsi igru kad su svi brojevi u kontrolnom polju 1
//void memoryEndGame() {}

// glavni game loop
void memoryGame() {
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	65 97       	sbiw	r28, 0x15	; 21
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
	uint16_t input;
	bool started = 0;
    1836:	19 82       	std	Y+1, r1	; 0x01
	
	while(1) {
		input = memoryGetInput(); //svakih pola sekunde provjeri input
    1838:	0e 94 2f 09 	call	0x125e	; 0x125e <_Z14memoryGetInputv>
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9b 83       	std	Y+3, r25	; 0x03
    1842:	8a 83       	std	Y+2, r24	; 0x02
		if (!started) { //inicijalizira stanje igre pri prvom pokretanju
    1844:	99 81       	ldd	r25, Y+1	; 0x01
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 27       	eor	r24, r25
    184a:	88 23       	and	r24, r24
    184c:	a9 f0       	breq	.+42     	; 0x1878 <_Z10memoryGamev+0x56>
			// sluzi kao workaroun za vrijeme - generira random seed na temelju gdje smo dodirnuli
			uint16_t x = getX();
    184e:	0e 94 6b 07 	call	0xed6	; 0xed6 <_Z4getXv>
    1852:	9d 83       	std	Y+5, r25	; 0x05
    1854:	8c 83       	std	Y+4, r24	; 0x04
			uint16_t y = getY();
    1856:	0e 94 2e 08 	call	0x105c	; 0x105c <_Z4getYv>
    185a:	9f 83       	std	Y+7, r25	; 0x07
    185c:	8e 83       	std	Y+6, r24	; 0x06
			srand(x+y);
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	8e 81       	ldd	r24, Y+6	; 0x06
    1864:	9f 81       	ldd	r25, Y+7	; 0x07
    1866:	82 0f       	add	r24, r18
    1868:	93 1f       	adc	r25, r19
    186a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <srand>
			memoryInit();
    186e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_Z10memoryInitv>
			started = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	0a c0       	rjmp	.+20     	; 0x188c <_Z10memoryGamev+0x6a>
			} else if (input > 0 && started) { //ako igra vec traje i pritisnut je ekran, otvori kartu
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	89 2b       	or	r24, r25
    187e:	31 f0       	breq	.+12     	; 0x188c <_Z10memoryGamev+0x6a>
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	88 23       	and	r24, r24
    1884:	19 f0       	breq	.+6      	; 0x188c <_Z10memoryGamev+0x6a>
			memoryRevealCard(input);
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	0e 94 9d 0a 	call	0x153a	; 0x153a <_Z16memoryRevealCardh>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	aa ef       	ldi	r26, 0xFA	; 250
    1892:	b3 e4       	ldi	r27, 0x43	; 67
    1894:	88 87       	std	Y+8, r24	; 0x08
    1896:	99 87       	std	Y+9, r25	; 0x09
    1898:	aa 87       	std	Y+10, r26	; 0x0a
    189a:	bb 87       	std	Y+11, r27	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    189c:	26 e6       	ldi	r18, 0x66	; 102
    189e:	36 e6       	ldi	r19, 0x66	; 102
    18a0:	46 ee       	ldi	r20, 0xE6	; 230
    18a2:	54 e4       	ldi	r21, 0x44	; 68
    18a4:	68 85       	ldd	r22, Y+8	; 0x08
    18a6:	79 85       	ldd	r23, Y+9	; 0x09
    18a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ac:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8c 87       	std	Y+12, r24	; 0x0c
    18b6:	9d 87       	std	Y+13, r25	; 0x0d
    18b8:	ae 87       	std	Y+14, r26	; 0x0e
    18ba:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    18c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    18c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    18cc:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <_Z10memoryGamev+0xbc>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	99 8b       	std	Y+17, r25	; 0x11
    18da:	88 8b       	std	Y+16, r24	; 0x10
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <_Z10memoryGamev+0x13a>
	else if (__tmp > 65535)
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    18e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    18ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ee:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <_Z10memoryGamev+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e2       	ldi	r20, 0x20	; 32
    18fc:	51 e4       	ldi	r21, 0x41	; 65
    18fe:	68 85       	ldd	r22, Y+8	; 0x08
    1900:	79 85       	ldd	r23, Y+9	; 0x09
    1902:	8a 85       	ldd	r24, Y+10	; 0x0a
    1904:	9b 85       	ldd	r25, Y+11	; 0x0b
    1906:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	99 8b       	std	Y+17, r25	; 0x11
    191c:	88 8b       	std	Y+16, r24	; 0x10
    191e:	0f c0       	rjmp	.+30     	; 0x193e <_Z10memoryGamev+0x11c>
    1920:	88 eb       	ldi	r24, 0xB8	; 184
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9b 8b       	std	Y+19, r25	; 0x13
    1926:	8a 8b       	std	Y+18, r24	; 0x12
    1928:	8a 89       	ldd	r24, Y+18	; 0x12
    192a:	9b 89       	ldd	r25, Y+19	; 0x13
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <_Z10memoryGamev+0x10a>
    1930:	9b 8b       	std	Y+19, r25	; 0x13
    1932:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	88 89       	ldd	r24, Y+16	; 0x10
    1936:	99 89       	ldd	r25, Y+17	; 0x11
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	99 8b       	std	Y+17, r25	; 0x11
    193c:	88 8b       	std	Y+16, r24	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	88 89       	ldd	r24, Y+16	; 0x10
    1940:	99 89       	ldd	r25, Y+17	; 0x11
    1942:	89 2b       	or	r24, r25
    1944:	69 f7       	brne	.-38     	; 0x1920 <_Z10memoryGamev+0xfe>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <_Z10memoryGamev+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6c 85       	ldd	r22, Y+12	; 0x0c
    194a:	7d 85       	ldd	r23, Y+13	; 0x0d
    194c:	8e 85       	ldd	r24, Y+14	; 0x0e
    194e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1950:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	99 8b       	std	Y+17, r25	; 0x11
    195a:	88 8b       	std	Y+16, r24	; 0x10
    195c:	88 89       	ldd	r24, Y+16	; 0x10
    195e:	99 89       	ldd	r25, Y+17	; 0x11
    1960:	9d 8b       	std	Y+21, r25	; 0x15
    1962:	8c 8b       	std	Y+20, r24	; 0x14
    1964:	8c 89       	ldd	r24, Y+20	; 0x14
    1966:	9d 89       	ldd	r25, Y+21	; 0x15
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <_Z10memoryGamev+0x146>
    196c:	9d 8b       	std	Y+21, r25	; 0x15
    196e:	8c 8b       	std	Y+20, r24	; 0x14
		}
		_delay_ms(500);
	}
    1970:	63 cf       	rjmp	.-314    	; 0x1838 <_Z10memoryGamev+0x16>

00001972 <main>:
}

int main(void) {
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	
	//T-IRQ spojen na PINB3 kao ulazni te je nizak samo pri dodiru, inace visok
	DDRB &= ~_BV(T_IRQ);
    197a:	87 e3       	ldi	r24, 0x37	; 55
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	27 e3       	ldi	r18, 0x37	; 55
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	f9 01       	movw	r30, r18
    1984:	20 81       	ld	r18, Z
    1986:	27 7f       	andi	r18, 0xF7	; 247
    1988:	fc 01       	movw	r30, r24
    198a:	20 83       	st	Z, r18

	SPI_Init();
    198c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <SPI_Init>
	SS_Enable;
    1990:	88 e3       	ldi	r24, 0x38	; 56
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	28 e3       	ldi	r18, 0x38	; 56
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	f9 01       	movw	r30, r18
    199a:	20 81       	ld	r18, Z
    199c:	2f 7e       	andi	r18, 0xEF	; 239
    199e:	fc 01       	movw	r30, r24
    19a0:	20 83       	st	Z, r18
	
	display.InitLCD(LANDSCAPE);
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	84 e6       	ldi	r24, 0x64	; 100
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 4c 10 	call	0x2098	; 0x2098 <_ZN4UTFT7InitLCDEh>
	display.setFont(BigFont);
    19ac:	62 e7       	ldi	r22, 0x72	; 114
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	84 e6       	ldi	r24, 0x64	; 100
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 14 1a 	call	0x3428	; 0x3428 <_ZN4UTFT7setFontEPKh>
	display.clrScr();
    19b8:	84 e6       	ldi	r24, 0x64	; 100
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 ba 11 	call	0x2374	; 0x2374 <_ZN4UTFT6clrScrEv>
	
	while (1) {
		memoryGame();
    19c0:	0e 94 11 0c 	call	0x1822	; 0x1822 <_Z10memoryGamev>
		}
		_delay_ms(500);
	}
}

int main(void) {
    19c4:	fd cf       	rjmp	.-6      	; 0x19c0 <main+0x4e>

000019c6 <_Z41__static_initialization_and_destruction_0ii>:
	display.clrScr();
	
	while (1) {
		memoryGame();
	}
}
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <_Z41__static_initialization_and_destruction_0ii+0x6>
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <_Z41__static_initialization_and_destruction_0ii+0x8>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	7c 83       	std	Y+4, r23	; 0x04
    19d8:	6b 83       	std	Y+3, r22	; 0x03
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	41 f4       	brne	.+16     	; 0x19f2 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	21 f4       	brne	.+8      	; 0x19f2 <_Z41__static_initialization_and_destruction_0ii+0x2c>
#define Y2_1 56
#define Y2_2 117
#define Y2_3 178
#define Y2_4 239

UTFT display;
    19ea:	84 e6       	ldi	r24, 0x64	; 100
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 28 10 	call	0x2050	; 0x2050 <_ZN4UTFTC1Ev>
	display.clrScr();
	
	while (1) {
		memoryGame();
	}
}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <_GLOBAL__sub_I_display>:
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	6f ef       	ldi	r22, 0xFF	; 255
    1a0a:	7f ef       	ldi	r23, 0xFF	; 255
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_Z41__static_initialization_and_destruction_0ii>
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <SPI_Init>:

#include "SPI_Master_H_file.h"				/* Include SPI Master header file */


void SPI_Init()								/* SPI Initialize function */
{
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);		/* Make MOSI, SCK, 0th pin direction as output pins */
    1a22:	87 e3       	ldi	r24, 0x37	; 55
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	27 e3       	ldi	r18, 0x37	; 55
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	20 81       	ld	r18, Z
    1a2e:	20 6b       	ori	r18, 0xB0	; 176
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
	DDRB &= ~(1<<MISO);						/* Make MISO pin as input pin */
    1a34:	87 e3       	ldi	r24, 0x37	; 55
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	27 e3       	ldi	r18, 0x37	; 55
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	f9 01       	movw	r30, r18
    1a3e:	20 81       	ld	r18, Z
    1a40:	2f 7b       	andi	r18, 0xBF	; 191
    1a42:	fc 01       	movw	r30, r24
    1a44:	20 83       	st	Z, r18
	PORTB |= (1<<SS);						/* Disable slave initially by making high on SS pin */
    1a46:	88 e3       	ldi	r24, 0x38	; 56
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	28 e3       	ldi	r18, 0x38	; 56
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	f9 01       	movw	r30, r18
    1a50:	20 81       	ld	r18, Z
    1a52:	20 61       	ori	r18, 0x10	; 16
    1a54:	fc 01       	movw	r30, r24
    1a56:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI, Enable in master mode, with Fosc/16 SCK frequency */
    1a58:	8d e2       	ldi	r24, 0x2D	; 45
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	21 e5       	ldi	r18, 0x51	; 81
    1a5e:	fc 01       	movw	r30, r24
    1a60:	20 83       	st	Z, r18
	SPSR &= ~(1<<SPI2X);					/* Disable speed doubler */
    1a62:	8e e2       	ldi	r24, 0x2E	; 46
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	2e e2       	ldi	r18, 0x2E	; 46
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	20 81       	ld	r18, Z
    1a6e:	2e 7f       	andi	r18, 0xFE	; 254
    1a70:	fc 01       	movw	r30, r24
    1a72:	20 83       	st	Z, r18
}
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <SPI_Write>:

void SPI_Write(char data)					/* SPI write data function */
{
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <SPI_Write+0x6>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	8a 83       	std	Y+2, r24	; 0x02
	char flush_buffer;
	SPDR = data;							/* Write data to SPI data register */
    1a86:	8f e2       	ldi	r24, 0x2F	; 47
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
    1a90:	00 00       	nop
    1a92:	8e e2       	ldi	r24, 0x2E	; 46
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	fc 01       	movw	r30, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 23       	and	r24, r24
    1a9c:	d4 f7       	brge	.-12     	; 0x1a92 <SPI_Write+0x18>
	flush_buffer = SPDR;					/* Flush received data */
    1a9e:	8f e2       	ldi	r24, 0x2F	; 47
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	80 81       	ld	r24, Z
    1aa6:	89 83       	std	Y+1, r24	; 0x01
/* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <SPI_Read>:

char SPI_Read()								/* SPI read data function */
{
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xFF;
    1aba:	8f e2       	ldi	r24, 0x2F	; 47
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	2f ef       	ldi	r18, 0xFF	; 255
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
    1ac4:	00 00       	nop
    1ac6:	8e e2       	ldi	r24, 0x2E	; 46
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	fc 01       	movw	r30, r24
    1acc:	80 81       	ld	r24, Z
    1ace:	88 23       	and	r24, r24
    1ad0:	d4 f7       	brge	.-12     	; 0x1ac6 <SPI_Read+0x14>
	return(SPDR);							/* return received data */
    1ad2:	8f e2       	ldi	r24, 0x2F	; 47
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	80 81       	ld	r24, Z
}
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

00001ae0 <SSD1289_init>:
#include "fastio.h"



void SSD1289_init()
{	
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	aa 97       	sbiw	r28, 0x2a	; 42
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
	DATA_PORT_LOW_DDR = 0xff;
    1af4:	81 e3       	ldi	r24, 0x31	; 49
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	2f ef       	ldi	r18, 0xFF	; 255
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
	DATA_PORT_HIGH_DDR = 0xff;
    1afe:	8a e3       	ldi	r24, 0x3A	; 58
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	2f ef       	ldi	r18, 0xFF	; 255
    1b04:	fc 01       	movw	r30, r24
    1b06:	20 83       	st	Z, r18
			
	RS_PORT_DDR |= _BV( RS_PIN);
    1b08:	84 e3       	ldi	r24, 0x34	; 52
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	24 e3       	ldi	r18, 0x34	; 52
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	f9 01       	movw	r30, r18
    1b12:	20 81       	ld	r18, Z
    1b14:	20 68       	ori	r18, 0x80	; 128
    1b16:	fc 01       	movw	r30, r24
    1b18:	20 83       	st	Z, r18
				
	WR_PORT_DDR |= _BV(WR_PIN);
    1b1a:	84 e3       	ldi	r24, 0x34	; 52
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	24 e3       	ldi	r18, 0x34	; 52
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	f9 01       	movw	r30, r18
    1b24:	20 81       	ld	r18, Z
    1b26:	20 64       	ori	r18, 0x40	; 64
    1b28:	fc 01       	movw	r30, r24
    1b2a:	20 83       	st	Z, r18

	CS_PORT_DDR |= _BV(CS_PIN);
    1b2c:	84 e3       	ldi	r24, 0x34	; 52
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	24 e3       	ldi	r18, 0x34	; 52
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	f9 01       	movw	r30, r18
    1b36:	20 81       	ld	r18, Z
    1b38:	21 60       	ori	r18, 0x01	; 1
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 83       	st	Z, r18
		
	RD_PORT_DDR |= _BV(RD_PIN);
    1b3e:	87 e3       	ldi	r24, 0x37	; 55
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	27 e3       	ldi	r18, 0x37	; 55
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	f9 01       	movw	r30, r18
    1b48:	20 81       	ld	r18, Z
    1b4a:	21 60       	ori	r18, 0x01	; 1
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	20 83       	st	Z, r18
	RD_PORT |= _BV(RD_PIN);
    1b50:	88 e3       	ldi	r24, 0x38	; 56
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	28 e3       	ldi	r18, 0x38	; 56
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	f9 01       	movw	r30, r18
    1b5a:	20 81       	ld	r18, Z
    1b5c:	21 60       	ori	r18, 0x01	; 1
    1b5e:	fc 01       	movw	r30, r24
    1b60:	20 83       	st	Z, r18
		
	RESET_PORT_DDR |= _BV(RESET_PIN);
    1b62:	84 e3       	ldi	r24, 0x34	; 52
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	24 e3       	ldi	r18, 0x34	; 52
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	20 81       	ld	r18, Z
    1b6e:	22 60       	ori	r18, 0x02	; 2
    1b70:	fc 01       	movw	r30, r24
    1b72:	20 83       	st	Z, r18
		
	BACK_LIGHT_PORT |= _BV(BACK_LIGHT_PIN);
    1b74:	88 e3       	ldi	r24, 0x38	; 56
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	28 e3       	ldi	r18, 0x38	; 56
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	20 81       	ld	r18, Z
    1b80:	22 60       	ori	r18, 0x02	; 2
    1b82:	fc 01       	movw	r30, r24
    1b84:	20 83       	st	Z, r18
	
	BACK_LIGHT_DDR |= _BV(BACK_LIGHT_PIN);			
    1b86:	87 e3       	ldi	r24, 0x37	; 55
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	27 e3       	ldi	r18, 0x37	; 55
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	f9 01       	movw	r30, r18
    1b90:	20 81       	ld	r18, Z
    1b92:	22 60       	ori	r18, 0x02	; 2
    1b94:	fc 01       	movw	r30, r24
    1b96:	20 83       	st	Z, r18
	
	sbi(RESET_PORT, RESET_PIN);
    1b98:	85 e3       	ldi	r24, 0x35	; 53
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	25 e3       	ldi	r18, 0x35	; 53
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	20 81       	ld	r18, Z
    1ba4:	22 60       	ori	r18, 0x02	; 2
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	20 83       	st	Z, r18
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a0 ea       	ldi	r26, 0xA0	; 160
    1bb0:	b0 e4       	ldi	r27, 0x40	; 64
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	ab 83       	std	Y+3, r26	; 0x03
    1bb8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bba:	26 e6       	ldi	r18, 0x66	; 102
    1bbc:	36 e6       	ldi	r19, 0x66	; 102
    1bbe:	46 ee       	ldi	r20, 0xE6	; 230
    1bc0:	54 e4       	ldi	r21, 0x44	; 68
    1bc2:	69 81       	ldd	r22, Y+1	; 0x01
    1bc4:	7a 81       	ldd	r23, Y+2	; 0x02
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	af 83       	std	Y+7, r26	; 0x07
    1bd8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	6d 81       	ldd	r22, Y+5	; 0x05
    1be4:	7e 81       	ldd	r23, Y+6	; 0x06
    1be6:	8f 81       	ldd	r24, Y+7	; 0x07
    1be8:	98 85       	ldd	r25, Y+8	; 0x08
    1bea:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <SSD1289_init+0x11c>
		__ticks = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9a 87       	std	Y+10, r25	; 0x0a
    1bf8:	89 87       	std	Y+9, r24	; 0x09
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <SSD1289_init+0x19a>
	else if (__tmp > 65535)
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	3f ef       	ldi	r19, 0xFF	; 255
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	57 e4       	ldi	r21, 0x47	; 71
    1c04:	6d 81       	ldd	r22, Y+5	; 0x05
    1c06:	7e 81       	ldd	r23, Y+6	; 0x06
    1c08:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0a:	98 85       	ldd	r25, Y+8	; 0x08
    1c0c:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	4c f5       	brge	.+82     	; 0x1c66 <SSD1289_init+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	69 81       	ldd	r22, Y+1	; 0x01
    1c1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9a 87       	std	Y+10, r25	; 0x0a
    1c3a:	89 87       	std	Y+9, r24	; 0x09
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <SSD1289_init+0x17c>
    1c3e:	88 eb       	ldi	r24, 0xB8	; 184
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c48:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <SSD1289_init+0x16a>
    1c4e:	9c 87       	std	Y+12, r25	; 0x0c
    1c50:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	89 85       	ldd	r24, Y+9	; 0x09
    1c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	9a 87       	std	Y+10, r25	; 0x0a
    1c5a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	89 2b       	or	r24, r25
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <SSD1289_init+0x15e>
    1c64:	14 c0       	rjmp	.+40     	; 0x1c8e <SSD1289_init+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	6d 81       	ldd	r22, Y+5	; 0x05
    1c68:	7e 81       	ldd	r23, Y+6	; 0x06
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	98 85       	ldd	r25, Y+8	; 0x08
    1c6e:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9a 87       	std	Y+10, r25	; 0x0a
    1c78:	89 87       	std	Y+9, r24	; 0x09
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	9e 87       	std	Y+14, r25	; 0x0e
    1c80:	8d 87       	std	Y+13, r24	; 0x0d
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <SSD1289_init+0x1a6>
    1c8a:	9e 87       	std	Y+14, r25	; 0x0e
    1c8c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	cbi(RESET_PORT, RESET_PIN);
    1c8e:	85 e3       	ldi	r24, 0x35	; 53
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	25 e3       	ldi	r18, 0x35	; 53
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	f9 01       	movw	r30, r18
    1c98:	20 81       	ld	r18, Z
    1c9a:	2d 7f       	andi	r18, 0xFD	; 253
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e7       	ldi	r26, 0x70	; 112
    1ca6:	b1 e4       	ldi	r27, 0x41	; 65
    1ca8:	8f 87       	std	Y+15, r24	; 0x0f
    1caa:	98 8b       	std	Y+16, r25	; 0x10
    1cac:	a9 8b       	std	Y+17, r26	; 0x11
    1cae:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	26 e6       	ldi	r18, 0x66	; 102
    1cb2:	36 e6       	ldi	r19, 0x66	; 102
    1cb4:	46 ee       	ldi	r20, 0xE6	; 230
    1cb6:	54 e4       	ldi	r21, 0x44	; 68
    1cb8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cba:	78 89       	ldd	r23, Y+16	; 0x10
    1cbc:	89 89       	ldd	r24, Y+17	; 0x11
    1cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc0:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8b 8b       	std	Y+19, r24	; 0x13
    1cca:	9c 8b       	std	Y+20, r25	; 0x14
    1ccc:	ad 8b       	std	Y+21, r26	; 0x15
    1cce:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e8       	ldi	r20, 0x80	; 128
    1cd6:	5f e3       	ldi	r21, 0x3F	; 63
    1cd8:	6b 89       	ldd	r22, Y+19	; 0x13
    1cda:	7c 89       	ldd	r23, Y+20	; 0x14
    1cdc:	8d 89       	ldd	r24, Y+21	; 0x15
    1cde:	9e 89       	ldd	r25, Y+22	; 0x16
    1ce0:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <SSD1289_init+0x212>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	98 8f       	std	Y+24, r25	; 0x18
    1cee:	8f 8b       	std	Y+23, r24	; 0x17
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <SSD1289_init+0x290>
	else if (__tmp > 65535)
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	6b 89       	ldd	r22, Y+19	; 0x13
    1cfc:	7c 89       	ldd	r23, Y+20	; 0x14
    1cfe:	8d 89       	ldd	r24, Y+21	; 0x15
    1d00:	9e 89       	ldd	r25, Y+22	; 0x16
    1d02:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <SSD1289_init+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e2       	ldi	r20, 0x20	; 32
    1d10:	51 e4       	ldi	r21, 0x41	; 65
    1d12:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d14:	78 89       	ldd	r23, Y+16	; 0x10
    1d16:	89 89       	ldd	r24, Y+17	; 0x11
    1d18:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1a:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	98 8f       	std	Y+24, r25	; 0x18
    1d30:	8f 8b       	std	Y+23, r24	; 0x17
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <SSD1289_init+0x272>
    1d34:	88 eb       	ldi	r24, 0xB8	; 184
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9a 8f       	std	Y+26, r25	; 0x1a
    1d3a:	89 8f       	std	Y+25, r24	; 0x19
    1d3c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <SSD1289_init+0x260>
    1d44:	9a 8f       	std	Y+26, r25	; 0x1a
    1d46:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	98 8f       	std	Y+24, r25	; 0x18
    1d50:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	8f 89       	ldd	r24, Y+23	; 0x17
    1d54:	98 8d       	ldd	r25, Y+24	; 0x18
    1d56:	89 2b       	or	r24, r25
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <SSD1289_init+0x254>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <SSD1289_init+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6b 89       	ldd	r22, Y+19	; 0x13
    1d5e:	7c 89       	ldd	r23, Y+20	; 0x14
    1d60:	8d 89       	ldd	r24, Y+21	; 0x15
    1d62:	9e 89       	ldd	r25, Y+22	; 0x16
    1d64:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	98 8f       	std	Y+24, r25	; 0x18
    1d6e:	8f 8b       	std	Y+23, r24	; 0x17
    1d70:	8f 89       	ldd	r24, Y+23	; 0x17
    1d72:	98 8d       	ldd	r25, Y+24	; 0x18
    1d74:	9c 8f       	std	Y+28, r25	; 0x1c
    1d76:	8b 8f       	std	Y+27, r24	; 0x1b
    1d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <SSD1289_init+0x29c>
    1d80:	9c 8f       	std	Y+28, r25	; 0x1c
    1d82:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(15);
	sbi(RESET_PORT, RESET_PIN);
    1d84:	85 e3       	ldi	r24, 0x35	; 53
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	25 e3       	ldi	r18, 0x35	; 53
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	f9 01       	movw	r30, r18
    1d8e:	20 81       	ld	r18, Z
    1d90:	22 60       	ori	r18, 0x02	; 2
    1d92:	fc 01       	movw	r30, r24
    1d94:	20 83       	st	Z, r18
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e7       	ldi	r26, 0x70	; 112
    1d9c:	b1 e4       	ldi	r27, 0x41	; 65
    1d9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1da0:	9e 8f       	std	Y+30, r25	; 0x1e
    1da2:	af 8f       	std	Y+31, r26	; 0x1f
    1da4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	26 e6       	ldi	r18, 0x66	; 102
    1da8:	36 e6       	ldi	r19, 0x66	; 102
    1daa:	46 ee       	ldi	r20, 0xE6	; 230
    1dac:	54 e4       	ldi	r21, 0x44	; 68
    1dae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1db0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1db2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1db4:	98 a1       	ldd	r25, Y+32	; 0x20
    1db6:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
    1dc0:	9a a3       	std	Y+34, r25	; 0x22
    1dc2:	ab a3       	std	Y+35, r26	; 0x23
    1dc4:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	69 a1       	ldd	r22, Y+33	; 0x21
    1dd0:	7a a1       	ldd	r23, Y+34	; 0x22
    1dd2:	8b a1       	ldd	r24, Y+35	; 0x23
    1dd4:	9c a1       	ldd	r25, Y+36	; 0x24
    1dd6:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__cmpsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <SSD1289_init+0x308>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9e a3       	std	Y+38, r25	; 0x26
    1de4:	8d a3       	std	Y+37, r24	; 0x25
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <SSD1289_init+0x386>
	else if (__tmp > 65535)
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	69 a1       	ldd	r22, Y+33	; 0x21
    1df2:	7a a1       	ldd	r23, Y+34	; 0x22
    1df4:	8b a1       	ldd	r24, Y+35	; 0x23
    1df6:	9c a1       	ldd	r25, Y+36	; 0x24
    1df8:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <SSD1289_init+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e0a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e10:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e a3       	std	Y+38, r25	; 0x26
    1e26:	8d a3       	std	Y+37, r24	; 0x25
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <SSD1289_init+0x368>
    1e2a:	88 eb       	ldi	r24, 0xB8	; 184
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	98 a7       	std	Y+40, r25	; 0x28
    1e30:	8f a3       	std	Y+39, r24	; 0x27
    1e32:	8f a1       	ldd	r24, Y+39	; 0x27
    1e34:	98 a5       	ldd	r25, Y+40	; 0x28
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <SSD1289_init+0x356>
    1e3a:	98 a7       	std	Y+40, r25	; 0x28
    1e3c:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e40:	9e a1       	ldd	r25, Y+38	; 0x26
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	9e a3       	std	Y+38, r25	; 0x26
    1e46:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4c:	89 2b       	or	r24, r25
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <SSD1289_init+0x34a>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <SSD1289_init+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	69 a1       	ldd	r22, Y+33	; 0x21
    1e54:	7a a1       	ldd	r23, Y+34	; 0x22
    1e56:	8b a1       	ldd	r24, Y+35	; 0x23
    1e58:	9c a1       	ldd	r25, Y+36	; 0x24
    1e5a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9e a3       	std	Y+38, r25	; 0x26
    1e64:	8d a3       	std	Y+37, r24	; 0x25
    1e66:	8d a1       	ldd	r24, Y+37	; 0x25
    1e68:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6a:	9a a7       	std	Y+42, r25	; 0x2a
    1e6c:	89 a7       	std	Y+41, r24	; 0x29
    1e6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <SSD1289_init+0x392>
    1e76:	9a a7       	std	Y+42, r25	; 0x2a
    1e78:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(15);

	cbi(CS_PORT, CS_PIN);
    1e7a:	85 e3       	ldi	r24, 0x35	; 53
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	25 e3       	ldi	r18, 0x35	; 53
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	20 81       	ld	r18, Z
    1e86:	2e 7f       	andi	r18, 0xFE	; 254
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18

	LCD_Write_COM_DATA(0x00,0x0001);
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x03,0xA8A4);
    1e96:	64 ea       	ldi	r22, 0xA4	; 164
    1e98:	78 ea       	ldi	r23, 0xA8	; 168
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0C,0x0000);
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	8c e0       	ldi	r24, 0x0C	; 12
    1ea6:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0D,0x080C);
    1eaa:	6c e0       	ldi	r22, 0x0C	; 12
    1eac:	78 e0       	ldi	r23, 0x08	; 8
    1eae:	8d e0       	ldi	r24, 0x0D	; 13
    1eb0:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0E,0x2B00);
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	7b e2       	ldi	r23, 0x2B	; 43
    1eb8:	8e e0       	ldi	r24, 0x0E	; 14
    1eba:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x1E,0x00B7);
    1ebe:	67 eb       	ldi	r22, 0xB7	; 183
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	8e e1       	ldi	r24, 0x1E	; 30
    1ec4:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x01,0x2B3F);
    1ec8:	6f e3       	ldi	r22, 0x3F	; 63
    1eca:	7b e2       	ldi	r23, 0x2B	; 43
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x02,0x0600);
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	76 e0       	ldi	r23, 0x06	; 6
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x10,0x0000);
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	80 e1       	ldi	r24, 0x10	; 16
    1ee2:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x11,0x6070);
    1ee6:	60 e7       	ldi	r22, 0x70	; 112
    1ee8:	70 e6       	ldi	r23, 0x60	; 96
    1eea:	81 e1       	ldi	r24, 0x11	; 17
    1eec:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x05,0x0000);
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	85 e0       	ldi	r24, 0x05	; 5
    1ef6:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x06,0x0000);
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	86 e0       	ldi	r24, 0x06	; 6
    1f00:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x16,0xEF1C);
    1f04:	6c e1       	ldi	r22, 0x1C	; 28
    1f06:	7f ee       	ldi	r23, 0xEF	; 239
    1f08:	86 e1       	ldi	r24, 0x16	; 22
    1f0a:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x17,0x0003);
    1f0e:	63 e0       	ldi	r22, 0x03	; 3
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	87 e1       	ldi	r24, 0x17	; 23
    1f14:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x07,0x0233);
    1f18:	63 e3       	ldi	r22, 0x33	; 51
    1f1a:	72 e0       	ldi	r23, 0x02	; 2
    1f1c:	87 e0       	ldi	r24, 0x07	; 7
    1f1e:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0B,0x0000);
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	8b e0       	ldi	r24, 0x0B	; 11
    1f28:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0F,0x0000);
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	8f e0       	ldi	r24, 0x0F	; 15
    1f32:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x41,0x0000);
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	81 e4       	ldi	r24, 0x41	; 65
    1f3c:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x42,0x0000);
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	82 e4       	ldi	r24, 0x42	; 66
    1f46:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x48,0x0000);
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	88 e4       	ldi	r24, 0x48	; 72
    1f50:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x49,0x013F);
    1f54:	6f e3       	ldi	r22, 0x3F	; 63
    1f56:	71 e0       	ldi	r23, 0x01	; 1
    1f58:	89 e4       	ldi	r24, 0x49	; 73
    1f5a:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4A,0x0000);
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	8a e4       	ldi	r24, 0x4A	; 74
    1f64:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4B,0x0000);
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	70 e0       	ldi	r23, 0x00	; 0
    1f6c:	8b e4       	ldi	r24, 0x4B	; 75
    1f6e:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x44,0xEF00);
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	7f ee       	ldi	r23, 0xEF	; 239
    1f76:	84 e4       	ldi	r24, 0x44	; 68
    1f78:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x45,0x0000);
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	85 e4       	ldi	r24, 0x45	; 69
    1f82:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x46,0x013F);
    1f86:	6f e3       	ldi	r22, 0x3F	; 63
    1f88:	71 e0       	ldi	r23, 0x01	; 1
    1f8a:	86 e4       	ldi	r24, 0x46	; 70
    1f8c:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x30,0x0707);
    1f90:	67 e0       	ldi	r22, 0x07	; 7
    1f92:	77 e0       	ldi	r23, 0x07	; 7
    1f94:	80 e3       	ldi	r24, 0x30	; 48
    1f96:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x31,0x0204);
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	72 e0       	ldi	r23, 0x02	; 2
    1f9e:	81 e3       	ldi	r24, 0x31	; 49
    1fa0:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x32,0x0204);
    1fa4:	64 e0       	ldi	r22, 0x04	; 4
    1fa6:	72 e0       	ldi	r23, 0x02	; 2
    1fa8:	82 e3       	ldi	r24, 0x32	; 50
    1faa:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x33,0x0502);
    1fae:	62 e0       	ldi	r22, 0x02	; 2
    1fb0:	75 e0       	ldi	r23, 0x05	; 5
    1fb2:	83 e3       	ldi	r24, 0x33	; 51
    1fb4:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x34,0x0507);
    1fb8:	67 e0       	ldi	r22, 0x07	; 7
    1fba:	75 e0       	ldi	r23, 0x05	; 5
    1fbc:	84 e3       	ldi	r24, 0x34	; 52
    1fbe:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x35,0x0204);
    1fc2:	64 e0       	ldi	r22, 0x04	; 4
    1fc4:	72 e0       	ldi	r23, 0x02	; 2
    1fc6:	85 e3       	ldi	r24, 0x35	; 53
    1fc8:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x36,0x0204);
    1fcc:	64 e0       	ldi	r22, 0x04	; 4
    1fce:	72 e0       	ldi	r23, 0x02	; 2
    1fd0:	86 e3       	ldi	r24, 0x36	; 54
    1fd2:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x37,0x0502);
    1fd6:	62 e0       	ldi	r22, 0x02	; 2
    1fd8:	75 e0       	ldi	r23, 0x05	; 5
    1fda:	87 e3       	ldi	r24, 0x37	; 55
    1fdc:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3A,0x0302);
    1fe0:	62 e0       	ldi	r22, 0x02	; 2
    1fe2:	73 e0       	ldi	r23, 0x03	; 3
    1fe4:	8a e3       	ldi	r24, 0x3A	; 58
    1fe6:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3B,0x0302);
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	73 e0       	ldi	r23, 0x03	; 3
    1fee:	8b e3       	ldi	r24, 0x3B	; 59
    1ff0:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x23,0x0000);
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	83 e2       	ldi	r24, 0x23	; 35
    1ffa:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x24,0x0000);
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	84 e2       	ldi	r24, 0x24	; 36
    2004:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x25,0x8000);
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	70 e8       	ldi	r23, 0x80	; 128
    200c:	85 e2       	ldi	r24, 0x25	; 37
    200e:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4f,0x0000);
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	8f e4       	ldi	r24, 0x4F	; 79
    2018:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4e,0x0000);
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	8e e4       	ldi	r24, 0x4E	; 78
    2022:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	LCD_Write_COM(0x22);
    2026:	82 e2       	ldi	r24, 0x22	; 34
    2028:	0e 94 2e 07 	call	0xe5c	; 0xe5c <LCD_Write_COM>


	sbi(CS_PORT, CS_PIN);
    202c:	85 e3       	ldi	r24, 0x35	; 53
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	25 e3       	ldi	r18, 0x35	; 53
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	f9 01       	movw	r30, r18
    2036:	20 81       	ld	r18, Z
    2038:	21 60       	ori	r18, 0x01	; 1
    203a:	fc 01       	movw	r30, r24
    203c:	20 83       	st	Z, r18
	
    203e:	aa 96       	adiw	r28, 0x2a	; 42
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	08 95       	ret

00002050 <_ZN4UTFTC1Ev>:

#define swap(type, i, j) {type t = i; i = j; j = t;}
#define fontbyte(x) pgm_read_byte(&cfont.font[x])  


UTFT::UTFT()
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	00 d0       	rcall	.+0      	; 0x2056 <_ZN4UTFTC1Ev+0x6>
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
{ 
disp_x_size=239;
    205e:	29 81       	ldd	r18, Y+1	; 0x01
    2060:	3a 81       	ldd	r19, Y+2	; 0x02
    2062:	8f ee       	ldi	r24, 0xEF	; 239
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e0       	ldi	r26, 0x00	; 0
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	f9 01       	movw	r30, r18
    206c:	85 83       	std	Z+5, r24	; 0x05
    206e:	96 83       	std	Z+6, r25	; 0x06
    2070:	a7 83       	std	Z+7, r26	; 0x07
    2072:	b0 87       	std	Z+8, r27	; 0x08
disp_y_size=319;
    2074:	29 81       	ldd	r18, Y+1	; 0x01
    2076:	3a 81       	ldd	r19, Y+2	; 0x02
    2078:	8f e3       	ldi	r24, 0x3F	; 63
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	a0 e0       	ldi	r26, 0x00	; 0
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	f9 01       	movw	r30, r18
    2082:	81 87       	std	Z+9, r24	; 0x09
    2084:	92 87       	std	Z+10, r25	; 0x0a
    2086:	a3 87       	std	Z+11, r26	; 0x0b
    2088:	b4 87       	std	Z+12, r27	; 0x0c
SSD1289_init();	
    208a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <SSD1289_init>
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <_ZN4UTFT7InitLCDEh>:

void UTFT::InitLCD(byte orientation)
{
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	00 d0       	rcall	.+0      	; 0x209e <_ZN4UTFT7InitLCDEh+0x6>
    209e:	1f 92       	push	r1
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	6b 83       	std	Y+3, r22	; 0x03
	orient=orientation;
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	fc 01       	movw	r30, r24
    20b2:	24 83       	std	Z+4, r18	; 0x04
	setColor(255, 255, 255);
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	2f ef       	ldi	r18, 0xFF	; 255
    20ba:	4f ef       	ldi	r20, 0xFF	; 255
    20bc:	6f ef       	ldi	r22, 0xFF	; 255
    20be:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN4UTFT8setColorEhhh>
	setBackColor(0, 0, 0);
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN4UTFT12setBackColorEhhh>
	cfont.font=0;	
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	fc 01       	movw	r30, r24
    20d6:	16 86       	std	Z+14, r1	; 0x0e
    20d8:	15 86       	std	Z+13, r1	; 0x0d
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	08 95       	ret

000020e6 <_ZN4UTFT5setXYEjjjj>:

void UTFT::setXY(word x1, word y1, word x2, word y2)
{
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	60 97       	sbiw	r28, 0x10	; 16
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	98 87       	std	Y+8, r25	; 0x08
    2100:	8f 83       	std	Y+7, r24	; 0x07
    2102:	7a 87       	std	Y+10, r23	; 0x0a
    2104:	69 87       	std	Y+9, r22	; 0x09
    2106:	5c 87       	std	Y+12, r21	; 0x0c
    2108:	4b 87       	std	Y+11, r20	; 0x0b
    210a:	3e 87       	std	Y+14, r19	; 0x0e
    210c:	2d 87       	std	Y+13, r18	; 0x0d
    210e:	18 8b       	std	Y+16, r17	; 0x10
    2110:	0f 87       	std	Y+15, r16	; 0x0f
	if (orient==LANDSCAPE)
    2112:	8f 81       	ldd	r24, Y+7	; 0x07
    2114:	98 85       	ldd	r25, Y+8	; 0x08
    2116:	fc 01       	movw	r30, r24
    2118:	84 81       	ldd	r24, Z+4	; 0x04
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	09 f0       	breq	.+2      	; 0x2120 <_ZN4UTFT5setXYEjjjj+0x3a>
    211e:	44 c0       	rjmp	.+136    	; 0x21a8 <_ZN4UTFT5setXYEjjjj+0xc2>
	{
		swap(word, x1, y1);
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	8b 85       	ldd	r24, Y+11	; 0x0b
    212a:	9c 85       	ldd	r25, Y+12	; 0x0c
    212c:	9a 87       	std	Y+10, r25	; 0x0a
    212e:	89 87       	std	Y+9, r24	; 0x09
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	8b 87       	std	Y+11, r24	; 0x0b
		swap(word, x2, y2)
    2138:	8d 85       	ldd	r24, Y+13	; 0x0d
    213a:	9e 85       	ldd	r25, Y+14	; 0x0e
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	8f 85       	ldd	r24, Y+15	; 0x0f
    2142:	98 89       	ldd	r25, Y+16	; 0x10
    2144:	9e 87       	std	Y+14, r25	; 0x0e
    2146:	8d 87       	std	Y+13, r24	; 0x0d
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	98 8b       	std	Y+16, r25	; 0x10
    214e:	8f 87       	std	Y+15, r24	; 0x0f
		y1=disp_y_size-y1;
    2150:	8f 81       	ldd	r24, Y+7	; 0x07
    2152:	98 85       	ldd	r25, Y+8	; 0x08
    2154:	fc 01       	movw	r30, r24
    2156:	81 85       	ldd	r24, Z+9	; 0x09
    2158:	92 85       	ldd	r25, Z+10	; 0x0a
    215a:	a3 85       	ldd	r26, Z+11	; 0x0b
    215c:	b4 85       	ldd	r27, Z+12	; 0x0c
    215e:	9c 01       	movw	r18, r24
    2160:	8b 85       	ldd	r24, Y+11	; 0x0b
    2162:	9c 85       	ldd	r25, Y+12	; 0x0c
    2164:	a9 01       	movw	r20, r18
    2166:	48 1b       	sub	r20, r24
    2168:	59 0b       	sbc	r21, r25
    216a:	ca 01       	movw	r24, r20
    216c:	9c 87       	std	Y+12, r25	; 0x0c
    216e:	8b 87       	std	Y+11, r24	; 0x0b
		y2=disp_y_size-y2;
    2170:	8f 81       	ldd	r24, Y+7	; 0x07
    2172:	98 85       	ldd	r25, Y+8	; 0x08
    2174:	fc 01       	movw	r30, r24
    2176:	81 85       	ldd	r24, Z+9	; 0x09
    2178:	92 85       	ldd	r25, Z+10	; 0x0a
    217a:	a3 85       	ldd	r26, Z+11	; 0x0b
    217c:	b4 85       	ldd	r27, Z+12	; 0x0c
    217e:	9c 01       	movw	r18, r24
    2180:	8f 85       	ldd	r24, Y+15	; 0x0f
    2182:	98 89       	ldd	r25, Y+16	; 0x10
    2184:	a9 01       	movw	r20, r18
    2186:	48 1b       	sub	r20, r24
    2188:	59 0b       	sbc	r21, r25
    218a:	ca 01       	movw	r24, r20
    218c:	98 8b       	std	Y+16, r25	; 0x10
    218e:	8f 87       	std	Y+15, r24	; 0x0f
		swap(word, y1, y2)
    2190:	8b 85       	ldd	r24, Y+11	; 0x0b
    2192:	9c 85       	ldd	r25, Y+12	; 0x0c
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	8f 85       	ldd	r24, Y+15	; 0x0f
    219a:	98 89       	ldd	r25, Y+16	; 0x10
    219c:	9c 87       	std	Y+12, r25	; 0x0c
    219e:	8b 87       	std	Y+11, r24	; 0x0b
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	98 8b       	std	Y+16, r25	; 0x10
    21a6:	8f 87       	std	Y+15, r24	; 0x0f
	}

	SSD1289_setXY(x1,y1,x2,y2,x1,y1);
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	38 2f       	mov	r19, r24
    21ae:	22 27       	eor	r18, r18
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	82 0f       	add	r24, r18
    21b6:	93 1f       	adc	r25, r19
    21b8:	bc 01       	movw	r22, r24
    21ba:	84 e4       	ldi	r24, 0x44	; 68
    21bc:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    21c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21c4:	bc 01       	movw	r22, r24
    21c6:	85 e4       	ldi	r24, 0x45	; 69
    21c8:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	98 89       	ldd	r25, Y+16	; 0x10
    21d0:	bc 01       	movw	r22, r24
    21d2:	86 e4       	ldi	r24, 0x46	; 70
    21d4:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	bc 01       	movw	r22, r24
    21de:	8e e4       	ldi	r24, 0x4E	; 78
    21e0:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    21e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21e8:	bc 01       	movw	r22, r24
    21ea:	8f e4       	ldi	r24, 0x4F	; 79
    21ec:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	SSD1289_dataFollows();
    21f0:	82 e2       	ldi	r24, 0x22	; 34
    21f2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <LCD_Write_COM>
    21f6:	85 e3       	ldi	r24, 0x35	; 53
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	25 e3       	ldi	r18, 0x35	; 53
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	f9 01       	movw	r30, r18
    2200:	20 81       	ld	r18, Z
    2202:	20 68       	ori	r18, 0x80	; 128
    2204:	fc 01       	movw	r30, r24
    2206:	20 83       	st	Z, r18
}
    2208:	60 96       	adiw	r28, 0x10	; 16
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	08 95       	ret

0000221e <_ZN4UTFT8fillRectEiiii>:
		drawVLine(x2, y1+2, y2-y1-4);
	}
}

void UTFT::fillRect(int x1, int y1, int x2, int y2)
{
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	2e 97       	sbiw	r28, 0x0e	; 14
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	78 87       	std	Y+8, r23	; 0x08
    223c:	6f 83       	std	Y+7, r22	; 0x07
    223e:	5a 87       	std	Y+10, r21	; 0x0a
    2240:	49 87       	std	Y+9, r20	; 0x09
    2242:	3c 87       	std	Y+12, r19	; 0x0c
    2244:	2b 87       	std	Y+11, r18	; 0x0b
    2246:	1e 87       	std	Y+14, r17	; 0x0e
    2248:	0d 87       	std	Y+13, r16	; 0x0d
	if (x1>x2)
    224a:	2f 81       	ldd	r18, Y+7	; 0x07
    224c:	38 85       	ldd	r19, Y+8	; 0x08
    224e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2250:	9c 85       	ldd	r25, Y+12	; 0x0c
    2252:	82 17       	cp	r24, r18
    2254:	93 07       	cpc	r25, r19
    2256:	64 f4       	brge	.+24     	; 0x2270 <_ZN4UTFT8fillRectEiiii+0x52>
	{
		swap(int, x1, x2);
    2258:	8f 81       	ldd	r24, Y+7	; 0x07
    225a:	98 85       	ldd	r25, Y+8	; 0x08
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	8b 85       	ldd	r24, Y+11	; 0x0b
    2262:	9c 85       	ldd	r25, Y+12	; 0x0c
    2264:	98 87       	std	Y+8, r25	; 0x08
    2266:	8f 83       	std	Y+7, r24	; 0x07
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	9c 87       	std	Y+12, r25	; 0x0c
    226e:	8b 87       	std	Y+11, r24	; 0x0b
	}
	if (y1>y2)
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	8d 85       	ldd	r24, Y+13	; 0x0d
    2276:	9e 85       	ldd	r25, Y+14	; 0x0e
    2278:	82 17       	cp	r24, r18
    227a:	93 07       	cpc	r25, r19
    227c:	64 f4       	brge	.+24     	; 0x2296 <_ZN4UTFT8fillRectEiiii+0x78>
	{
		swap(int, y1, y2);
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	9c 83       	std	Y+4, r25	; 0x04
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	9a 87       	std	Y+10, r25	; 0x0a
    228c:	89 87       	std	Y+9, r24	; 0x09
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	9e 87       	std	Y+14, r25	; 0x0e
    2294:	8d 87       	std	Y+13, r24	; 0x0d
	}

	cbi(CS_PORT, CS_PIN);
    2296:	85 e3       	ldi	r24, 0x35	; 53
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	25 e3       	ldi	r18, 0x35	; 53
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	f9 01       	movw	r30, r18
    22a0:	20 81       	ld	r18, Z
    22a2:	2e 7f       	andi	r18, 0xFE	; 254
    22a4:	fc 01       	movw	r30, r24
    22a6:	20 83       	st	Z, r18
	setXY(x1, y1, x2, y2);
    22a8:	ed 85       	ldd	r30, Y+13	; 0x0d
    22aa:	fe 85       	ldd	r31, Y+14	; 0x0e
    22ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    22ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    22b0:	49 85       	ldd	r20, Y+9	; 0x09
    22b2:	5a 85       	ldd	r21, Y+10	; 0x0a
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	8f 01       	movw	r16, r30
    22be:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN4UTFT5setXYEjjjj>

	_fast_fill_16(fch,fcl,((long(x2-x1)+1)*(long(y2-y1)+1)));
    22c2:	8b e3       	ldi	r24, 0x3B	; 59
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	2d 81       	ldd	r18, Y+5	; 0x05
    22c8:	3e 81       	ldd	r19, Y+6	; 0x06
    22ca:	f9 01       	movw	r30, r18
    22cc:	20 81       	ld	r18, Z
    22ce:	fc 01       	movw	r30, r24
    22d0:	20 83       	st	Z, r18
    22d2:	82 e3       	ldi	r24, 0x32	; 50
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	2d 81       	ldd	r18, Y+5	; 0x05
    22d8:	3e 81       	ldd	r19, Y+6	; 0x06
    22da:	f9 01       	movw	r30, r18
    22dc:	21 81       	ldd	r18, Z+1	; 0x01
    22de:	fc 01       	movw	r30, r24
    22e0:	20 83       	st	Z, r18
    22e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    22e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    22e6:	8f 81       	ldd	r24, Y+7	; 0x07
    22e8:	98 85       	ldd	r25, Y+8	; 0x08
    22ea:	a9 01       	movw	r20, r18
    22ec:	48 1b       	sub	r20, r24
    22ee:	59 0b       	sbc	r21, r25
    22f0:	ca 01       	movw	r24, r20
    22f2:	09 2e       	mov	r0, r25
    22f4:	00 0c       	add	r0, r0
    22f6:	aa 0b       	sbc	r26, r26
    22f8:	bb 0b       	sbc	r27, r27
    22fa:	9c 01       	movw	r18, r24
    22fc:	ad 01       	movw	r20, r26
    22fe:	2f 5f       	subi	r18, 0xFF	; 255
    2300:	3f 4f       	sbci	r19, 0xFF	; 255
    2302:	4f 4f       	sbci	r20, 0xFF	; 255
    2304:	5f 4f       	sbci	r21, 0xFF	; 255
    2306:	6d 85       	ldd	r22, Y+13	; 0x0d
    2308:	7e 85       	ldd	r23, Y+14	; 0x0e
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	fb 01       	movw	r30, r22
    2310:	e8 1b       	sub	r30, r24
    2312:	f9 0b       	sbc	r31, r25
    2314:	cf 01       	movw	r24, r30
    2316:	09 2e       	mov	r0, r25
    2318:	00 0c       	add	r0, r0
    231a:	aa 0b       	sbc	r26, r26
    231c:	bb 0b       	sbc	r27, r27
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	a1 1d       	adc	r26, r1
    2322:	b1 1d       	adc	r27, r1
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__mulsi3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 e5 06 	call	0xdca	; 0xdca <fastfill>
    2338:	82 e3       	ldi	r24, 0x32	; 50
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	2f ef       	ldi	r18, 0xFF	; 255
    233e:	fc 01       	movw	r30, r24
    2340:	20 83       	st	Z, r18
    2342:	8b e3       	ldi	r24, 0x3B	; 59
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	2f ef       	ldi	r18, 0xFF	; 255
    2348:	fc 01       	movw	r30, r24
    234a:	20 83       	st	Z, r18

	cbi(CS_PORT, CS_PIN);
    234c:	85 e3       	ldi	r24, 0x35	; 53
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	25 e3       	ldi	r18, 0x35	; 53
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	f9 01       	movw	r30, r18
    2356:	20 81       	ld	r18, Z
    2358:	2e 7f       	andi	r18, 0xFE	; 254
    235a:	fc 01       	movw	r30, r24
    235c:	20 83       	st	Z, r18
	
}
    235e:	2e 96       	adiw	r28, 0x0e	; 14
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	08 95       	ret

00002374 <_ZN4UTFT6clrScrEv>:
				break;
			}
}

void UTFT::clrScr()
{
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	00 d0       	rcall	.+0      	; 0x237a <_ZN4UTFT6clrScrEv+0x6>
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
		
	cbi(CS_PORT, CS_PIN);
    2382:	85 e3       	ldi	r24, 0x35	; 53
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	25 e3       	ldi	r18, 0x35	; 53
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	20 81       	ld	r18, Z
    238e:	2e 7f       	andi	r18, 0xFE	; 254
    2390:	fc 01       	movw	r30, r24
    2392:	20 83       	st	Z, r18


	SSD1289_setXY(0,0, 239, 319, 0, 0);
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	7f ee       	ldi	r23, 0xEF	; 239
    2398:	84 e4       	ldi	r24, 0x44	; 68
    239a:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	70 e0       	ldi	r23, 0x00	; 0
    23a2:	85 e4       	ldi	r24, 0x45	; 69
    23a4:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    23a8:	6f e3       	ldi	r22, 0x3F	; 63
    23aa:	71 e0       	ldi	r23, 0x01	; 1
    23ac:	86 e4       	ldi	r24, 0x46	; 70
    23ae:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	8e e4       	ldi	r24, 0x4E	; 78
    23b8:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	8f e4       	ldi	r24, 0x4F	; 79
    23c2:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	SSD1289_reg11(0x6040 |ID1|ID0|AM);
    23c6:	68 e7       	ldi	r22, 0x78	; 120
    23c8:	70 e6       	ldi	r23, 0x60	; 96
    23ca:	81 e1       	ldi	r24, 0x11	; 17
    23cc:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
	SSD1289_dataFollows();
    23d0:	82 e2       	ldi	r24, 0x22	; 34
    23d2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <LCD_Write_COM>
    23d6:	85 e3       	ldi	r24, 0x35	; 53
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	25 e3       	ldi	r18, 0x35	; 53
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	f9 01       	movw	r30, r18
    23e0:	20 81       	ld	r18, Z
    23e2:	20 68       	ori	r18, 0x80	; 128
    23e4:	fc 01       	movw	r30, r24
    23e6:	20 83       	st	Z, r18

	DATA_PORT_LOW = 0x00;
    23e8:	82 e3       	ldi	r24, 0x32	; 50
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	fc 01       	movw	r30, r24
    23ee:	10 82       	st	Z, r1
	DATA_PORT_HIGH = 0;
    23f0:	8b e3       	ldi	r24, 0x3B	; 59
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	fc 01       	movw	r30, r24
    23f6:	10 82       	st	Z, r1
	fastfill((uint32_t)76800);
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	7c e2       	ldi	r23, 0x2C	; 44
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 e5 06 	call	0xdca	; 0xdca <fastfill>
	DATA_PORT_LOW = 0xff;
    2404:	82 e3       	ldi	r24, 0x32	; 50
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	2f ef       	ldi	r18, 0xFF	; 255
    240a:	fc 01       	movw	r30, r24
    240c:	20 83       	st	Z, r18
	DATA_PORT_HIGH = 0xff;
    240e:	8b e3       	ldi	r24, 0x3B	; 59
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	2f ef       	ldi	r18, 0xFF	; 255
    2414:	fc 01       	movw	r30, r24
    2416:	20 83       	st	Z, r18

	cbi(CS_PORT, CS_PIN);
    2418:	85 e3       	ldi	r24, 0x35	; 53
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	25 e3       	ldi	r18, 0x35	; 53
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	f9 01       	movw	r30, r18
    2422:	20 81       	ld	r18, Z
    2424:	2e 7f       	andi	r18, 0xFE	; 254
    2426:	fc 01       	movw	r30, r24
    2428:	20 83       	st	Z, r18
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	08 95       	ret

00002434 <_ZN4UTFT8setColorEhhh>:
	
	sbi(CS_PORT, CS_PIN);
}

void UTFT::setColor(byte r, byte g, byte b)
{
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	00 d0       	rcall	.+0      	; 0x243a <_ZN4UTFT8setColorEhhh+0x6>
    243a:	00 d0       	rcall	.+0      	; 0x243c <_ZN4UTFT8setColorEhhh+0x8>
    243c:	1f 92       	push	r1
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	6b 83       	std	Y+3, r22	; 0x03
    2448:	4c 83       	std	Y+4, r20	; 0x04
    244a:	2d 83       	std	Y+5, r18	; 0x05
	fch=((r&248)|g>>5);
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	28 2f       	mov	r18, r24
    2450:	28 7f       	andi	r18, 0xF8	; 248
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	95 95       	asr	r25
    245a:	87 95       	ror	r24
    245c:	95 95       	asr	r25
    245e:	87 95       	ror	r24
    2460:	95 95       	asr	r25
    2462:	87 95       	ror	r24
    2464:	95 95       	asr	r25
    2466:	87 95       	ror	r24
    2468:	95 95       	asr	r25
    246a:	87 95       	ror	r24
    246c:	82 2b       	or	r24, r18
    246e:	28 2f       	mov	r18, r24
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	fc 01       	movw	r30, r24
    2476:	20 83       	st	Z, r18
	fcl=((g&28)<<3|b>>3);
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	8c 71       	andi	r24, 0x1C	; 28
    2480:	99 27       	eor	r25, r25
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	28 2f       	mov	r18, r24
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	95 95       	asr	r25
    2498:	87 95       	ror	r24
    249a:	95 95       	asr	r25
    249c:	87 95       	ror	r24
    249e:	95 95       	asr	r25
    24a0:	87 95       	ror	r24
    24a2:	82 2b       	or	r24, r18
    24a4:	28 2f       	mov	r18, r24
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	fc 01       	movw	r30, r24
    24ac:	21 83       	std	Z+1, r18	; 0x01
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	08 95       	ret

000024be <_ZN4UTFT12setBackColorEhhh>:
{
	return (fch<<8) | fcl;
}

void UTFT::setBackColor(byte r, byte g, byte b)
{
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <_ZN4UTFT12setBackColorEhhh+0x6>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <_ZN4UTFT12setBackColorEhhh+0x8>
    24c6:	1f 92       	push	r1
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	6b 83       	std	Y+3, r22	; 0x03
    24d2:	4c 83       	std	Y+4, r20	; 0x04
    24d4:	2d 83       	std	Y+5, r18	; 0x05
	bch=((r&248)|g>>5);
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	28 2f       	mov	r18, r24
    24da:	28 7f       	andi	r18, 0xF8	; 248
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	95 95       	asr	r25
    24e4:	87 95       	ror	r24
    24e6:	95 95       	asr	r25
    24e8:	87 95       	ror	r24
    24ea:	95 95       	asr	r25
    24ec:	87 95       	ror	r24
    24ee:	95 95       	asr	r25
    24f0:	87 95       	ror	r24
    24f2:	95 95       	asr	r25
    24f4:	87 95       	ror	r24
    24f6:	82 2b       	or	r24, r18
    24f8:	28 2f       	mov	r18, r24
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	9a 81       	ldd	r25, Y+2	; 0x02
    24fe:	fc 01       	movw	r30, r24
    2500:	22 83       	std	Z+2, r18	; 0x02
	bcl=((g&28)<<3|b>>3);
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	8c 71       	andi	r24, 0x1C	; 28
    250a:	99 27       	eor	r25, r25
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	28 2f       	mov	r18, r24
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	95 95       	asr	r25
    2522:	87 95       	ror	r24
    2524:	95 95       	asr	r25
    2526:	87 95       	ror	r24
    2528:	95 95       	asr	r25
    252a:	87 95       	ror	r24
    252c:	82 2b       	or	r24, r18
    252e:	28 2f       	mov	r18, r24
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
    2534:	fc 01       	movw	r30, r24
    2536:	23 83       	std	Z+3, r18	; 0x03
}
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <_ZN4UTFT8setPixelEj>:
{
	return (bch<<8) | bcl;
}

void UTFT::setPixel(word color)
{
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	00 d0       	rcall	.+0      	; 0x254e <_ZN4UTFT8setPixelEj+0x6>
    254e:	00 d0       	rcall	.+0      	; 0x2550 <_ZN4UTFT8setPixelEj+0x8>
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	7c 83       	std	Y+4, r23	; 0x04
    255a:	6b 83       	std	Y+3, r22	; 0x03
	LCD_Write_DATA((color>>8),(color&0xFF));	// rrrrrggggggbbbbb
    255c:	2b 81       	ldd	r18, Y+3	; 0x03
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	9c 81       	ldd	r25, Y+4	; 0x04
    2562:	89 2f       	mov	r24, r25
    2564:	99 27       	eor	r25, r25
    2566:	62 2f       	mov	r22, r18
    2568:	0e 94 35 07 	call	0xe6a	; 0xe6a <LCD_Write_DATA>
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <_ZN4UTFT9printCharEhii>:

}


void UTFT::printChar(byte c, int x, int y)
{
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	a1 97       	sbiw	r28, 0x21	; 33
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	9a 8f       	std	Y+26, r25	; 0x1a
    2590:	89 8f       	std	Y+25, r24	; 0x19
    2592:	6b 8f       	std	Y+27, r22	; 0x1b
    2594:	5d 8f       	std	Y+29, r21	; 0x1d
    2596:	4c 8f       	std	Y+28, r20	; 0x1c
    2598:	3f 8f       	std	Y+31, r19	; 0x1f
    259a:	2e 8f       	std	Y+30, r18	; 0x1e

	word temp;

	cbi(CS_PORT, CS_PIN);
    259c:	85 e3       	ldi	r24, 0x35	; 53
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	25 e3       	ldi	r18, 0x35	; 53
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	f9 01       	movw	r30, r18
    25a6:	20 81       	ld	r18, Z
    25a8:	2e 7f       	andi	r18, 0xFE	; 254
    25aa:	fc 01       	movw	r30, r24
    25ac:	20 83       	st	Z, r18
	
	if (orient==PORTRAIT)
    25ae:	89 8d       	ldd	r24, Y+25	; 0x19
    25b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25b2:	fc 01       	movw	r30, r24
    25b4:	84 81       	ldd	r24, Z+4	; 0x04
    25b6:	88 23       	and	r24, r24
    25b8:	09 f0       	breq	.+2      	; 0x25bc <_ZN4UTFT9printCharEhii+0x42>
    25ba:	d4 c0       	rjmp	.+424    	; 0x2764 <_ZN4UTFT9printCharEhii+0x1ea>
	{
		
		temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
    25bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	89 8d       	ldd	r24, Y+25	; 0x19
    25c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25c6:	fc 01       	movw	r30, r24
    25c8:	81 89       	ldd	r24, Z+17	; 0x11
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	a9 01       	movw	r20, r18
    25d0:	48 1b       	sub	r20, r24
    25d2:	59 0b       	sbc	r21, r25
    25d4:	89 8d       	ldd	r24, Y+25	; 0x19
    25d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25d8:	fc 01       	movw	r30, r24
    25da:	87 85       	ldd	r24, Z+15	; 0x0f
    25dc:	86 95       	lsr	r24
    25de:	86 95       	lsr	r24
    25e0:	86 95       	lsr	r24
    25e2:	68 2f       	mov	r22, r24
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	89 8d       	ldd	r24, Y+25	; 0x19
    25e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25ea:	fc 01       	movw	r30, r24
    25ec:	80 89       	ldd	r24, Z+16	; 0x10
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	68 9f       	mul	r22, r24
    25f4:	90 01       	movw	r18, r0
    25f6:	69 9f       	mul	r22, r25
    25f8:	30 0d       	add	r19, r0
    25fa:	78 9f       	mul	r23, r24
    25fc:	30 0d       	add	r19, r0
    25fe:	11 24       	eor	r1, r1
    2600:	42 9f       	mul	r20, r18
    2602:	c0 01       	movw	r24, r0
    2604:	43 9f       	mul	r20, r19
    2606:	90 0d       	add	r25, r0
    2608:	52 9f       	mul	r21, r18
    260a:	90 0d       	add	r25, r0
    260c:	11 24       	eor	r1, r1
    260e:	04 96       	adiw	r24, 0x04	; 4
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01

		uint16_t x1 = x;
    2614:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2616:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t x2 = x + cfont.x_size -1;
    261c:	89 8d       	ldd	r24, Y+25	; 0x19
    261e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2620:	fc 01       	movw	r30, r24
    2622:	87 85       	ldd	r24, Z+15	; 0x0f
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8c 8d       	ldd	r24, Y+28	; 0x1c
    262a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    262c:	82 0f       	add	r24, r18
    262e:	93 1f       	adc	r25, r19
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
		uint16_t y1 = y;
    2636:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2638:	9f 8d       	ldd	r25, Y+31	; 0x1f
    263a:	98 87       	std	Y+8, r25	; 0x08
    263c:	8f 83       	std	Y+7, r24	; 0x07
		uint16_t y2 = y+cfont.y_size-1;
    263e:	89 8d       	ldd	r24, Y+25	; 0x19
    2640:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2642:	fc 01       	movw	r30, r24
    2644:	80 89       	ldd	r24, Z+16	; 0x10
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    264c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    264e:	82 0f       	add	r24, r18
    2650:	93 1f       	adc	r25, r19
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	9a 87       	std	Y+10, r25	; 0x0a
    2656:	89 87       	std	Y+9, r24	; 0x09
		

		SSD1289_setXY(x1,y1, x2, y2, x1, y1);
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	38 2f       	mov	r19, r24
    265e:	22 27       	eor	r18, r18
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	82 0f       	add	r24, r18
    2666:	93 1f       	adc	r25, r19
    2668:	bc 01       	movw	r22, r24
    266a:	84 e4       	ldi	r24, 0x44	; 68
    266c:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    2670:	8f 81       	ldd	r24, Y+7	; 0x07
    2672:	98 85       	ldd	r25, Y+8	; 0x08
    2674:	bc 01       	movw	r22, r24
    2676:	85 e4       	ldi	r24, 0x45	; 69
    2678:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2680:	bc 01       	movw	r22, r24
    2682:	86 e4       	ldi	r24, 0x46	; 70
    2684:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	bc 01       	movw	r22, r24
    268e:	8e e4       	ldi	r24, 0x4E	; 78
    2690:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    2694:	8f 81       	ldd	r24, Y+7	; 0x07
    2696:	98 85       	ldd	r25, Y+8	; 0x08
    2698:	bc 01       	movw	r22, r24
    269a:	8f e4       	ldi	r24, 0x4F	; 79
    269c:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
		SSD1289_reg11(0x6040 |ID0|ID1);
    26a0:	60 e7       	ldi	r22, 0x70	; 112
    26a2:	70 e6       	ldi	r23, 0x60	; 96
    26a4:	81 e1       	ldi	r24, 0x11	; 17
    26a6:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
		SSD1289_dataFollows();		
    26aa:	82 e2       	ldi	r24, 0x22	; 34
    26ac:	0e 94 2e 07 	call	0xe5c	; 0xe5c <LCD_Write_COM>
    26b0:	85 e3       	ldi	r24, 0x35	; 53
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	25 e3       	ldi	r18, 0x35	; 53
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	f9 01       	movw	r30, r18
    26ba:	20 81       	ld	r18, Z
    26bc:	20 68       	ori	r18, 0x80	; 128
    26be:	fc 01       	movw	r30, r24
    26c0:	20 83       	st	Z, r18
		
		fastbitmap_1bit(cfont.y_size * cfont.x_size/8, (uint16_t)cfont.font + temp,(fch<<8)|fcl,(bch<<8)|bcl);
    26c2:	89 8d       	ldd	r24, Y+25	; 0x19
    26c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26c6:	fc 01       	movw	r30, r24
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	38 2f       	mov	r19, r24
    26d0:	22 27       	eor	r18, r18
    26d2:	89 8d       	ldd	r24, Y+25	; 0x19
    26d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26d6:	fc 01       	movw	r30, r24
    26d8:	83 81       	ldd	r24, Z+3	; 0x03
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	82 2b       	or	r24, r18
    26e0:	93 2b       	or	r25, r19
    26e2:	dc 01       	movw	r26, r24
    26e4:	89 8d       	ldd	r24, Y+25	; 0x19
    26e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26e8:	fc 01       	movw	r30, r24
    26ea:	80 81       	ld	r24, Z
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	38 2f       	mov	r19, r24
    26f2:	22 27       	eor	r18, r18
    26f4:	89 8d       	ldd	r24, Y+25	; 0x19
    26f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26f8:	fc 01       	movw	r30, r24
    26fa:	81 81       	ldd	r24, Z+1	; 0x01
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	82 2b       	or	r24, r18
    2702:	93 2b       	or	r25, r19
    2704:	99 a3       	std	Y+33, r25	; 0x21
    2706:	88 a3       	std	Y+32, r24	; 0x20
    2708:	89 8d       	ldd	r24, Y+25	; 0x19
    270a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    270c:	fc 01       	movw	r30, r24
    270e:	85 85       	ldd	r24, Z+13	; 0x0d
    2710:	96 85       	ldd	r25, Z+14	; 0x0e
    2712:	9c 01       	movw	r18, r24
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	b9 01       	movw	r22, r18
    271a:	68 0f       	add	r22, r24
    271c:	79 1f       	adc	r23, r25
    271e:	89 8d       	ldd	r24, Y+25	; 0x19
    2720:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2722:	fc 01       	movw	r30, r24
    2724:	80 89       	ldd	r24, Z+16	; 0x10
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	89 8d       	ldd	r24, Y+25	; 0x19
    272c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    272e:	fc 01       	movw	r30, r24
    2730:	87 85       	ldd	r24, Z+15	; 0x0f
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	28 9f       	mul	r18, r24
    2738:	a0 01       	movw	r20, r0
    273a:	29 9f       	mul	r18, r25
    273c:	50 0d       	add	r21, r0
    273e:	38 9f       	mul	r19, r24
    2740:	50 0d       	add	r21, r0
    2742:	11 24       	eor	r1, r1
    2744:	ca 01       	movw	r24, r20
    2746:	99 23       	and	r25, r25
    2748:	0c f4       	brge	.+2      	; 0x274c <_ZN4UTFT9printCharEhii+0x1d2>
    274a:	07 96       	adiw	r24, 0x07	; 7
    274c:	95 95       	asr	r25
    274e:	87 95       	ror	r24
    2750:	95 95       	asr	r25
    2752:	87 95       	ror	r24
    2754:	95 95       	asr	r25
    2756:	87 95       	ror	r24
    2758:	9d 01       	movw	r18, r26
    275a:	48 a1       	ldd	r20, Y+32	; 0x20
    275c:	59 a1       	ldd	r21, Y+33	; 0x21
    275e:	0e 94 56 06 	call	0xcac	; 0xcac <fastbitmap_1bit>
    2762:	17 c1       	rjmp	.+558    	; 0x2992 <_ZN4UTFT9printCharEhii+0x418>
	}
	else
	{
		temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
    2764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	89 8d       	ldd	r24, Y+25	; 0x19
    276c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    276e:	fc 01       	movw	r30, r24
    2770:	81 89       	ldd	r24, Z+17	; 0x11
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a9 01       	movw	r20, r18
    2778:	48 1b       	sub	r20, r24
    277a:	59 0b       	sbc	r21, r25
    277c:	89 8d       	ldd	r24, Y+25	; 0x19
    277e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2780:	fc 01       	movw	r30, r24
    2782:	87 85       	ldd	r24, Z+15	; 0x0f
    2784:	86 95       	lsr	r24
    2786:	86 95       	lsr	r24
    2788:	86 95       	lsr	r24
    278a:	68 2f       	mov	r22, r24
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	89 8d       	ldd	r24, Y+25	; 0x19
    2790:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2792:	fc 01       	movw	r30, r24
    2794:	80 89       	ldd	r24, Z+16	; 0x10
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	68 9f       	mul	r22, r24
    279c:	90 01       	movw	r18, r0
    279e:	69 9f       	mul	r22, r25
    27a0:	30 0d       	add	r19, r0
    27a2:	78 9f       	mul	r23, r24
    27a4:	30 0d       	add	r19, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	42 9f       	mul	r20, r18
    27aa:	c0 01       	movw	r24, r0
    27ac:	43 9f       	mul	r20, r19
    27ae:	90 0d       	add	r25, r0
    27b0:	52 9f       	mul	r21, r18
    27b2:	90 0d       	add	r25, r0
    27b4:	11 24       	eor	r1, r1
    27b6:	04 96       	adiw	r24, 0x04	; 4
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01

		uint16_t x1 = x;
    27bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27c0:	9c 87       	std	Y+12, r25	; 0x0c
    27c2:	8b 87       	std	Y+11, r24	; 0x0b
		uint16_t x2 = x + cfont.x_size -1;			
    27c4:	89 8d       	ldd	r24, Y+25	; 0x19
    27c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27c8:	fc 01       	movw	r30, r24
    27ca:	87 85       	ldd	r24, Z+15	; 0x0f
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27d4:	82 0f       	add	r24, r18
    27d6:	93 1f       	adc	r25, r19
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	9e 87       	std	Y+14, r25	; 0x0e
    27dc:	8d 87       	std	Y+13, r24	; 0x0d
		uint16_t y1 = y;
    27de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27e2:	98 8b       	std	Y+16, r25	; 0x10
    27e4:	8f 87       	std	Y+15, r24	; 0x0f
		uint16_t y2 = y+cfont.y_size-1;
    27e6:	89 8d       	ldd	r24, Y+25	; 0x19
    27e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27ea:	fc 01       	movw	r30, r24
    27ec:	80 89       	ldd	r24, Z+16	; 0x10
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27f6:	82 0f       	add	r24, r18
    27f8:	93 1f       	adc	r25, r19
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9a 8b       	std	Y+18, r25	; 0x12
    27fe:	89 8b       	std	Y+17, r24	; 0x11
			
			
		swap(uint16_t, x1, y1);
    2800:	8b 85       	ldd	r24, Y+11	; 0x0b
    2802:	9c 85       	ldd	r25, Y+12	; 0x0c
    2804:	9c 8b       	std	Y+20, r25	; 0x14
    2806:	8b 8b       	std	Y+19, r24	; 0x13
    2808:	8f 85       	ldd	r24, Y+15	; 0x0f
    280a:	98 89       	ldd	r25, Y+16	; 0x10
    280c:	9c 87       	std	Y+12, r25	; 0x0c
    280e:	8b 87       	std	Y+11, r24	; 0x0b
    2810:	8b 89       	ldd	r24, Y+19	; 0x13
    2812:	9c 89       	ldd	r25, Y+20	; 0x14
    2814:	98 8b       	std	Y+16, r25	; 0x10
    2816:	8f 87       	std	Y+15, r24	; 0x0f
		swap(uint16_t, x2, y2)
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	9e 8b       	std	Y+22, r25	; 0x16
    281e:	8d 8b       	std	Y+21, r24	; 0x15
    2820:	89 89       	ldd	r24, Y+17	; 0x11
    2822:	9a 89       	ldd	r25, Y+18	; 0x12
    2824:	9e 87       	std	Y+14, r25	; 0x0e
    2826:	8d 87       	std	Y+13, r24	; 0x0d
    2828:	8d 89       	ldd	r24, Y+21	; 0x15
    282a:	9e 89       	ldd	r25, Y+22	; 0x16
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
		y1=disp_y_size-y1;
    2830:	89 8d       	ldd	r24, Y+25	; 0x19
    2832:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2834:	fc 01       	movw	r30, r24
    2836:	81 85       	ldd	r24, Z+9	; 0x09
    2838:	92 85       	ldd	r25, Z+10	; 0x0a
    283a:	a3 85       	ldd	r26, Z+11	; 0x0b
    283c:	b4 85       	ldd	r27, Z+12	; 0x0c
    283e:	9c 01       	movw	r18, r24
    2840:	8f 85       	ldd	r24, Y+15	; 0x0f
    2842:	98 89       	ldd	r25, Y+16	; 0x10
    2844:	a9 01       	movw	r20, r18
    2846:	48 1b       	sub	r20, r24
    2848:	59 0b       	sbc	r21, r25
    284a:	ca 01       	movw	r24, r20
    284c:	98 8b       	std	Y+16, r25	; 0x10
    284e:	8f 87       	std	Y+15, r24	; 0x0f
		y2=disp_y_size-y2;
    2850:	89 8d       	ldd	r24, Y+25	; 0x19
    2852:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2854:	fc 01       	movw	r30, r24
    2856:	81 85       	ldd	r24, Z+9	; 0x09
    2858:	92 85       	ldd	r25, Z+10	; 0x0a
    285a:	a3 85       	ldd	r26, Z+11	; 0x0b
    285c:	b4 85       	ldd	r27, Z+12	; 0x0c
    285e:	9c 01       	movw	r18, r24
    2860:	89 89       	ldd	r24, Y+17	; 0x11
    2862:	9a 89       	ldd	r25, Y+18	; 0x12
    2864:	a9 01       	movw	r20, r18
    2866:	48 1b       	sub	r20, r24
    2868:	59 0b       	sbc	r21, r25
    286a:	ca 01       	movw	r24, r20
    286c:	9a 8b       	std	Y+18, r25	; 0x12
    286e:	89 8b       	std	Y+17, r24	; 0x11
		swap(uint16_t, y1, y2)			
    2870:	8f 85       	ldd	r24, Y+15	; 0x0f
    2872:	98 89       	ldd	r25, Y+16	; 0x10
    2874:	98 8f       	std	Y+24, r25	; 0x18
    2876:	8f 8b       	std	Y+23, r24	; 0x17
    2878:	89 89       	ldd	r24, Y+17	; 0x11
    287a:	9a 89       	ldd	r25, Y+18	; 0x12
    287c:	98 8b       	std	Y+16, r25	; 0x10
    287e:	8f 87       	std	Y+15, r24	; 0x0f
    2880:	8f 89       	ldd	r24, Y+23	; 0x17
    2882:	98 8d       	ldd	r25, Y+24	; 0x18
    2884:	9a 8b       	std	Y+18, r25	; 0x12
    2886:	89 8b       	std	Y+17, r24	; 0x11
			
		SSD1289_setXY(x1,y1, x2, y2, x1, y2);
    2888:	8d 85       	ldd	r24, Y+13	; 0x0d
    288a:	9e 85       	ldd	r25, Y+14	; 0x0e
    288c:	38 2f       	mov	r19, r24
    288e:	22 27       	eor	r18, r18
    2890:	8b 85       	ldd	r24, Y+11	; 0x0b
    2892:	9c 85       	ldd	r25, Y+12	; 0x0c
    2894:	82 0f       	add	r24, r18
    2896:	93 1f       	adc	r25, r19
    2898:	bc 01       	movw	r22, r24
    289a:	84 e4       	ldi	r24, 0x44	; 68
    289c:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    28a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a2:	98 89       	ldd	r25, Y+16	; 0x10
    28a4:	bc 01       	movw	r22, r24
    28a6:	85 e4       	ldi	r24, 0x45	; 69
    28a8:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    28ac:	89 89       	ldd	r24, Y+17	; 0x11
    28ae:	9a 89       	ldd	r25, Y+18	; 0x12
    28b0:	bc 01       	movw	r22, r24
    28b2:	86 e4       	ldi	r24, 0x46	; 70
    28b4:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    28b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    28bc:	bc 01       	movw	r22, r24
    28be:	8e e4       	ldi	r24, 0x4E	; 78
    28c0:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
    28c4:	89 89       	ldd	r24, Y+17	; 0x11
    28c6:	9a 89       	ldd	r25, Y+18	; 0x12
    28c8:	bc 01       	movw	r22, r24
    28ca:	8f e4       	ldi	r24, 0x4F	; 79
    28cc:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
		SSD1289_reg11(0x6040 |ID0|AM);
    28d0:	68 e5       	ldi	r22, 0x58	; 88
    28d2:	70 e6       	ldi	r23, 0x60	; 96
    28d4:	81 e1       	ldi	r24, 0x11	; 17
    28d6:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_Write_COM_DATA>
		SSD1289_dataFollows();			
    28da:	82 e2       	ldi	r24, 0x22	; 34
    28dc:	0e 94 2e 07 	call	0xe5c	; 0xe5c <LCD_Write_COM>
    28e0:	85 e3       	ldi	r24, 0x35	; 53
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	25 e3       	ldi	r18, 0x35	; 53
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	f9 01       	movw	r30, r18
    28ea:	20 81       	ld	r18, Z
    28ec:	20 68       	ori	r18, 0x80	; 128
    28ee:	fc 01       	movw	r30, r24
    28f0:	20 83       	st	Z, r18
					
		fastbitmap_1bit(cfont.y_size * cfont.x_size/8, (uint16_t)cfont.font + temp,(fch<<8)|fcl,(bch<<8)|bcl);
    28f2:	89 8d       	ldd	r24, Y+25	; 0x19
    28f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28f6:	fc 01       	movw	r30, r24
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	38 2f       	mov	r19, r24
    2900:	22 27       	eor	r18, r18
    2902:	89 8d       	ldd	r24, Y+25	; 0x19
    2904:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2906:	fc 01       	movw	r30, r24
    2908:	83 81       	ldd	r24, Z+3	; 0x03
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	82 2b       	or	r24, r18
    2910:	93 2b       	or	r25, r19
    2912:	dc 01       	movw	r26, r24
    2914:	89 8d       	ldd	r24, Y+25	; 0x19
    2916:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2918:	fc 01       	movw	r30, r24
    291a:	80 81       	ld	r24, Z
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	38 2f       	mov	r19, r24
    2922:	22 27       	eor	r18, r18
    2924:	89 8d       	ldd	r24, Y+25	; 0x19
    2926:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2928:	fc 01       	movw	r30, r24
    292a:	81 81       	ldd	r24, Z+1	; 0x01
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	82 2b       	or	r24, r18
    2932:	93 2b       	or	r25, r19
    2934:	99 a3       	std	Y+33, r25	; 0x21
    2936:	88 a3       	std	Y+32, r24	; 0x20
    2938:	89 8d       	ldd	r24, Y+25	; 0x19
    293a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    293c:	fc 01       	movw	r30, r24
    293e:	85 85       	ldd	r24, Z+13	; 0x0d
    2940:	96 85       	ldd	r25, Z+14	; 0x0e
    2942:	9c 01       	movw	r18, r24
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	b9 01       	movw	r22, r18
    294a:	68 0f       	add	r22, r24
    294c:	79 1f       	adc	r23, r25
    294e:	89 8d       	ldd	r24, Y+25	; 0x19
    2950:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2952:	fc 01       	movw	r30, r24
    2954:	80 89       	ldd	r24, Z+16	; 0x10
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	89 8d       	ldd	r24, Y+25	; 0x19
    295c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    295e:	fc 01       	movw	r30, r24
    2960:	87 85       	ldd	r24, Z+15	; 0x0f
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	28 9f       	mul	r18, r24
    2968:	a0 01       	movw	r20, r0
    296a:	29 9f       	mul	r18, r25
    296c:	50 0d       	add	r21, r0
    296e:	38 9f       	mul	r19, r24
    2970:	50 0d       	add	r21, r0
    2972:	11 24       	eor	r1, r1
    2974:	ca 01       	movw	r24, r20
    2976:	99 23       	and	r25, r25
    2978:	0c f4       	brge	.+2      	; 0x297c <_ZN4UTFT9printCharEhii+0x402>
    297a:	07 96       	adiw	r24, 0x07	; 7
    297c:	95 95       	asr	r25
    297e:	87 95       	ror	r24
    2980:	95 95       	asr	r25
    2982:	87 95       	ror	r24
    2984:	95 95       	asr	r25
    2986:	87 95       	ror	r24
    2988:	9d 01       	movw	r18, r26
    298a:	48 a1       	ldd	r20, Y+32	; 0x20
    298c:	59 a1       	ldd	r21, Y+33	; 0x21
    298e:	0e 94 56 06 	call	0xcac	; 0xcac <fastbitmap_1bit>

		
	}
	sbi(CS_PORT, CS_PIN);
    2992:	85 e3       	ldi	r24, 0x35	; 53
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	25 e3       	ldi	r18, 0x35	; 53
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	f9 01       	movw	r30, r18
    299c:	20 81       	ld	r18, Z
    299e:	21 60       	ori	r18, 0x01	; 1
    29a0:	fc 01       	movw	r30, r24
    29a2:	20 83       	st	Z, r18
	
}
    29a4:	a1 96       	adiw	r28, 0x21	; 33
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <_ZN4UTFT10rotateCharEhiiii>:

void UTFT::rotateChar(byte c, int x, int y, int pos, int deg)
{
    29b6:	4f 92       	push	r4
    29b8:	5f 92       	push	r5
    29ba:	6f 92       	push	r6
    29bc:	7f 92       	push	r7
    29be:	8f 92       	push	r8
    29c0:	9f 92       	push	r9
    29c2:	af 92       	push	r10
    29c4:	bf 92       	push	r11
    29c6:	cf 92       	push	r12
    29c8:	df 92       	push	r13
    29ca:	ef 92       	push	r14
    29cc:	ff 92       	push	r15
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	6d 97       	sbiw	r28, 0x1d	; 29
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	9c 8b       	std	Y+20, r25	; 0x14
    29e8:	8b 8b       	std	Y+19, r24	; 0x13
    29ea:	6d 8b       	std	Y+21, r22	; 0x15
    29ec:	5f 8b       	std	Y+23, r21	; 0x17
    29ee:	4e 8b       	std	Y+22, r20	; 0x16
    29f0:	39 8f       	std	Y+25, r19	; 0x19
    29f2:	28 8f       	std	Y+24, r18	; 0x18
    29f4:	1b 8f       	std	Y+27, r17	; 0x1b
    29f6:	0a 8f       	std	Y+26, r16	; 0x1a
    29f8:	fd 8e       	std	Y+29, r15	; 0x1d
    29fa:	ec 8e       	std	Y+28, r14	; 0x1c
	byte i,j,ch;
	word temp; 
	int newx,newy;
	double radian;
	radian=deg*0.0175;  
    29fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a00:	09 2e       	mov	r0, r25
    2a02:	00 0c       	add	r0, r0
    2a04:	aa 0b       	sbc	r26, r26
    2a06:	bb 0b       	sbc	r27, r27
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	29 e2       	ldi	r18, 0x29	; 41
    2a16:	3c e5       	ldi	r19, 0x5C	; 92
    2a18:	4f e8       	ldi	r20, 0x8F	; 143
    2a1a:	5c e3       	ldi	r21, 0x3C	; 60
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8f 83       	std	Y+7, r24	; 0x07
    2a2a:	98 87       	std	Y+8, r25	; 0x08
    2a2c:	a9 87       	std	Y+9, r26	; 0x09
    2a2e:	ba 87       	std	Y+10, r27	; 0x0a

	cbi(CS_PORT, CS_PIN);
    2a30:	85 e3       	ldi	r24, 0x35	; 53
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	25 e3       	ldi	r18, 0x35	; 53
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	f9 01       	movw	r30, r18
    2a3a:	20 81       	ld	r18, Z
    2a3c:	2e 7f       	andi	r18, 0xFE	; 254
    2a3e:	fc 01       	movw	r30, r24
    2a40:	20 83       	st	Z, r18

	temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
    2a42:	8d 89       	ldd	r24, Y+21	; 0x15
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	81 89       	ldd	r24, Z+17	; 0x11
    2a50:	88 2f       	mov	r24, r24
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a9 01       	movw	r20, r18
    2a56:	48 1b       	sub	r20, r24
    2a58:	59 0b       	sbc	r21, r25
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	fc 01       	movw	r30, r24
    2a60:	87 85       	ldd	r24, Z+15	; 0x0f
    2a62:	86 95       	lsr	r24
    2a64:	86 95       	lsr	r24
    2a66:	86 95       	lsr	r24
    2a68:	68 2f       	mov	r22, r24
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a70:	fc 01       	movw	r30, r24
    2a72:	80 89       	ldd	r24, Z+16	; 0x10
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	68 9f       	mul	r22, r24
    2a7a:	90 01       	movw	r18, r0
    2a7c:	69 9f       	mul	r22, r25
    2a7e:	30 0d       	add	r19, r0
    2a80:	78 9f       	mul	r23, r24
    2a82:	30 0d       	add	r19, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	42 9f       	mul	r20, r18
    2a88:	c0 01       	movw	r24, r0
    2a8a:	43 9f       	mul	r20, r19
    2a8c:	90 0d       	add	r25, r0
    2a8e:	52 9f       	mul	r21, r18
    2a90:	90 0d       	add	r25, r0
    2a92:	11 24       	eor	r1, r1
    2a94:	04 96       	adiw	r24, 0x04	; 4
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	8b 83       	std	Y+3, r24	; 0x03
	for(j=0;j<cfont.y_size;j++) 
    2a9a:	1a 82       	std	Y+2, r1	; 0x02
    2a9c:	99 c1       	rjmp	.+818    	; 0x2dd0 <_ZN4UTFT10rotateCharEhiiii+0x41a>
	{
		for (int zz=0; zz<(cfont.x_size/8); zz++)
    2a9e:	1e 82       	std	Y+6, r1	; 0x06
    2aa0:	1d 82       	std	Y+5, r1	; 0x05
    2aa2:	75 c1       	rjmp	.+746    	; 0x2d8e <_ZN4UTFT10rotateCharEhiiii+0x3d8>
		{
			ch=pgm_read_byte(&cfont.font[temp+zz]); 
    2aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	25 85       	ldd	r18, Z+13	; 0x0d
    2aac:	36 85       	ldd	r19, Z+14	; 0x0e
    2aae:	4d 81       	ldd	r20, Y+5	; 0x05
    2ab0:	5e 81       	ldd	r21, Y+6	; 0x06
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	84 0f       	add	r24, r20
    2ab8:	95 1f       	adc	r25, r21
    2aba:	82 0f       	add	r24, r18
    2abc:	93 1f       	adc	r25, r19
    2abe:	9c 87       	std	Y+12, r25	; 0x0c
    2ac0:	8b 87       	std	Y+11, r24	; 0x0b
    2ac2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ac4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	84 91       	lpm	r24, Z
    2aca:	8d 87       	std	Y+13, r24	; 0x0d
    2acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ace:	8e 87       	std	Y+14, r24	; 0x0e
			for(i=0;i<8;i++)
    2ad0:	19 82       	std	Y+1, r1	; 0x01
    2ad2:	54 c1       	rjmp	.+680    	; 0x2d7c <_ZN4UTFT10rotateCharEhiiii+0x3c6>
			{   
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
    2ad4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ad6:	9f 89       	ldd	r25, Y+23	; 0x17
    2ad8:	09 2e       	mov	r0, r25
    2ada:	00 0c       	add	r0, r0
    2adc:	aa 0b       	sbc	r26, r26
    2ade:	bb 0b       	sbc	r27, r27
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    2ae8:	6b 01       	movw	r12, r22
    2aea:	7c 01       	movw	r14, r24
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	28 0f       	add	r18, r24
    2b04:	39 1f       	adc	r19, r25
    2b06:	8b 89       	ldd	r24, Y+19	; 0x13
    2b08:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	87 85       	ldd	r24, Z+15	; 0x0f
    2b0e:	68 2f       	mov	r22, r24
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2b14:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2b16:	64 9f       	mul	r22, r20
    2b18:	c0 01       	movw	r24, r0
    2b1a:	65 9f       	mul	r22, r21
    2b1c:	90 0d       	add	r25, r0
    2b1e:	74 9f       	mul	r23, r20
    2b20:	90 0d       	add	r25, r0
    2b22:	11 24       	eor	r1, r1
    2b24:	82 0f       	add	r24, r18
    2b26:	93 1f       	adc	r25, r19
    2b28:	09 2e       	mov	r0, r25
    2b2a:	00 0c       	add	r0, r0
    2b2c:	aa 0b       	sbc	r26, r26
    2b2e:	bb 0b       	sbc	r27, r27
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    2b38:	4b 01       	movw	r8, r22
    2b3a:	5c 01       	movw	r10, r24
    2b3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b3e:	98 85       	ldd	r25, Y+8	; 0x08
    2b40:	a9 85       	ldd	r26, Y+9	; 0x09
    2b42:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <cos>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9c 01       	movw	r18, r24
    2b52:	ad 01       	movw	r20, r26
    2b54:	c5 01       	movw	r24, r10
    2b56:	b4 01       	movw	r22, r8
    2b58:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	4c 01       	movw	r8, r24
    2b62:	5d 01       	movw	r10, r26
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	09 2e       	mov	r0, r25
    2b6c:	00 0c       	add	r0, r0
    2b6e:	aa 0b       	sbc	r26, r26
    2b70:	bb 0b       	sbc	r27, r27
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    2b7a:	2b 01       	movw	r4, r22
    2b7c:	3c 01       	movw	r6, r24
    2b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b80:	98 85       	ldd	r25, Y+8	; 0x08
    2b82:	a9 85       	ldd	r26, Y+9	; 0x09
    2b84:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <sin>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9c 01       	movw	r18, r24
    2b94:	ad 01       	movw	r20, r26
    2b96:	c3 01       	movw	r24, r6
    2b98:	b2 01       	movw	r22, r4
    2b9a:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9c 01       	movw	r18, r24
    2ba4:	ad 01       	movw	r20, r26
    2ba6:	c5 01       	movw	r24, r10
    2ba8:	b4 01       	movw	r22, r8
    2baa:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__subsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9c 01       	movw	r18, r24
    2bb4:	ad 01       	movw	r20, r26
    2bb6:	c7 01       	movw	r24, r14
    2bb8:	b6 01       	movw	r22, r12
    2bba:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__addsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixsfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	98 8b       	std	Y+16, r25	; 0x10
    2bd0:	8f 87       	std	Y+15, r24	; 0x0f
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
    2bd2:	88 8d       	ldd	r24, Y+24	; 0x18
    2bd4:	99 8d       	ldd	r25, Y+25	; 0x19
    2bd6:	09 2e       	mov	r0, r25
    2bd8:	00 0c       	add	r0, r0
    2bda:	aa 0b       	sbc	r26, r26
    2bdc:	bb 0b       	sbc	r27, r27
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    2be6:	6b 01       	movw	r12, r22
    2be8:	7c 01       	movw	r14, r24
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	09 2e       	mov	r0, r25
    2bf2:	00 0c       	add	r0, r0
    2bf4:	aa 0b       	sbc	r26, r26
    2bf6:	bb 0b       	sbc	r27, r27
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    2c00:	4b 01       	movw	r8, r22
    2c02:	5c 01       	movw	r10, r24
    2c04:	8f 81       	ldd	r24, Y+7	; 0x07
    2c06:	98 85       	ldd	r25, Y+8	; 0x08
    2c08:	a9 85       	ldd	r26, Y+9	; 0x09
    2c0a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <cos>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9c 01       	movw	r18, r24
    2c1a:	ad 01       	movw	r20, r26
    2c1c:	c5 01       	movw	r24, r10
    2c1e:	b4 01       	movw	r22, r8
    2c20:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	4c 01       	movw	r8, r24
    2c2a:	5d 01       	movw	r10, r26
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	28 0f       	add	r18, r24
    2c44:	39 1f       	adc	r19, r25
    2c46:	8b 89       	ldd	r24, Y+19	; 0x13
    2c48:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	87 85       	ldd	r24, Z+15	; 0x0f
    2c4e:	68 2f       	mov	r22, r24
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2c54:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2c56:	64 9f       	mul	r22, r20
    2c58:	c0 01       	movw	r24, r0
    2c5a:	65 9f       	mul	r22, r21
    2c5c:	90 0d       	add	r25, r0
    2c5e:	74 9f       	mul	r23, r20
    2c60:	90 0d       	add	r25, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	82 0f       	add	r24, r18
    2c66:	93 1f       	adc	r25, r19
    2c68:	09 2e       	mov	r0, r25
    2c6a:	00 0c       	add	r0, r0
    2c6c:	aa 0b       	sbc	r26, r26
    2c6e:	bb 0b       	sbc	r27, r27
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__floatsisf>
    2c78:	2b 01       	movw	r4, r22
    2c7a:	3c 01       	movw	r6, r24
    2c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7e:	98 85       	ldd	r25, Y+8	; 0x08
    2c80:	a9 85       	ldd	r26, Y+9	; 0x09
    2c82:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <sin>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9c 01       	movw	r18, r24
    2c92:	ad 01       	movw	r20, r26
    2c94:	c3 01       	movw	r24, r6
    2c96:	b2 01       	movw	r22, r4
    2c98:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9c 01       	movw	r18, r24
    2ca2:	ad 01       	movw	r20, r26
    2ca4:	c5 01       	movw	r24, r10
    2ca6:	b4 01       	movw	r22, r8
    2ca8:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__addsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9c 01       	movw	r18, r24
    2cb2:	ad 01       	movw	r20, r26
    2cb4:	c7 01       	movw	r24, r14
    2cb6:	b6 01       	movw	r22, r12
    2cb8:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__addsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixsfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9a 8b       	std	Y+18, r25	; 0x12
    2cce:	89 8b       	std	Y+17, r24	; 0x11

				setXY(newx,newy,newx+1,newy+1);
    2cd0:	89 89       	ldd	r24, Y+17	; 0x11
    2cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd4:	01 96       	adiw	r24, 0x01	; 1
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cda:	98 89       	ldd	r25, Y+16	; 0x10
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	9c 01       	movw	r18, r24
    2ce0:	49 89       	ldd	r20, Y+17	; 0x11
    2ce2:	5a 89       	ldd	r21, Y+18	; 0x12
    2ce4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ce6:	78 89       	ldd	r23, Y+16	; 0x10
    2ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cea:	9c 89       	ldd	r25, Y+20	; 0x14
    2cec:	8f 01       	movw	r16, r30
    2cee:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN4UTFT5setXYEjjjj>
				
				if((ch&(1<<(7-i)))!=0)   
    2cf2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf4:	88 2f       	mov	r24, r24
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	29 81       	ldd	r18, Y+1	; 0x01
    2cfa:	22 2f       	mov	r18, r18
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	47 e0       	ldi	r20, 0x07	; 7
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	ba 01       	movw	r22, r20
    2d04:	62 1b       	sub	r22, r18
    2d06:	73 0b       	sbc	r23, r19
    2d08:	9b 01       	movw	r18, r22
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <_ZN4UTFT10rotateCharEhiiii+0x35a>
    2d0c:	95 95       	asr	r25
    2d0e:	87 95       	ror	r24
    2d10:	2a 95       	dec	r18
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <_ZN4UTFT10rotateCharEhiiii+0x356>
    2d14:	81 70       	andi	r24, 0x01	; 1
    2d16:	99 27       	eor	r25, r25
    2d18:	89 2b       	or	r24, r25
    2d1a:	b9 f0       	breq	.+46     	; 0x2d4a <_ZN4UTFT10rotateCharEhiiii+0x394>
				{
					setPixel((fch<<8)|fcl);
    2d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d20:	fc 01       	movw	r30, r24
    2d22:	80 81       	ld	r24, Z
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	38 2f       	mov	r19, r24
    2d2a:	22 27       	eor	r18, r18
    2d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d30:	fc 01       	movw	r30, r24
    2d32:	81 81       	ldd	r24, Z+1	; 0x01
    2d34:	88 2f       	mov	r24, r24
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	82 2b       	or	r24, r18
    2d3a:	93 2b       	or	r25, r19
    2d3c:	9c 01       	movw	r18, r24
    2d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d40:	9c 89       	ldd	r25, Y+20	; 0x14
    2d42:	b9 01       	movw	r22, r18
    2d44:	0e 94 a4 12 	call	0x2548	; 0x2548 <_ZN4UTFT8setPixelEj>
    2d48:	16 c0       	rjmp	.+44     	; 0x2d76 <_ZN4UTFT10rotateCharEhiiii+0x3c0>
				} 
				else  
				{
					setPixel((bch<<8)|bcl);
    2d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4e:	fc 01       	movw	r30, r24
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	88 2f       	mov	r24, r24
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	38 2f       	mov	r19, r24
    2d58:	22 27       	eor	r18, r18
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	fc 01       	movw	r30, r24
    2d60:	83 81       	ldd	r24, Z+3	; 0x03
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	82 2b       	or	r24, r18
    2d68:	93 2b       	or	r25, r19
    2d6a:	9c 01       	movw	r18, r24
    2d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d70:	b9 01       	movw	r22, r18
    2d72:	0e 94 a4 12 	call	0x2548	; 0x2548 <_ZN4UTFT8setPixelEj>
	for(j=0;j<cfont.y_size;j++) 
	{
		for (int zz=0; zz<(cfont.x_size/8); zz++)
		{
			ch=pgm_read_byte(&cfont.font[temp+zz]); 
			for(i=0;i<8;i++)
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	8f 5f       	subi	r24, 0xFF	; 255
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	88 30       	cpi	r24, 0x08	; 8
    2d80:	08 f4       	brcc	.+2      	; 0x2d84 <_ZN4UTFT10rotateCharEhiiii+0x3ce>
    2d82:	a8 ce       	rjmp	.-688    	; 0x2ad4 <_ZN4UTFT10rotateCharEhiiii+0x11e>
	cbi(CS_PORT, CS_PIN);

	temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
	for(j=0;j<cfont.y_size;j++) 
	{
		for (int zz=0; zz<(cfont.x_size/8); zz++)
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	01 96       	adiw	r24, 0x01	; 1
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
    2d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d90:	9c 89       	ldd	r25, Y+20	; 0x14
    2d92:	fc 01       	movw	r30, r24
    2d94:	87 85       	ldd	r24, Z+15	; 0x0f
    2d96:	86 95       	lsr	r24
    2d98:	86 95       	lsr	r24
    2d9a:	86 95       	lsr	r24
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	8d 81       	ldd	r24, Y+5	; 0x05
    2da2:	9e 81       	ldd	r25, Y+6	; 0x06
    2da4:	82 17       	cp	r24, r18
    2da6:	93 07       	cpc	r25, r19
    2da8:	0c f4       	brge	.+2      	; 0x2dac <_ZN4UTFT10rotateCharEhiiii+0x3f6>
    2daa:	7c ce       	rjmp	.-776    	; 0x2aa4 <_ZN4UTFT10rotateCharEhiiii+0xee>
				{
					setPixel((bch<<8)|bcl);
				}   
			}
		}
		temp+=(cfont.x_size/8);
    2dac:	8b 89       	ldd	r24, Y+19	; 0x13
    2dae:	9c 89       	ldd	r25, Y+20	; 0x14
    2db0:	fc 01       	movw	r30, r24
    2db2:	87 85       	ldd	r24, Z+15	; 0x0f
    2db4:	86 95       	lsr	r24
    2db6:	86 95       	lsr	r24
    2db8:	86 95       	lsr	r24
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc2:	82 0f       	add	r24, r18
    2dc4:	93 1f       	adc	r25, r19
    2dc6:	9c 83       	std	Y+4, r25	; 0x04
    2dc8:	8b 83       	std	Y+3, r24	; 0x03
	radian=deg*0.0175;  

	cbi(CS_PORT, CS_PIN);

	temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
	for(j=0;j<cfont.y_size;j++) 
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	8a 83       	std	Y+2, r24	; 0x02
    2dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	90 89       	ldd	r25, Z+16	; 0x10
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	89 17       	cp	r24, r25
    2ddc:	08 f4       	brcc	.+2      	; 0x2de0 <_ZN4UTFT10rotateCharEhiiii+0x42a>
    2dde:	5f ce       	rjmp	.-834    	; 0x2a9e <_ZN4UTFT10rotateCharEhiiii+0xe8>
				}   
			}
		}
		temp+=(cfont.x_size/8);
	}
	sbi(CS_PORT, CS_PIN);
    2de0:	85 e3       	ldi	r24, 0x35	; 53
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	25 e3       	ldi	r18, 0x35	; 53
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	f9 01       	movw	r30, r18
    2dea:	20 81       	ld	r18, Z
    2dec:	21 60       	ori	r18, 0x01	; 1
    2dee:	fc 01       	movw	r30, r24
    2df0:	20 83       	st	Z, r18
}
    2df2:	6d 96       	adiw	r28, 0x1d	; 29
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	df 90       	pop	r13
    2e0c:	cf 90       	pop	r12
    2e0e:	bf 90       	pop	r11
    2e10:	af 90       	pop	r10
    2e12:	9f 90       	pop	r9
    2e14:	8f 90       	pop	r8
    2e16:	7f 90       	pop	r7
    2e18:	6f 90       	pop	r6
    2e1a:	5f 90       	pop	r5
    2e1c:	4f 90       	pop	r4
    2e1e:	08 95       	ret

00002e20 <_ZN4UTFT5printEPKciii>:

void UTFT::print(const char *st, int x, int y, int deg)
{
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	2e 97       	sbiw	r28, 0x0e	; 14
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	9e 83       	std	Y+6, r25	; 0x06
    2e3e:	8d 83       	std	Y+5, r24	; 0x05
    2e40:	78 87       	std	Y+8, r23	; 0x08
    2e42:	6f 83       	std	Y+7, r22	; 0x07
    2e44:	5a 87       	std	Y+10, r21	; 0x0a
    2e46:	49 87       	std	Y+9, r20	; 0x09
    2e48:	3c 87       	std	Y+12, r19	; 0x0c
    2e4a:	2b 87       	std	Y+11, r18	; 0x0b
    2e4c:	1e 87       	std	Y+14, r17	; 0x0e
    2e4e:	0d 87       	std	Y+13, r16	; 0x0d
	int stl, i;

	stl = strlen(st);
    2e50:	8f 81       	ldd	r24, Y+7	; 0x07
    2e52:	98 85       	ldd	r25, Y+8	; 0x08
    2e54:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <strlen>
    2e58:	9c 83       	std	Y+4, r25	; 0x04
    2e5a:	8b 83       	std	Y+3, r24	; 0x03

	if (orient==PORTRAIT)
    2e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e60:	fc 01       	movw	r30, r24
    2e62:	84 81       	ldd	r24, Z+4	; 0x04
    2e64:	88 23       	and	r24, r24
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <_ZN4UTFT5printEPKciii+0x4a>
    2e68:	5e c0       	rjmp	.+188    	; 0x2f26 <_ZN4UTFT5printEPKciii+0x106>
	{
	if (x==RIGHT)
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	8f 30       	cpi	r24, 0x0F	; 15
    2e70:	97 42       	sbci	r25, 0x27	; 39
    2e72:	f9 f4       	brne	.+62     	; 0x2eb2 <_ZN4UTFT5printEPKciii+0x92>
		x=(disp_x_size+1)-(stl*cfont.x_size);
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
    2e76:	9e 81       	ldd	r25, Y+6	; 0x06
    2e78:	fc 01       	movw	r30, r24
    2e7a:	85 81       	ldd	r24, Z+5	; 0x05
    2e7c:	96 81       	ldd	r25, Z+6	; 0x06
    2e7e:	a7 81       	ldd	r26, Z+7	; 0x07
    2e80:	b0 85       	ldd	r27, Z+8	; 0x08
    2e82:	ac 01       	movw	r20, r24
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	fc 01       	movw	r30, r24
    2e8a:	87 85       	ldd	r24, Z+15	; 0x0f
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	28 9f       	mul	r18, r24
    2e96:	b0 01       	movw	r22, r0
    2e98:	29 9f       	mul	r18, r25
    2e9a:	70 0d       	add	r23, r0
    2e9c:	38 9f       	mul	r19, r24
    2e9e:	70 0d       	add	r23, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	7a 01       	movw	r14, r20
    2ea6:	e8 1a       	sub	r14, r24
    2ea8:	f9 0a       	sbc	r15, r25
    2eaa:	c7 01       	movw	r24, r14
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	9a 87       	std	Y+10, r25	; 0x0a
    2eb0:	89 87       	std	Y+9, r24	; 0x09
	if (x==CENTER)
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	8e 30       	cpi	r24, 0x0E	; 14
    2eb8:	97 42       	sbci	r25, 0x27	; 39
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <_ZN4UTFT5printEPKciii+0x9e>
    2ebc:	90 c0       	rjmp	.+288    	; 0x2fde <_ZN4UTFT5printEPKciii+0x1be>
		x=((disp_x_size+1)-(stl*cfont.x_size))/2;
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	85 81       	ldd	r24, Z+5	; 0x05
    2ec6:	96 81       	ldd	r25, Z+6	; 0x06
    2ec8:	a7 81       	ldd	r26, Z+7	; 0x07
    2eca:	b0 85       	ldd	r27, Z+8	; 0x08
    2ecc:	9c 01       	movw	r18, r24
    2ece:	ad 01       	movw	r20, r26
    2ed0:	2f 5f       	subi	r18, 0xFF	; 255
    2ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	fc 01       	movw	r30, r24
    2ede:	87 85       	ldd	r24, Z+15	; 0x0f
    2ee0:	e8 2f       	mov	r30, r24
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ee6:	7c 81       	ldd	r23, Y+4	; 0x04
    2ee8:	e6 9f       	mul	r30, r22
    2eea:	c0 01       	movw	r24, r0
    2eec:	e7 9f       	mul	r30, r23
    2eee:	90 0d       	add	r25, r0
    2ef0:	f6 9f       	mul	r31, r22
    2ef2:	90 0d       	add	r25, r0
    2ef4:	11 24       	eor	r1, r1
    2ef6:	09 2e       	mov	r0, r25
    2ef8:	00 0c       	add	r0, r0
    2efa:	aa 0b       	sbc	r26, r26
    2efc:	bb 0b       	sbc	r27, r27
    2efe:	79 01       	movw	r14, r18
    2f00:	8a 01       	movw	r16, r20
    2f02:	e8 1a       	sub	r14, r24
    2f04:	f9 0a       	sbc	r15, r25
    2f06:	0a 0b       	sbc	r16, r26
    2f08:	1b 0b       	sbc	r17, r27
    2f0a:	d8 01       	movw	r26, r16
    2f0c:	c7 01       	movw	r24, r14
    2f0e:	bb 23       	and	r27, r27
    2f10:	1c f4       	brge	.+6      	; 0x2f18 <_ZN4UTFT5printEPKciii+0xf8>
    2f12:	01 96       	adiw	r24, 0x01	; 1
    2f14:	a1 1d       	adc	r26, r1
    2f16:	b1 1d       	adc	r27, r1
    2f18:	b5 95       	asr	r27
    2f1a:	a7 95       	ror	r26
    2f1c:	97 95       	ror	r25
    2f1e:	87 95       	ror	r24
    2f20:	9a 87       	std	Y+10, r25	; 0x0a
    2f22:	89 87       	std	Y+9, r24	; 0x09
    2f24:	5c c0       	rjmp	.+184    	; 0x2fde <_ZN4UTFT5printEPKciii+0x1be>
	}
	else
	{
	if (x==RIGHT)
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2a:	8f 30       	cpi	r24, 0x0F	; 15
    2f2c:	97 42       	sbci	r25, 0x27	; 39
    2f2e:	f9 f4       	brne	.+62     	; 0x2f6e <_ZN4UTFT5printEPKciii+0x14e>
		x=(disp_y_size+1)-(stl*cfont.x_size);
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	fc 01       	movw	r30, r24
    2f36:	81 85       	ldd	r24, Z+9	; 0x09
    2f38:	92 85       	ldd	r25, Z+10	; 0x0a
    2f3a:	a3 85       	ldd	r26, Z+11	; 0x0b
    2f3c:	b4 85       	ldd	r27, Z+12	; 0x0c
    2f3e:	ac 01       	movw	r20, r24
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	fc 01       	movw	r30, r24
    2f46:	87 85       	ldd	r24, Z+15	; 0x0f
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f50:	28 9f       	mul	r18, r24
    2f52:	b0 01       	movw	r22, r0
    2f54:	29 9f       	mul	r18, r25
    2f56:	70 0d       	add	r23, r0
    2f58:	38 9f       	mul	r19, r24
    2f5a:	70 0d       	add	r23, r0
    2f5c:	11 24       	eor	r1, r1
    2f5e:	cb 01       	movw	r24, r22
    2f60:	7a 01       	movw	r14, r20
    2f62:	e8 1a       	sub	r14, r24
    2f64:	f9 0a       	sbc	r15, r25
    2f66:	c7 01       	movw	r24, r14
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	9a 87       	std	Y+10, r25	; 0x0a
    2f6c:	89 87       	std	Y+9, r24	; 0x09
	if (x==CENTER)
    2f6e:	89 85       	ldd	r24, Y+9	; 0x09
    2f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f72:	8e 30       	cpi	r24, 0x0E	; 14
    2f74:	97 42       	sbci	r25, 0x27	; 39
    2f76:	99 f5       	brne	.+102    	; 0x2fde <_ZN4UTFT5printEPKciii+0x1be>
		x=((disp_y_size+1)-(stl*cfont.x_size))/2;
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	81 85       	ldd	r24, Z+9	; 0x09
    2f80:	92 85       	ldd	r25, Z+10	; 0x0a
    2f82:	a3 85       	ldd	r26, Z+11	; 0x0b
    2f84:	b4 85       	ldd	r27, Z+12	; 0x0c
    2f86:	9c 01       	movw	r18, r24
    2f88:	ad 01       	movw	r20, r26
    2f8a:	2f 5f       	subi	r18, 0xFF	; 255
    2f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8e:	4f 4f       	sbci	r20, 0xFF	; 255
    2f90:	5f 4f       	sbci	r21, 0xFF	; 255
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	9e 81       	ldd	r25, Y+6	; 0x06
    2f96:	fc 01       	movw	r30, r24
    2f98:	87 85       	ldd	r24, Z+15	; 0x0f
    2f9a:	e8 2f       	mov	r30, r24
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	6b 81       	ldd	r22, Y+3	; 0x03
    2fa0:	7c 81       	ldd	r23, Y+4	; 0x04
    2fa2:	e6 9f       	mul	r30, r22
    2fa4:	c0 01       	movw	r24, r0
    2fa6:	e7 9f       	mul	r30, r23
    2fa8:	90 0d       	add	r25, r0
    2faa:	f6 9f       	mul	r31, r22
    2fac:	90 0d       	add	r25, r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	09 2e       	mov	r0, r25
    2fb2:	00 0c       	add	r0, r0
    2fb4:	aa 0b       	sbc	r26, r26
    2fb6:	bb 0b       	sbc	r27, r27
    2fb8:	79 01       	movw	r14, r18
    2fba:	8a 01       	movw	r16, r20
    2fbc:	e8 1a       	sub	r14, r24
    2fbe:	f9 0a       	sbc	r15, r25
    2fc0:	0a 0b       	sbc	r16, r26
    2fc2:	1b 0b       	sbc	r17, r27
    2fc4:	d8 01       	movw	r26, r16
    2fc6:	c7 01       	movw	r24, r14
    2fc8:	bb 23       	and	r27, r27
    2fca:	1c f4       	brge	.+6      	; 0x2fd2 <_ZN4UTFT5printEPKciii+0x1b2>
    2fcc:	01 96       	adiw	r24, 0x01	; 1
    2fce:	a1 1d       	adc	r26, r1
    2fd0:	b1 1d       	adc	r27, r1
    2fd2:	b5 95       	asr	r27
    2fd4:	a7 95       	ror	r26
    2fd6:	97 95       	ror	r25
    2fd8:	87 95       	ror	r24
    2fda:	9a 87       	std	Y+10, r25	; 0x0a
    2fdc:	89 87       	std	Y+9, r24	; 0x09
	}

	for (i=0; i<stl; i++)
    2fde:	1a 82       	std	Y+2, r1	; 0x02
    2fe0:	19 82       	std	Y+1, r1	; 0x01
    2fe2:	45 c0       	rjmp	.+138    	; 0x306e <_ZN4UTFT5printEPKciii+0x24e>
		if (deg==0)
    2fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe8:	89 2b       	or	r24, r25
    2fea:	21 f5       	brne	.+72     	; 0x3034 <_ZN4UTFT5printEPKciii+0x214>
			printChar(*st++, x + (i*(cfont.x_size)), y);
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	87 85       	ldd	r24, Z+15	; 0x0f
    2ff4:	48 2f       	mov	r20, r24
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	48 9f       	mul	r20, r24
    2ffe:	90 01       	movw	r18, r0
    3000:	49 9f       	mul	r20, r25
    3002:	30 0d       	add	r19, r0
    3004:	58 9f       	mul	r21, r24
    3006:	30 0d       	add	r19, r0
    3008:	11 24       	eor	r1, r1
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	a9 01       	movw	r20, r18
    3010:	48 0f       	add	r20, r24
    3012:	59 1f       	adc	r21, r25
    3014:	8f 81       	ldd	r24, Y+7	; 0x07
    3016:	98 85       	ldd	r25, Y+8	; 0x08
    3018:	9c 01       	movw	r18, r24
    301a:	2f 5f       	subi	r18, 0xFF	; 255
    301c:	3f 4f       	sbci	r19, 0xFF	; 255
    301e:	38 87       	std	Y+8, r19	; 0x08
    3020:	2f 83       	std	Y+7, r18	; 0x07
    3022:	fc 01       	movw	r30, r24
    3024:	60 81       	ld	r22, Z
    3026:	2b 85       	ldd	r18, Y+11	; 0x0b
    3028:	3c 85       	ldd	r19, Y+12	; 0x0c
    302a:	8d 81       	ldd	r24, Y+5	; 0x05
    302c:	9e 81       	ldd	r25, Y+6	; 0x06
    302e:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN4UTFT9printCharEhii>
    3032:	18 c0       	rjmp	.+48     	; 0x3064 <_ZN4UTFT5printEPKciii+0x244>
		else
			rotateChar(*st++, x, y, i, deg);
    3034:	8f 81       	ldd	r24, Y+7	; 0x07
    3036:	98 85       	ldd	r25, Y+8	; 0x08
    3038:	9c 01       	movw	r18, r24
    303a:	2f 5f       	subi	r18, 0xFF	; 255
    303c:	3f 4f       	sbci	r19, 0xFF	; 255
    303e:	38 87       	std	Y+8, r19	; 0x08
    3040:	2f 83       	std	Y+7, r18	; 0x07
    3042:	fc 01       	movw	r30, r24
    3044:	a0 81       	ld	r26, Z
    3046:	ed 85       	ldd	r30, Y+13	; 0x0d
    3048:	fe 85       	ldd	r31, Y+14	; 0x0e
    304a:	69 81       	ldd	r22, Y+1	; 0x01
    304c:	7a 81       	ldd	r23, Y+2	; 0x02
    304e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3050:	3c 85       	ldd	r19, Y+12	; 0x0c
    3052:	49 85       	ldd	r20, Y+9	; 0x09
    3054:	5a 85       	ldd	r21, Y+10	; 0x0a
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	7f 01       	movw	r14, r30
    305c:	8b 01       	movw	r16, r22
    305e:	6a 2f       	mov	r22, r26
    3060:	0e 94 db 14 	call	0x29b6	; 0x29b6 <_ZN4UTFT10rotateCharEhiiii>
		x=(disp_y_size+1)-(stl*cfont.x_size);
	if (x==CENTER)
		x=((disp_y_size+1)-(stl*cfont.x_size))/2;
	}

	for (i=0; i<stl; i++)
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	29 81       	ldd	r18, Y+1	; 0x01
    3070:	3a 81       	ldd	r19, Y+2	; 0x02
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	9c 81       	ldd	r25, Y+4	; 0x04
    3076:	28 17       	cp	r18, r24
    3078:	39 07       	cpc	r19, r25
    307a:	0c f4       	brge	.+2      	; 0x307e <_ZN4UTFT5printEPKciii+0x25e>
    307c:	b3 cf       	rjmp	.-154    	; 0x2fe4 <_ZN4UTFT5printEPKciii+0x1c4>
		if (deg==0)
			printChar(*st++, x + (i*(cfont.x_size)), y);
		else
			rotateChar(*st++, x, y, i, deg);
}
    307e:	2e 96       	adiw	r28, 0x0e	; 14
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	ff 90       	pop	r15
    3094:	ef 90       	pop	r14
    3096:	08 95       	ret

00003098 <_ZN4UTFT9printNumIEliiic>:


void UTFT::printNumI(long num, int x, int y, int length, char filler)
{
    3098:	cf 92       	push	r12
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	c6 55       	subi	r28, 0x56	; 86
    30ac:	d1 09       	sbc	r29, r1
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	9f af       	std	Y+63, r25	; 0x3f
    30ba:	8e af       	std	Y+62, r24	; 0x3e
    30bc:	ce 01       	movw	r24, r28
    30be:	80 5c       	subi	r24, 0xC0	; 192
    30c0:	9f 4f       	sbci	r25, 0xFF	; 255
    30c2:	fc 01       	movw	r30, r24
    30c4:	40 83       	st	Z, r20
    30c6:	51 83       	std	Z+1, r21	; 0x01
    30c8:	62 83       	std	Z+2, r22	; 0x02
    30ca:	73 83       	std	Z+3, r23	; 0x03
    30cc:	ce 01       	movw	r24, r28
    30ce:	8c 5b       	subi	r24, 0xBC	; 188
    30d0:	9f 4f       	sbci	r25, 0xFF	; 255
    30d2:	fc 01       	movw	r30, r24
    30d4:	31 83       	std	Z+1, r19	; 0x01
    30d6:	20 83       	st	Z, r18
    30d8:	ce 01       	movw	r24, r28
    30da:	8a 5b       	subi	r24, 0xBA	; 186
    30dc:	9f 4f       	sbci	r25, 0xFF	; 255
    30de:	fc 01       	movw	r30, r24
    30e0:	11 83       	std	Z+1, r17	; 0x01
    30e2:	00 83       	st	Z, r16
    30e4:	ce 01       	movw	r24, r28
    30e6:	88 5b       	subi	r24, 0xB8	; 184
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	fc 01       	movw	r30, r24
    30ec:	f1 82       	std	Z+1, r15	; 0x01
    30ee:	e0 82       	st	Z, r14
    30f0:	ce 01       	movw	r24, r28
    30f2:	86 5b       	subi	r24, 0xB6	; 182
    30f4:	9f 4f       	sbci	r25, 0xFF	; 255
    30f6:	fc 01       	movw	r30, r24
    30f8:	c0 82       	st	Z, r12
	char buf[25];
	char st[27];
	bool neg=false;
    30fa:	19 82       	std	Y+1, r1	; 0x01
	int c=0, f=0;
    30fc:	1b 82       	std	Y+3, r1	; 0x03
    30fe:	1a 82       	std	Y+2, r1	; 0x02
    3100:	1d 82       	std	Y+5, r1	; 0x05
    3102:	1c 82       	std	Y+4, r1	; 0x04
  
	if (num==0)
    3104:	ce 01       	movw	r24, r28
    3106:	80 5c       	subi	r24, 0xC0	; 192
    3108:	9f 4f       	sbci	r25, 0xFF	; 255
    310a:	fc 01       	movw	r30, r24
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	a2 81       	ldd	r26, Z+2	; 0x02
    3112:	b3 81       	ldd	r27, Z+3	; 0x03
    3114:	89 2b       	or	r24, r25
    3116:	8a 2b       	or	r24, r26
    3118:	8b 2b       	or	r24, r27
    311a:	09 f0       	breq	.+2      	; 0x311e <_ZN4UTFT9printNumIEliiic+0x86>
    311c:	45 c0       	rjmp	.+138    	; 0x31a8 <_ZN4UTFT9printNumIEliiic+0x110>
	{
		if (length!=0)
    311e:	ce 01       	movw	r24, r28
    3120:	88 5b       	subi	r24, 0xB8	; 184
    3122:	9f 4f       	sbci	r25, 0xFF	; 255
    3124:	fc 01       	movw	r30, r24
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	89 2b       	or	r24, r25
    312c:	c9 f1       	breq	.+114    	; 0x31a0 <_ZN4UTFT9printNumIEliiic+0x108>
		{
			for (c=0; c<(length-1); c++)
    312e:	1b 82       	std	Y+3, r1	; 0x03
    3130:	1a 82       	std	Y+2, r1	; 0x02
    3132:	13 c0       	rjmp	.+38     	; 0x315a <_ZN4UTFT9printNumIEliiic+0xc2>
				st[c]=filler;
    3134:	9e 01       	movw	r18, r28
    3136:	2d 5d       	subi	r18, 0xDD	; 221
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	9b 81       	ldd	r25, Y+3	; 0x03
    313e:	82 0f       	add	r24, r18
    3140:	93 1f       	adc	r25, r19
    3142:	9e 01       	movw	r18, r28
    3144:	26 5b       	subi	r18, 0xB6	; 182
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	f9 01       	movw	r30, r18
    314a:	20 81       	ld	r18, Z
    314c:	fc 01       	movw	r30, r24
    314e:	20 83       	st	Z, r18
  
	if (num==0)
	{
		if (length!=0)
		{
			for (c=0; c<(length-1); c++)
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	9b 81       	ldd	r25, Y+3	; 0x03
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	9b 83       	std	Y+3, r25	; 0x03
    3158:	8a 83       	std	Y+2, r24	; 0x02
    315a:	ce 01       	movw	r24, r28
    315c:	88 5b       	subi	r24, 0xB8	; 184
    315e:	9f 4f       	sbci	r25, 0xFF	; 255
    3160:	fc 01       	movw	r30, r24
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	9c 01       	movw	r18, r24
    3168:	21 50       	subi	r18, 0x01	; 1
    316a:	31 09       	sbc	r19, r1
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	9b 81       	ldd	r25, Y+3	; 0x03
    3170:	82 17       	cp	r24, r18
    3172:	93 07       	cpc	r25, r19
    3174:	fc f2       	brlt	.-66     	; 0x3134 <_ZN4UTFT9printNumIEliiic+0x9c>
				st[c]=filler;
			st[c]=48;
    3176:	9e 01       	movw	r18, r28
    3178:	2d 5d       	subi	r18, 0xDD	; 221
    317a:	3f 4f       	sbci	r19, 0xFF	; 255
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	9b 81       	ldd	r25, Y+3	; 0x03
    3180:	82 0f       	add	r24, r18
    3182:	93 1f       	adc	r25, r19
    3184:	20 e3       	ldi	r18, 0x30	; 48
    3186:	fc 01       	movw	r30, r24
    3188:	20 83       	st	Z, r18
			st[c+1]=0;
    318a:	8a 81       	ldd	r24, Y+2	; 0x02
    318c:	9b 81       	ldd	r25, Y+3	; 0x03
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	9e 01       	movw	r18, r28
    3192:	2d 5d       	subi	r18, 0xDD	; 221
    3194:	3f 4f       	sbci	r19, 0xFF	; 255
    3196:	82 0f       	add	r24, r18
    3198:	93 1f       	adc	r25, r19
    319a:	fc 01       	movw	r30, r24
    319c:	10 82       	st	Z, r1
    319e:	20 c1       	rjmp	.+576    	; 0x33e0 <_ZN4UTFT9printNumIEliiic+0x348>
		}
		else
		{
			st[0]=48;
    31a0:	80 e3       	ldi	r24, 0x30	; 48
    31a2:	8b a3       	std	Y+35, r24	; 0x23
			st[1]=0;
    31a4:	1c a2       	std	Y+36, r1	; 0x24
    31a6:	1c c1       	rjmp	.+568    	; 0x33e0 <_ZN4UTFT9printNumIEliiic+0x348>
		}
	}
	else
	{
		if (num<0)
    31a8:	ce 01       	movw	r24, r28
    31aa:	80 5c       	subi	r24, 0xC0	; 192
    31ac:	9f 4f       	sbci	r25, 0xFF	; 255
    31ae:	fc 01       	movw	r30, r24
    31b0:	80 81       	ld	r24, Z
    31b2:	91 81       	ldd	r25, Z+1	; 0x01
    31b4:	a2 81       	ldd	r26, Z+2	; 0x02
    31b6:	b3 81       	ldd	r27, Z+3	; 0x03
    31b8:	bb 23       	and	r27, r27
    31ba:	cc f4       	brge	.+50     	; 0x31ee <_ZN4UTFT9printNumIEliiic+0x156>
		{
			neg=true;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	89 83       	std	Y+1, r24	; 0x01
			num=-num;
    31c0:	9e 01       	movw	r18, r28
    31c2:	20 5c       	subi	r18, 0xC0	; 192
    31c4:	3f 4f       	sbci	r19, 0xFF	; 255
    31c6:	ce 01       	movw	r24, r28
    31c8:	80 5c       	subi	r24, 0xC0	; 192
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	fc 01       	movw	r30, r24
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	a2 81       	ldd	r26, Z+2	; 0x02
    31d4:	b3 81       	ldd	r27, Z+3	; 0x03
    31d6:	b0 95       	com	r27
    31d8:	a0 95       	com	r26
    31da:	90 95       	com	r25
    31dc:	81 95       	neg	r24
    31de:	9f 4f       	sbci	r25, 0xFF	; 255
    31e0:	af 4f       	sbci	r26, 0xFF	; 255
    31e2:	bf 4f       	sbci	r27, 0xFF	; 255
    31e4:	f9 01       	movw	r30, r18
    31e6:	80 83       	st	Z, r24
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	a2 83       	std	Z+2, r26	; 0x02
    31ec:	b3 83       	std	Z+3, r27	; 0x03
		}
	  
		while (num>0)
    31ee:	54 c0       	rjmp	.+168    	; 0x3298 <_ZN4UTFT9printNumIEliiic+0x200>
		{
			buf[c]=48+(num % 10);
    31f0:	ce 01       	movw	r24, r28
    31f2:	80 5c       	subi	r24, 0xC0	; 192
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	fc 01       	movw	r30, r24
    31f8:	80 81       	ld	r24, Z
    31fa:	91 81       	ldd	r25, Z+1	; 0x01
    31fc:	a2 81       	ldd	r26, Z+2	; 0x02
    31fe:	b3 81       	ldd	r27, Z+3	; 0x03
    3200:	2a e0       	ldi	r18, 0x0A	; 10
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e0       	ldi	r20, 0x00	; 0
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	bc 01       	movw	r22, r24
    320a:	cd 01       	movw	r24, r26
    320c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__divmodsi4>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	40 e3       	ldi	r20, 0x30	; 48
    3216:	48 0f       	add	r20, r24
    3218:	9e 01       	movw	r18, r28
    321a:	26 5f       	subi	r18, 0xF6	; 246
    321c:	3f 4f       	sbci	r19, 0xFF	; 255
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	9b 81       	ldd	r25, Y+3	; 0x03
    3222:	82 0f       	add	r24, r18
    3224:	93 1f       	adc	r25, r19
    3226:	fc 01       	movw	r30, r24
    3228:	40 83       	st	Z, r20
			c++;
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	9b 81       	ldd	r25, Y+3	; 0x03
    322e:	01 96       	adiw	r24, 0x01	; 1
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	8a 83       	std	Y+2, r24	; 0x02
			num=(num-(num % 10))/10;
    3234:	ce 01       	movw	r24, r28
    3236:	80 5c       	subi	r24, 0xC0	; 192
    3238:	9f 4f       	sbci	r25, 0xFF	; 255
    323a:	fc 01       	movw	r30, r24
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	a2 81       	ldd	r26, Z+2	; 0x02
    3242:	b3 81       	ldd	r27, Z+3	; 0x03
    3244:	2a e0       	ldi	r18, 0x0A	; 10
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__divmodsi4>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9c 01       	movw	r18, r24
    325a:	ad 01       	movw	r20, r26
    325c:	ce 01       	movw	r24, r28
    325e:	80 5c       	subi	r24, 0xC0	; 192
    3260:	9f 4f       	sbci	r25, 0xFF	; 255
    3262:	fc 01       	movw	r30, r24
    3264:	80 81       	ld	r24, Z
    3266:	91 81       	ldd	r25, Z+1	; 0x01
    3268:	a2 81       	ldd	r26, Z+2	; 0x02
    326a:	b3 81       	ldd	r27, Z+3	; 0x03
    326c:	82 1b       	sub	r24, r18
    326e:	93 0b       	sbc	r25, r19
    3270:	a4 0b       	sbc	r26, r20
    3272:	b5 0b       	sbc	r27, r21
    3274:	8e 01       	movw	r16, r28
    3276:	00 5c       	subi	r16, 0xC0	; 192
    3278:	1f 4f       	sbci	r17, 0xFF	; 255
    327a:	2a e0       	ldi	r18, 0x0A	; 10
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e0       	ldi	r20, 0x00	; 0
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	bc 01       	movw	r22, r24
    3284:	cd 01       	movw	r24, r26
    3286:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__divmodsi4>
    328a:	da 01       	movw	r26, r20
    328c:	c9 01       	movw	r24, r18
    328e:	f8 01       	movw	r30, r16
    3290:	80 83       	st	Z, r24
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	a2 83       	std	Z+2, r26	; 0x02
    3296:	b3 83       	std	Z+3, r27	; 0x03
		{
			neg=true;
			num=-num;
		}
	  
		while (num>0)
    3298:	ce 01       	movw	r24, r28
    329a:	80 5c       	subi	r24, 0xC0	; 192
    329c:	9f 4f       	sbci	r25, 0xFF	; 255
    329e:	fc 01       	movw	r30, r24
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	a2 81       	ldd	r26, Z+2	; 0x02
    32a6:	b3 81       	ldd	r27, Z+3	; 0x03
    32a8:	18 16       	cp	r1, r24
    32aa:	19 06       	cpc	r1, r25
    32ac:	1a 06       	cpc	r1, r26
    32ae:	1b 06       	cpc	r1, r27
    32b0:	0c f4       	brge	.+2      	; 0x32b4 <_ZN4UTFT9printNumIEliiic+0x21c>
    32b2:	9e cf       	rjmp	.-196    	; 0x31f0 <_ZN4UTFT9printNumIEliiic+0x158>
		{
			buf[c]=48+(num % 10);
			c++;
			num=(num-(num % 10))/10;
		}
		buf[c]=0;
    32b4:	9e 01       	movw	r18, r28
    32b6:	26 5f       	subi	r18, 0xF6	; 246
    32b8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	9b 81       	ldd	r25, Y+3	; 0x03
    32be:	82 0f       	add	r24, r18
    32c0:	93 1f       	adc	r25, r19
    32c2:	fc 01       	movw	r30, r24
    32c4:	10 82       	st	Z, r1
	  
		if (neg)
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	88 23       	and	r24, r24
    32ca:	11 f0       	breq	.+4      	; 0x32d0 <_ZN4UTFT9printNumIEliiic+0x238>
		{
			st[0]=45;
    32cc:	8d e2       	ldi	r24, 0x2D	; 45
    32ce:	8b a3       	std	Y+35, r24	; 0x23
		}
	  
		if (length>(c+neg))
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	9b 81       	ldd	r25, Y+3	; 0x03
    32da:	28 0f       	add	r18, r24
    32dc:	39 1f       	adc	r19, r25
    32de:	ce 01       	movw	r24, r28
    32e0:	88 5b       	subi	r24, 0xB8	; 184
    32e2:	9f 4f       	sbci	r25, 0xFF	; 255
    32e4:	fc 01       	movw	r30, r24
    32e6:	80 81       	ld	r24, Z
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	28 17       	cp	r18, r24
    32ec:	39 07       	cpc	r19, r25
    32ee:	a4 f5       	brge	.+104    	; 0x3358 <_ZN4UTFT9printNumIEliiic+0x2c0>
		{
			for (int i=0; i<(length-c-neg); i++)
    32f0:	1f 82       	std	Y+7, r1	; 0x07
    32f2:	1e 82       	std	Y+6, r1	; 0x06
    32f4:	1d c0       	rjmp	.+58     	; 0x3330 <_ZN4UTFT9printNumIEliiic+0x298>
			{
				st[i+neg]=filler;
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	28 2f       	mov	r18, r24
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	8e 81       	ldd	r24, Y+6	; 0x06
    32fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3300:	82 0f       	add	r24, r18
    3302:	93 1f       	adc	r25, r19
    3304:	9e 01       	movw	r18, r28
    3306:	2d 5d       	subi	r18, 0xDD	; 221
    3308:	3f 4f       	sbci	r19, 0xFF	; 255
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	9e 01       	movw	r18, r28
    3310:	26 5b       	subi	r18, 0xB6	; 182
    3312:	3f 4f       	sbci	r19, 0xFF	; 255
    3314:	f9 01       	movw	r30, r18
    3316:	20 81       	ld	r18, Z
    3318:	fc 01       	movw	r30, r24
    331a:	20 83       	st	Z, r18
				f++;
    331c:	8c 81       	ldd	r24, Y+4	; 0x04
    331e:	9d 81       	ldd	r25, Y+5	; 0x05
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	9d 83       	std	Y+5, r25	; 0x05
    3324:	8c 83       	std	Y+4, r24	; 0x04
			st[0]=45;
		}
	  
		if (length>(c+neg))
		{
			for (int i=0; i<(length-c-neg); i++)
    3326:	8e 81       	ldd	r24, Y+6	; 0x06
    3328:	9f 81       	ldd	r25, Y+7	; 0x07
    332a:	01 96       	adiw	r24, 0x01	; 1
    332c:	9f 83       	std	Y+7, r25	; 0x07
    332e:	8e 83       	std	Y+6, r24	; 0x06
    3330:	ce 01       	movw	r24, r28
    3332:	88 5b       	subi	r24, 0xB8	; 184
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	fc 01       	movw	r30, r24
    3338:	20 81       	ld	r18, Z
    333a:	31 81       	ldd	r19, Z+1	; 0x01
    333c:	8a 81       	ldd	r24, Y+2	; 0x02
    333e:	9b 81       	ldd	r25, Y+3	; 0x03
    3340:	28 1b       	sub	r18, r24
    3342:	39 0b       	sbc	r19, r25
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	88 2f       	mov	r24, r24
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	28 1b       	sub	r18, r24
    334c:	39 0b       	sbc	r19, r25
    334e:	8e 81       	ldd	r24, Y+6	; 0x06
    3350:	9f 81       	ldd	r25, Y+7	; 0x07
    3352:	82 17       	cp	r24, r18
    3354:	93 07       	cpc	r25, r19
    3356:	7c f2       	brlt	.-98     	; 0x32f6 <_ZN4UTFT9printNumIEliiic+0x25e>
				st[i+neg]=filler;
				f++;
			}
		}

		for (int i=0; i<c; i++)
    3358:	19 86       	std	Y+9, r1	; 0x09
    335a:	18 86       	std	Y+8, r1	; 0x08
    335c:	28 c0       	rjmp	.+80     	; 0x33ae <_ZN4UTFT9printNumIEliiic+0x316>
		{
			st[i+neg+f]=buf[c-i-1];
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	88 85       	ldd	r24, Y+8	; 0x08
    3366:	99 85       	ldd	r25, Y+9	; 0x09
    3368:	28 0f       	add	r18, r24
    336a:	39 1f       	adc	r19, r25
    336c:	8c 81       	ldd	r24, Y+4	; 0x04
    336e:	9d 81       	ldd	r25, Y+5	; 0x05
    3370:	82 0f       	add	r24, r18
    3372:	93 1f       	adc	r25, r19
    3374:	4a 81       	ldd	r20, Y+2	; 0x02
    3376:	5b 81       	ldd	r21, Y+3	; 0x03
    3378:	28 85       	ldd	r18, Y+8	; 0x08
    337a:	39 85       	ldd	r19, Y+9	; 0x09
    337c:	ba 01       	movw	r22, r20
    337e:	62 1b       	sub	r22, r18
    3380:	73 0b       	sbc	r23, r19
    3382:	9b 01       	movw	r18, r22
    3384:	21 50       	subi	r18, 0x01	; 1
    3386:	31 09       	sbc	r19, r1
    3388:	ae 01       	movw	r20, r28
    338a:	46 5f       	subi	r20, 0xF6	; 246
    338c:	5f 4f       	sbci	r21, 0xFF	; 255
    338e:	24 0f       	add	r18, r20
    3390:	35 1f       	adc	r19, r21
    3392:	f9 01       	movw	r30, r18
    3394:	40 81       	ld	r20, Z
    3396:	9e 01       	movw	r18, r28
    3398:	2d 5d       	subi	r18, 0xDD	; 221
    339a:	3f 4f       	sbci	r19, 0xFF	; 255
    339c:	82 0f       	add	r24, r18
    339e:	93 1f       	adc	r25, r19
    33a0:	fc 01       	movw	r30, r24
    33a2:	40 83       	st	Z, r20
				st[i+neg]=filler;
				f++;
			}
		}

		for (int i=0; i<c; i++)
    33a4:	88 85       	ldd	r24, Y+8	; 0x08
    33a6:	99 85       	ldd	r25, Y+9	; 0x09
    33a8:	01 96       	adiw	r24, 0x01	; 1
    33aa:	99 87       	std	Y+9, r25	; 0x09
    33ac:	88 87       	std	Y+8, r24	; 0x08
    33ae:	28 85       	ldd	r18, Y+8	; 0x08
    33b0:	39 85       	ldd	r19, Y+9	; 0x09
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	9b 81       	ldd	r25, Y+3	; 0x03
    33b6:	28 17       	cp	r18, r24
    33b8:	39 07       	cpc	r19, r25
    33ba:	8c f2       	brlt	.-94     	; 0x335e <_ZN4UTFT9printNumIEliiic+0x2c6>
		{
			st[i+neg+f]=buf[c-i-1];
		}
		st[c+neg+f]=0;
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	9b 81       	ldd	r25, Y+3	; 0x03
    33c6:	28 0f       	add	r18, r24
    33c8:	39 1f       	adc	r19, r25
    33ca:	8c 81       	ldd	r24, Y+4	; 0x04
    33cc:	9d 81       	ldd	r25, Y+5	; 0x05
    33ce:	82 0f       	add	r24, r18
    33d0:	93 1f       	adc	r25, r19
    33d2:	9e 01       	movw	r18, r28
    33d4:	2d 5d       	subi	r18, 0xDD	; 221
    33d6:	3f 4f       	sbci	r19, 0xFF	; 255
    33d8:	82 0f       	add	r24, r18
    33da:	93 1f       	adc	r25, r19
    33dc:	fc 01       	movw	r30, r24
    33de:	10 82       	st	Z, r1

	}

	print(st,x,y);
    33e0:	ce 01       	movw	r24, r28
    33e2:	8a 5b       	subi	r24, 0xBA	; 186
    33e4:	9f 4f       	sbci	r25, 0xFF	; 255
    33e6:	fc 01       	movw	r30, r24
    33e8:	20 81       	ld	r18, Z
    33ea:	31 81       	ldd	r19, Z+1	; 0x01
    33ec:	ce 01       	movw	r24, r28
    33ee:	8c 5b       	subi	r24, 0xBC	; 188
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	fc 01       	movw	r30, r24
    33f4:	40 81       	ld	r20, Z
    33f6:	51 81       	ldd	r21, Z+1	; 0x01
    33f8:	be 01       	movw	r22, r28
    33fa:	6d 5d       	subi	r22, 0xDD	; 221
    33fc:	7f 4f       	sbci	r23, 0xFF	; 255
    33fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3400:	9f ad       	ldd	r25, Y+63	; 0x3f
    3402:	00 e0       	ldi	r16, 0x00	; 0
    3404:	10 e0       	ldi	r17, 0x00	; 0
    3406:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_ZN4UTFT5printEPKciii>
}
    340a:	ca 5a       	subi	r28, 0xAA	; 170
    340c:	df 4f       	sbci	r29, 0xFF	; 255
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	cf 90       	pop	r12
    3426:	08 95       	ret

00003428 <_ZN4UTFT7setFontEPKh>:

	print(st,x,y);
}

void UTFT::setFont(const uint8_t* font)
{
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	60 97       	sbiw	r28, 0x10	; 16
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	9e 87       	std	Y+14, r25	; 0x0e
    343e:	8d 87       	std	Y+13, r24	; 0x0d
    3440:	78 8b       	std	Y+16, r23	; 0x10
    3442:	6f 87       	std	Y+15, r22	; 0x0f
	cfont.font=font;
    3444:	8d 85       	ldd	r24, Y+13	; 0x0d
    3446:	9e 85       	ldd	r25, Y+14	; 0x0e
    3448:	2f 85       	ldd	r18, Y+15	; 0x0f
    344a:	38 89       	ldd	r19, Y+16	; 0x10
    344c:	fc 01       	movw	r30, r24
    344e:	36 87       	std	Z+14, r19	; 0x0e
    3450:	25 87       	std	Z+13, r18	; 0x0d
	cfont.x_size=fontbyte(0);
    3452:	8d 85       	ldd	r24, Y+13	; 0x0d
    3454:	9e 85       	ldd	r25, Y+14	; 0x0e
    3456:	fc 01       	movw	r30, r24
    3458:	85 85       	ldd	r24, Z+13	; 0x0d
    345a:	96 85       	ldd	r25, Z+14	; 0x0e
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	89 83       	std	Y+1, r24	; 0x01
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	9a 81       	ldd	r25, Y+2	; 0x02
    3464:	fc 01       	movw	r30, r24
    3466:	84 91       	lpm	r24, Z
    3468:	8b 83       	std	Y+3, r24	; 0x03
    346a:	8d 85       	ldd	r24, Y+13	; 0x0d
    346c:	9e 85       	ldd	r25, Y+14	; 0x0e
    346e:	2b 81       	ldd	r18, Y+3	; 0x03
    3470:	fc 01       	movw	r30, r24
    3472:	27 87       	std	Z+15, r18	; 0x0f
	cfont.y_size=fontbyte(1);
    3474:	8d 85       	ldd	r24, Y+13	; 0x0d
    3476:	9e 85       	ldd	r25, Y+14	; 0x0e
    3478:	fc 01       	movw	r30, r24
    347a:	85 85       	ldd	r24, Z+13	; 0x0d
    347c:	96 85       	ldd	r25, Z+14	; 0x0e
    347e:	01 96       	adiw	r24, 0x01	; 1
    3480:	9d 83       	std	Y+5, r25	; 0x05
    3482:	8c 83       	std	Y+4, r24	; 0x04
    3484:	8c 81       	ldd	r24, Y+4	; 0x04
    3486:	9d 81       	ldd	r25, Y+5	; 0x05
    3488:	fc 01       	movw	r30, r24
    348a:	84 91       	lpm	r24, Z
    348c:	8e 83       	std	Y+6, r24	; 0x06
    348e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3490:	9e 85       	ldd	r25, Y+14	; 0x0e
    3492:	2e 81       	ldd	r18, Y+6	; 0x06
    3494:	fc 01       	movw	r30, r24
    3496:	20 8b       	std	Z+16, r18	; 0x10
	cfont.offset=fontbyte(2);
    3498:	8d 85       	ldd	r24, Y+13	; 0x0d
    349a:	9e 85       	ldd	r25, Y+14	; 0x0e
    349c:	fc 01       	movw	r30, r24
    349e:	85 85       	ldd	r24, Z+13	; 0x0d
    34a0:	96 85       	ldd	r25, Z+14	; 0x0e
    34a2:	02 96       	adiw	r24, 0x02	; 2
    34a4:	98 87       	std	Y+8, r25	; 0x08
    34a6:	8f 83       	std	Y+7, r24	; 0x07
    34a8:	8f 81       	ldd	r24, Y+7	; 0x07
    34aa:	98 85       	ldd	r25, Y+8	; 0x08
    34ac:	fc 01       	movw	r30, r24
    34ae:	84 91       	lpm	r24, Z
    34b0:	89 87       	std	Y+9, r24	; 0x09
    34b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b6:	29 85       	ldd	r18, Y+9	; 0x09
    34b8:	fc 01       	movw	r30, r24
    34ba:	21 8b       	std	Z+17, r18	; 0x11
	cfont.numchars=fontbyte(3);
    34bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34be:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c0:	fc 01       	movw	r30, r24
    34c2:	85 85       	ldd	r24, Z+13	; 0x0d
    34c4:	96 85       	ldd	r25, Z+14	; 0x0e
    34c6:	03 96       	adiw	r24, 0x03	; 3
    34c8:	9b 87       	std	Y+11, r25	; 0x0b
    34ca:	8a 87       	std	Y+10, r24	; 0x0a
    34cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    34d0:	fc 01       	movw	r30, r24
    34d2:	84 91       	lpm	r24, Z
    34d4:	8c 87       	std	Y+12, r24	; 0x0c
    34d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34da:	2c 85       	ldd	r18, Y+12	; 0x0c
    34dc:	fc 01       	movw	r30, r24
    34de:	22 8b       	std	Z+18, r18	; 0x12
}
    34e0:	60 96       	adiw	r28, 0x10	; 16
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	df 91       	pop	r29
    34ee:	cf 91       	pop	r28
    34f0:	08 95       	ret

000034f2 <__subsf3>:
    34f2:	50 58       	subi	r21, 0x80	; 128

000034f4 <__addsf3>:
    34f4:	bb 27       	eor	r27, r27
    34f6:	aa 27       	eor	r26, r26
    34f8:	0e 94 91 1a 	call	0x3522	; 0x3522 <__addsf3x>
    34fc:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__fp_round>
    3500:	0e 94 02 1c 	call	0x3804	; 0x3804 <__fp_pscA>
    3504:	38 f0       	brcs	.+14     	; 0x3514 <__addsf3+0x20>
    3506:	0e 94 09 1c 	call	0x3812	; 0x3812 <__fp_pscB>
    350a:	20 f0       	brcs	.+8      	; 0x3514 <__addsf3+0x20>
    350c:	39 f4       	brne	.+14     	; 0x351c <__addsf3+0x28>
    350e:	9f 3f       	cpi	r25, 0xFF	; 255
    3510:	19 f4       	brne	.+6      	; 0x3518 <__addsf3+0x24>
    3512:	26 f4       	brtc	.+8      	; 0x351c <__addsf3+0x28>
    3514:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <__fp_nan>
    3518:	0e f4       	brtc	.+2      	; 0x351c <__addsf3+0x28>
    351a:	e0 95       	com	r30
    351c:	e7 fb       	bst	r30, 7
    351e:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__fp_inf>

00003522 <__addsf3x>:
    3522:	e9 2f       	mov	r30, r25
    3524:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__fp_split3>
    3528:	58 f3       	brcs	.-42     	; 0x3500 <__addsf3+0xc>
    352a:	ba 17       	cp	r27, r26
    352c:	62 07       	cpc	r22, r18
    352e:	73 07       	cpc	r23, r19
    3530:	84 07       	cpc	r24, r20
    3532:	95 07       	cpc	r25, r21
    3534:	20 f0       	brcs	.+8      	; 0x353e <__addsf3x+0x1c>
    3536:	79 f4       	brne	.+30     	; 0x3556 <__addsf3x+0x34>
    3538:	a6 f5       	brtc	.+104    	; 0x35a2 <__addsf3x+0x80>
    353a:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__fp_zero>
    353e:	0e f4       	brtc	.+2      	; 0x3542 <__addsf3x+0x20>
    3540:	e0 95       	com	r30
    3542:	0b 2e       	mov	r0, r27
    3544:	ba 2f       	mov	r27, r26
    3546:	a0 2d       	mov	r26, r0
    3548:	0b 01       	movw	r0, r22
    354a:	b9 01       	movw	r22, r18
    354c:	90 01       	movw	r18, r0
    354e:	0c 01       	movw	r0, r24
    3550:	ca 01       	movw	r24, r20
    3552:	a0 01       	movw	r20, r0
    3554:	11 24       	eor	r1, r1
    3556:	ff 27       	eor	r31, r31
    3558:	59 1b       	sub	r21, r25
    355a:	99 f0       	breq	.+38     	; 0x3582 <__addsf3x+0x60>
    355c:	59 3f       	cpi	r21, 0xF9	; 249
    355e:	50 f4       	brcc	.+20     	; 0x3574 <__addsf3x+0x52>
    3560:	50 3e       	cpi	r21, 0xE0	; 224
    3562:	68 f1       	brcs	.+90     	; 0x35be <__addsf3x+0x9c>
    3564:	1a 16       	cp	r1, r26
    3566:	f0 40       	sbci	r31, 0x00	; 0
    3568:	a2 2f       	mov	r26, r18
    356a:	23 2f       	mov	r18, r19
    356c:	34 2f       	mov	r19, r20
    356e:	44 27       	eor	r20, r20
    3570:	58 5f       	subi	r21, 0xF8	; 248
    3572:	f3 cf       	rjmp	.-26     	; 0x355a <__addsf3x+0x38>
    3574:	46 95       	lsr	r20
    3576:	37 95       	ror	r19
    3578:	27 95       	ror	r18
    357a:	a7 95       	ror	r26
    357c:	f0 40       	sbci	r31, 0x00	; 0
    357e:	53 95       	inc	r21
    3580:	c9 f7       	brne	.-14     	; 0x3574 <__addsf3x+0x52>
    3582:	7e f4       	brtc	.+30     	; 0x35a2 <__addsf3x+0x80>
    3584:	1f 16       	cp	r1, r31
    3586:	ba 0b       	sbc	r27, r26
    3588:	62 0b       	sbc	r22, r18
    358a:	73 0b       	sbc	r23, r19
    358c:	84 0b       	sbc	r24, r20
    358e:	ba f0       	brmi	.+46     	; 0x35be <__addsf3x+0x9c>
    3590:	91 50       	subi	r25, 0x01	; 1
    3592:	a1 f0       	breq	.+40     	; 0x35bc <__addsf3x+0x9a>
    3594:	ff 0f       	add	r31, r31
    3596:	bb 1f       	adc	r27, r27
    3598:	66 1f       	adc	r22, r22
    359a:	77 1f       	adc	r23, r23
    359c:	88 1f       	adc	r24, r24
    359e:	c2 f7       	brpl	.-16     	; 0x3590 <__addsf3x+0x6e>
    35a0:	0e c0       	rjmp	.+28     	; 0x35be <__addsf3x+0x9c>
    35a2:	ba 0f       	add	r27, r26
    35a4:	62 1f       	adc	r22, r18
    35a6:	73 1f       	adc	r23, r19
    35a8:	84 1f       	adc	r24, r20
    35aa:	48 f4       	brcc	.+18     	; 0x35be <__addsf3x+0x9c>
    35ac:	87 95       	ror	r24
    35ae:	77 95       	ror	r23
    35b0:	67 95       	ror	r22
    35b2:	b7 95       	ror	r27
    35b4:	f7 95       	ror	r31
    35b6:	9e 3f       	cpi	r25, 0xFE	; 254
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <__addsf3x+0x9a>
    35ba:	b0 cf       	rjmp	.-160    	; 0x351c <__addsf3+0x28>
    35bc:	93 95       	inc	r25
    35be:	88 0f       	add	r24, r24
    35c0:	08 f0       	brcs	.+2      	; 0x35c4 <__addsf3x+0xa2>
    35c2:	99 27       	eor	r25, r25
    35c4:	ee 0f       	add	r30, r30
    35c6:	97 95       	ror	r25
    35c8:	87 95       	ror	r24
    35ca:	08 95       	ret

000035cc <__cmpsf2>:
    35cc:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__fp_cmp>
    35d0:	08 f4       	brcc	.+2      	; 0x35d4 <__cmpsf2+0x8>
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	08 95       	ret

000035d6 <cos>:
    35d6:	0e 94 12 1c 	call	0x3824	; 0x3824 <__fp_rempio2>
    35da:	e3 95       	inc	r30
    35dc:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__fp_sinus>

000035e0 <__divsf3>:
    35e0:	0e 94 04 1b 	call	0x3608	; 0x3608 <__divsf3x>
    35e4:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__fp_round>
    35e8:	0e 94 09 1c 	call	0x3812	; 0x3812 <__fp_pscB>
    35ec:	58 f0       	brcs	.+22     	; 0x3604 <__divsf3+0x24>
    35ee:	0e 94 02 1c 	call	0x3804	; 0x3804 <__fp_pscA>
    35f2:	40 f0       	brcs	.+16     	; 0x3604 <__divsf3+0x24>
    35f4:	29 f4       	brne	.+10     	; 0x3600 <__divsf3+0x20>
    35f6:	5f 3f       	cpi	r21, 0xFF	; 255
    35f8:	29 f0       	breq	.+10     	; 0x3604 <__divsf3+0x24>
    35fa:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__fp_inf>
    35fe:	51 11       	cpse	r21, r1
    3600:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__fp_szero>
    3604:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <__fp_nan>

00003608 <__divsf3x>:
    3608:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__fp_split3>
    360c:	68 f3       	brcs	.-38     	; 0x35e8 <__divsf3+0x8>

0000360e <__divsf3_pse>:
    360e:	99 23       	and	r25, r25
    3610:	b1 f3       	breq	.-20     	; 0x35fe <__divsf3+0x1e>
    3612:	55 23       	and	r21, r21
    3614:	91 f3       	breq	.-28     	; 0x35fa <__divsf3+0x1a>
    3616:	95 1b       	sub	r25, r21
    3618:	55 0b       	sbc	r21, r21
    361a:	bb 27       	eor	r27, r27
    361c:	aa 27       	eor	r26, r26
    361e:	62 17       	cp	r22, r18
    3620:	73 07       	cpc	r23, r19
    3622:	84 07       	cpc	r24, r20
    3624:	38 f0       	brcs	.+14     	; 0x3634 <__divsf3_pse+0x26>
    3626:	9f 5f       	subi	r25, 0xFF	; 255
    3628:	5f 4f       	sbci	r21, 0xFF	; 255
    362a:	22 0f       	add	r18, r18
    362c:	33 1f       	adc	r19, r19
    362e:	44 1f       	adc	r20, r20
    3630:	aa 1f       	adc	r26, r26
    3632:	a9 f3       	breq	.-22     	; 0x361e <__divsf3_pse+0x10>
    3634:	35 d0       	rcall	.+106    	; 0x36a0 <__divsf3_pse+0x92>
    3636:	0e 2e       	mov	r0, r30
    3638:	3a f0       	brmi	.+14     	; 0x3648 <__divsf3_pse+0x3a>
    363a:	e0 e8       	ldi	r30, 0x80	; 128
    363c:	32 d0       	rcall	.+100    	; 0x36a2 <__divsf3_pse+0x94>
    363e:	91 50       	subi	r25, 0x01	; 1
    3640:	50 40       	sbci	r21, 0x00	; 0
    3642:	e6 95       	lsr	r30
    3644:	00 1c       	adc	r0, r0
    3646:	ca f7       	brpl	.-14     	; 0x363a <__divsf3_pse+0x2c>
    3648:	2b d0       	rcall	.+86     	; 0x36a0 <__divsf3_pse+0x92>
    364a:	fe 2f       	mov	r31, r30
    364c:	29 d0       	rcall	.+82     	; 0x36a0 <__divsf3_pse+0x92>
    364e:	66 0f       	add	r22, r22
    3650:	77 1f       	adc	r23, r23
    3652:	88 1f       	adc	r24, r24
    3654:	bb 1f       	adc	r27, r27
    3656:	26 17       	cp	r18, r22
    3658:	37 07       	cpc	r19, r23
    365a:	48 07       	cpc	r20, r24
    365c:	ab 07       	cpc	r26, r27
    365e:	b0 e8       	ldi	r27, 0x80	; 128
    3660:	09 f0       	breq	.+2      	; 0x3664 <__divsf3_pse+0x56>
    3662:	bb 0b       	sbc	r27, r27
    3664:	80 2d       	mov	r24, r0
    3666:	bf 01       	movw	r22, r30
    3668:	ff 27       	eor	r31, r31
    366a:	93 58       	subi	r25, 0x83	; 131
    366c:	5f 4f       	sbci	r21, 0xFF	; 255
    366e:	3a f0       	brmi	.+14     	; 0x367e <__divsf3_pse+0x70>
    3670:	9e 3f       	cpi	r25, 0xFE	; 254
    3672:	51 05       	cpc	r21, r1
    3674:	78 f0       	brcs	.+30     	; 0x3694 <__divsf3_pse+0x86>
    3676:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__fp_inf>
    367a:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__fp_szero>
    367e:	5f 3f       	cpi	r21, 0xFF	; 255
    3680:	e4 f3       	brlt	.-8      	; 0x367a <__divsf3_pse+0x6c>
    3682:	98 3e       	cpi	r25, 0xE8	; 232
    3684:	d4 f3       	brlt	.-12     	; 0x367a <__divsf3_pse+0x6c>
    3686:	86 95       	lsr	r24
    3688:	77 95       	ror	r23
    368a:	67 95       	ror	r22
    368c:	b7 95       	ror	r27
    368e:	f7 95       	ror	r31
    3690:	9f 5f       	subi	r25, 0xFF	; 255
    3692:	c9 f7       	brne	.-14     	; 0x3686 <__divsf3_pse+0x78>
    3694:	88 0f       	add	r24, r24
    3696:	91 1d       	adc	r25, r1
    3698:	96 95       	lsr	r25
    369a:	87 95       	ror	r24
    369c:	97 f9       	bld	r25, 7
    369e:	08 95       	ret
    36a0:	e1 e0       	ldi	r30, 0x01	; 1
    36a2:	66 0f       	add	r22, r22
    36a4:	77 1f       	adc	r23, r23
    36a6:	88 1f       	adc	r24, r24
    36a8:	bb 1f       	adc	r27, r27
    36aa:	62 17       	cp	r22, r18
    36ac:	73 07       	cpc	r23, r19
    36ae:	84 07       	cpc	r24, r20
    36b0:	ba 07       	cpc	r27, r26
    36b2:	20 f0       	brcs	.+8      	; 0x36bc <__divsf3_pse+0xae>
    36b4:	62 1b       	sub	r22, r18
    36b6:	73 0b       	sbc	r23, r19
    36b8:	84 0b       	sbc	r24, r20
    36ba:	ba 0b       	sbc	r27, r26
    36bc:	ee 1f       	adc	r30, r30
    36be:	88 f7       	brcc	.-30     	; 0x36a2 <__divsf3_pse+0x94>
    36c0:	e0 95       	com	r30
    36c2:	08 95       	ret

000036c4 <__fixsfsi>:
    36c4:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    36c8:	68 94       	set
    36ca:	b1 11       	cpse	r27, r1
    36cc:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__fp_szero>
    36d0:	08 95       	ret

000036d2 <__fixunssfsi>:
    36d2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__fp_splitA>
    36d6:	88 f0       	brcs	.+34     	; 0x36fa <__fixunssfsi+0x28>
    36d8:	9f 57       	subi	r25, 0x7F	; 127
    36da:	98 f0       	brcs	.+38     	; 0x3702 <__fixunssfsi+0x30>
    36dc:	b9 2f       	mov	r27, r25
    36de:	99 27       	eor	r25, r25
    36e0:	b7 51       	subi	r27, 0x17	; 23
    36e2:	b0 f0       	brcs	.+44     	; 0x3710 <__fixunssfsi+0x3e>
    36e4:	e1 f0       	breq	.+56     	; 0x371e <__fixunssfsi+0x4c>
    36e6:	66 0f       	add	r22, r22
    36e8:	77 1f       	adc	r23, r23
    36ea:	88 1f       	adc	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	1a f0       	brmi	.+6      	; 0x36f6 <__fixunssfsi+0x24>
    36f0:	ba 95       	dec	r27
    36f2:	c9 f7       	brne	.-14     	; 0x36e6 <__fixunssfsi+0x14>
    36f4:	14 c0       	rjmp	.+40     	; 0x371e <__fixunssfsi+0x4c>
    36f6:	b1 30       	cpi	r27, 0x01	; 1
    36f8:	91 f0       	breq	.+36     	; 0x371e <__fixunssfsi+0x4c>
    36fa:	0e 94 82 1c 	call	0x3904	; 0x3904 <__fp_zero>
    36fe:	b1 e0       	ldi	r27, 0x01	; 1
    3700:	08 95       	ret
    3702:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__fp_zero>
    3706:	67 2f       	mov	r22, r23
    3708:	78 2f       	mov	r23, r24
    370a:	88 27       	eor	r24, r24
    370c:	b8 5f       	subi	r27, 0xF8	; 248
    370e:	39 f0       	breq	.+14     	; 0x371e <__fixunssfsi+0x4c>
    3710:	b9 3f       	cpi	r27, 0xF9	; 249
    3712:	cc f3       	brlt	.-14     	; 0x3706 <__fixunssfsi+0x34>
    3714:	86 95       	lsr	r24
    3716:	77 95       	ror	r23
    3718:	67 95       	ror	r22
    371a:	b3 95       	inc	r27
    371c:	d9 f7       	brne	.-10     	; 0x3714 <__fixunssfsi+0x42>
    371e:	3e f4       	brtc	.+14     	; 0x372e <__fixunssfsi+0x5c>
    3720:	90 95       	com	r25
    3722:	80 95       	com	r24
    3724:	70 95       	com	r23
    3726:	61 95       	neg	r22
    3728:	7f 4f       	sbci	r23, 0xFF	; 255
    372a:	8f 4f       	sbci	r24, 0xFF	; 255
    372c:	9f 4f       	sbci	r25, 0xFF	; 255
    372e:	08 95       	ret

00003730 <__floatunsisf>:
    3730:	e8 94       	clt
    3732:	09 c0       	rjmp	.+18     	; 0x3746 <__floatsisf+0x12>

00003734 <__floatsisf>:
    3734:	97 fb       	bst	r25, 7
    3736:	3e f4       	brtc	.+14     	; 0x3746 <__floatsisf+0x12>
    3738:	90 95       	com	r25
    373a:	80 95       	com	r24
    373c:	70 95       	com	r23
    373e:	61 95       	neg	r22
    3740:	7f 4f       	sbci	r23, 0xFF	; 255
    3742:	8f 4f       	sbci	r24, 0xFF	; 255
    3744:	9f 4f       	sbci	r25, 0xFF	; 255
    3746:	99 23       	and	r25, r25
    3748:	a9 f0       	breq	.+42     	; 0x3774 <__floatsisf+0x40>
    374a:	f9 2f       	mov	r31, r25
    374c:	96 e9       	ldi	r25, 0x96	; 150
    374e:	bb 27       	eor	r27, r27
    3750:	93 95       	inc	r25
    3752:	f6 95       	lsr	r31
    3754:	87 95       	ror	r24
    3756:	77 95       	ror	r23
    3758:	67 95       	ror	r22
    375a:	b7 95       	ror	r27
    375c:	f1 11       	cpse	r31, r1
    375e:	f8 cf       	rjmp	.-16     	; 0x3750 <__floatsisf+0x1c>
    3760:	fa f4       	brpl	.+62     	; 0x37a0 <__floatsisf+0x6c>
    3762:	bb 0f       	add	r27, r27
    3764:	11 f4       	brne	.+4      	; 0x376a <__floatsisf+0x36>
    3766:	60 ff       	sbrs	r22, 0
    3768:	1b c0       	rjmp	.+54     	; 0x37a0 <__floatsisf+0x6c>
    376a:	6f 5f       	subi	r22, 0xFF	; 255
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	8f 4f       	sbci	r24, 0xFF	; 255
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	16 c0       	rjmp	.+44     	; 0x37a0 <__floatsisf+0x6c>
    3774:	88 23       	and	r24, r24
    3776:	11 f0       	breq	.+4      	; 0x377c <__floatsisf+0x48>
    3778:	96 e9       	ldi	r25, 0x96	; 150
    377a:	11 c0       	rjmp	.+34     	; 0x379e <__floatsisf+0x6a>
    377c:	77 23       	and	r23, r23
    377e:	21 f0       	breq	.+8      	; 0x3788 <__floatsisf+0x54>
    3780:	9e e8       	ldi	r25, 0x8E	; 142
    3782:	87 2f       	mov	r24, r23
    3784:	76 2f       	mov	r23, r22
    3786:	05 c0       	rjmp	.+10     	; 0x3792 <__floatsisf+0x5e>
    3788:	66 23       	and	r22, r22
    378a:	71 f0       	breq	.+28     	; 0x37a8 <__floatsisf+0x74>
    378c:	96 e8       	ldi	r25, 0x86	; 134
    378e:	86 2f       	mov	r24, r22
    3790:	70 e0       	ldi	r23, 0x00	; 0
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	2a f0       	brmi	.+10     	; 0x37a0 <__floatsisf+0x6c>
    3796:	9a 95       	dec	r25
    3798:	66 0f       	add	r22, r22
    379a:	77 1f       	adc	r23, r23
    379c:	88 1f       	adc	r24, r24
    379e:	da f7       	brpl	.-10     	; 0x3796 <__floatsisf+0x62>
    37a0:	88 0f       	add	r24, r24
    37a2:	96 95       	lsr	r25
    37a4:	87 95       	ror	r24
    37a6:	97 f9       	bld	r25, 7
    37a8:	08 95       	ret

000037aa <__fp_cmp>:
    37aa:	99 0f       	add	r25, r25
    37ac:	00 08       	sbc	r0, r0
    37ae:	55 0f       	add	r21, r21
    37b0:	aa 0b       	sbc	r26, r26
    37b2:	e0 e8       	ldi	r30, 0x80	; 128
    37b4:	fe ef       	ldi	r31, 0xFE	; 254
    37b6:	16 16       	cp	r1, r22
    37b8:	17 06       	cpc	r1, r23
    37ba:	e8 07       	cpc	r30, r24
    37bc:	f9 07       	cpc	r31, r25
    37be:	c0 f0       	brcs	.+48     	; 0x37f0 <__fp_cmp+0x46>
    37c0:	12 16       	cp	r1, r18
    37c2:	13 06       	cpc	r1, r19
    37c4:	e4 07       	cpc	r30, r20
    37c6:	f5 07       	cpc	r31, r21
    37c8:	98 f0       	brcs	.+38     	; 0x37f0 <__fp_cmp+0x46>
    37ca:	62 1b       	sub	r22, r18
    37cc:	73 0b       	sbc	r23, r19
    37ce:	84 0b       	sbc	r24, r20
    37d0:	95 0b       	sbc	r25, r21
    37d2:	39 f4       	brne	.+14     	; 0x37e2 <__fp_cmp+0x38>
    37d4:	0a 26       	eor	r0, r26
    37d6:	61 f0       	breq	.+24     	; 0x37f0 <__fp_cmp+0x46>
    37d8:	23 2b       	or	r18, r19
    37da:	24 2b       	or	r18, r20
    37dc:	25 2b       	or	r18, r21
    37de:	21 f4       	brne	.+8      	; 0x37e8 <__fp_cmp+0x3e>
    37e0:	08 95       	ret
    37e2:	0a 26       	eor	r0, r26
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <__fp_cmp+0x3e>
    37e6:	a1 40       	sbci	r26, 0x01	; 1
    37e8:	a6 95       	lsr	r26
    37ea:	8f ef       	ldi	r24, 0xFF	; 255
    37ec:	81 1d       	adc	r24, r1
    37ee:	81 1d       	adc	r24, r1
    37f0:	08 95       	ret

000037f2 <__fp_inf>:
    37f2:	97 f9       	bld	r25, 7
    37f4:	9f 67       	ori	r25, 0x7F	; 127
    37f6:	80 e8       	ldi	r24, 0x80	; 128
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	08 95       	ret

000037fe <__fp_nan>:
    37fe:	9f ef       	ldi	r25, 0xFF	; 255
    3800:	80 ec       	ldi	r24, 0xC0	; 192
    3802:	08 95       	ret

00003804 <__fp_pscA>:
    3804:	00 24       	eor	r0, r0
    3806:	0a 94       	dec	r0
    3808:	16 16       	cp	r1, r22
    380a:	17 06       	cpc	r1, r23
    380c:	18 06       	cpc	r1, r24
    380e:	09 06       	cpc	r0, r25
    3810:	08 95       	ret

00003812 <__fp_pscB>:
    3812:	00 24       	eor	r0, r0
    3814:	0a 94       	dec	r0
    3816:	12 16       	cp	r1, r18
    3818:	13 06       	cpc	r1, r19
    381a:	14 06       	cpc	r1, r20
    381c:	05 06       	cpc	r0, r21
    381e:	08 95       	ret
    3820:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <__fp_nan>

00003824 <__fp_rempio2>:
    3824:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__fp_splitA>
    3828:	d8 f3       	brcs	.-10     	; 0x3820 <__fp_pscB+0xe>
    382a:	e8 94       	clt
    382c:	e0 e0       	ldi	r30, 0x00	; 0
    382e:	bb 27       	eor	r27, r27
    3830:	9f 57       	subi	r25, 0x7F	; 127
    3832:	f0 f0       	brcs	.+60     	; 0x3870 <__fp_rempio2+0x4c>
    3834:	2a ed       	ldi	r18, 0xDA	; 218
    3836:	3f e0       	ldi	r19, 0x0F	; 15
    3838:	49 ec       	ldi	r20, 0xC9	; 201
    383a:	06 c0       	rjmp	.+12     	; 0x3848 <__fp_rempio2+0x24>
    383c:	ee 0f       	add	r30, r30
    383e:	bb 0f       	add	r27, r27
    3840:	66 1f       	adc	r22, r22
    3842:	77 1f       	adc	r23, r23
    3844:	88 1f       	adc	r24, r24
    3846:	28 f0       	brcs	.+10     	; 0x3852 <__fp_rempio2+0x2e>
    3848:	b2 3a       	cpi	r27, 0xA2	; 162
    384a:	62 07       	cpc	r22, r18
    384c:	73 07       	cpc	r23, r19
    384e:	84 07       	cpc	r24, r20
    3850:	28 f0       	brcs	.+10     	; 0x385c <__fp_rempio2+0x38>
    3852:	b2 5a       	subi	r27, 0xA2	; 162
    3854:	62 0b       	sbc	r22, r18
    3856:	73 0b       	sbc	r23, r19
    3858:	84 0b       	sbc	r24, r20
    385a:	e3 95       	inc	r30
    385c:	9a 95       	dec	r25
    385e:	72 f7       	brpl	.-36     	; 0x383c <__fp_rempio2+0x18>
    3860:	80 38       	cpi	r24, 0x80	; 128
    3862:	30 f4       	brcc	.+12     	; 0x3870 <__fp_rempio2+0x4c>
    3864:	9a 95       	dec	r25
    3866:	bb 0f       	add	r27, r27
    3868:	66 1f       	adc	r22, r22
    386a:	77 1f       	adc	r23, r23
    386c:	88 1f       	adc	r24, r24
    386e:	d2 f7       	brpl	.-12     	; 0x3864 <__fp_rempio2+0x40>
    3870:	90 48       	sbci	r25, 0x80	; 128
    3872:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__fp_mpack_finite>

00003876 <__fp_round>:
    3876:	09 2e       	mov	r0, r25
    3878:	03 94       	inc	r0
    387a:	00 0c       	add	r0, r0
    387c:	11 f4       	brne	.+4      	; 0x3882 <__fp_round+0xc>
    387e:	88 23       	and	r24, r24
    3880:	52 f0       	brmi	.+20     	; 0x3896 <__fp_round+0x20>
    3882:	bb 0f       	add	r27, r27
    3884:	40 f4       	brcc	.+16     	; 0x3896 <__fp_round+0x20>
    3886:	bf 2b       	or	r27, r31
    3888:	11 f4       	brne	.+4      	; 0x388e <__fp_round+0x18>
    388a:	60 ff       	sbrs	r22, 0
    388c:	04 c0       	rjmp	.+8      	; 0x3896 <__fp_round+0x20>
    388e:	6f 5f       	subi	r22, 0xFF	; 255
    3890:	7f 4f       	sbci	r23, 0xFF	; 255
    3892:	8f 4f       	sbci	r24, 0xFF	; 255
    3894:	9f 4f       	sbci	r25, 0xFF	; 255
    3896:	08 95       	ret

00003898 <__fp_sinus>:
    3898:	ef 93       	push	r30
    389a:	e0 ff       	sbrs	r30, 0
    389c:	07 c0       	rjmp	.+14     	; 0x38ac <__fp_sinus+0x14>
    389e:	a2 ea       	ldi	r26, 0xA2	; 162
    38a0:	2a ed       	ldi	r18, 0xDA	; 218
    38a2:	3f e0       	ldi	r19, 0x0F	; 15
    38a4:	49 ec       	ldi	r20, 0xC9	; 201
    38a6:	5f eb       	ldi	r21, 0xBF	; 191
    38a8:	0e 94 91 1a 	call	0x3522	; 0x3522 <__addsf3x>
    38ac:	0e 94 3b 1c 	call	0x3876	; 0x3876 <__fp_round>
    38b0:	0f 90       	pop	r0
    38b2:	03 94       	inc	r0
    38b4:	01 fc       	sbrc	r0, 1
    38b6:	90 58       	subi	r25, 0x80	; 128
    38b8:	e4 e5       	ldi	r30, 0x54	; 84
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__fp_powsodd>

000038c0 <__fp_split3>:
    38c0:	57 fd       	sbrc	r21, 7
    38c2:	90 58       	subi	r25, 0x80	; 128
    38c4:	44 0f       	add	r20, r20
    38c6:	55 1f       	adc	r21, r21
    38c8:	59 f0       	breq	.+22     	; 0x38e0 <__fp_splitA+0x10>
    38ca:	5f 3f       	cpi	r21, 0xFF	; 255
    38cc:	71 f0       	breq	.+28     	; 0x38ea <__fp_splitA+0x1a>
    38ce:	47 95       	ror	r20

000038d0 <__fp_splitA>:
    38d0:	88 0f       	add	r24, r24
    38d2:	97 fb       	bst	r25, 7
    38d4:	99 1f       	adc	r25, r25
    38d6:	61 f0       	breq	.+24     	; 0x38f0 <__fp_splitA+0x20>
    38d8:	9f 3f       	cpi	r25, 0xFF	; 255
    38da:	79 f0       	breq	.+30     	; 0x38fa <__fp_splitA+0x2a>
    38dc:	87 95       	ror	r24
    38de:	08 95       	ret
    38e0:	12 16       	cp	r1, r18
    38e2:	13 06       	cpc	r1, r19
    38e4:	14 06       	cpc	r1, r20
    38e6:	55 1f       	adc	r21, r21
    38e8:	f2 cf       	rjmp	.-28     	; 0x38ce <__fp_split3+0xe>
    38ea:	46 95       	lsr	r20
    38ec:	f1 df       	rcall	.-30     	; 0x38d0 <__fp_splitA>
    38ee:	08 c0       	rjmp	.+16     	; 0x3900 <__fp_splitA+0x30>
    38f0:	16 16       	cp	r1, r22
    38f2:	17 06       	cpc	r1, r23
    38f4:	18 06       	cpc	r1, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	f1 cf       	rjmp	.-30     	; 0x38dc <__fp_splitA+0xc>
    38fa:	86 95       	lsr	r24
    38fc:	71 05       	cpc	r23, r1
    38fe:	61 05       	cpc	r22, r1
    3900:	08 94       	sec
    3902:	08 95       	ret

00003904 <__fp_zero>:
    3904:	e8 94       	clt

00003906 <__fp_szero>:
    3906:	bb 27       	eor	r27, r27
    3908:	66 27       	eor	r22, r22
    390a:	77 27       	eor	r23, r23
    390c:	cb 01       	movw	r24, r22
    390e:	97 f9       	bld	r25, 7
    3910:	08 95       	ret

00003912 <__gesf2>:
    3912:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__fp_cmp>
    3916:	08 f4       	brcc	.+2      	; 0x391a <__gesf2+0x8>
    3918:	8f ef       	ldi	r24, 0xFF	; 255
    391a:	08 95       	ret

0000391c <__mulsf3>:
    391c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__mulsf3x>
    3920:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__fp_round>
    3924:	0e 94 02 1c 	call	0x3804	; 0x3804 <__fp_pscA>
    3928:	38 f0       	brcs	.+14     	; 0x3938 <__mulsf3+0x1c>
    392a:	0e 94 09 1c 	call	0x3812	; 0x3812 <__fp_pscB>
    392e:	20 f0       	brcs	.+8      	; 0x3938 <__mulsf3+0x1c>
    3930:	95 23       	and	r25, r21
    3932:	11 f0       	breq	.+4      	; 0x3938 <__mulsf3+0x1c>
    3934:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__fp_inf>
    3938:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <__fp_nan>
    393c:	11 24       	eor	r1, r1
    393e:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__fp_szero>

00003942 <__mulsf3x>:
    3942:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__fp_split3>
    3946:	70 f3       	brcs	.-36     	; 0x3924 <__mulsf3+0x8>

00003948 <__mulsf3_pse>:
    3948:	95 9f       	mul	r25, r21
    394a:	c1 f3       	breq	.-16     	; 0x393c <__mulsf3+0x20>
    394c:	95 0f       	add	r25, r21
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	55 1f       	adc	r21, r21
    3952:	62 9f       	mul	r22, r18
    3954:	f0 01       	movw	r30, r0
    3956:	72 9f       	mul	r23, r18
    3958:	bb 27       	eor	r27, r27
    395a:	f0 0d       	add	r31, r0
    395c:	b1 1d       	adc	r27, r1
    395e:	63 9f       	mul	r22, r19
    3960:	aa 27       	eor	r26, r26
    3962:	f0 0d       	add	r31, r0
    3964:	b1 1d       	adc	r27, r1
    3966:	aa 1f       	adc	r26, r26
    3968:	64 9f       	mul	r22, r20
    396a:	66 27       	eor	r22, r22
    396c:	b0 0d       	add	r27, r0
    396e:	a1 1d       	adc	r26, r1
    3970:	66 1f       	adc	r22, r22
    3972:	82 9f       	mul	r24, r18
    3974:	22 27       	eor	r18, r18
    3976:	b0 0d       	add	r27, r0
    3978:	a1 1d       	adc	r26, r1
    397a:	62 1f       	adc	r22, r18
    397c:	73 9f       	mul	r23, r19
    397e:	b0 0d       	add	r27, r0
    3980:	a1 1d       	adc	r26, r1
    3982:	62 1f       	adc	r22, r18
    3984:	83 9f       	mul	r24, r19
    3986:	a0 0d       	add	r26, r0
    3988:	61 1d       	adc	r22, r1
    398a:	22 1f       	adc	r18, r18
    398c:	74 9f       	mul	r23, r20
    398e:	33 27       	eor	r19, r19
    3990:	a0 0d       	add	r26, r0
    3992:	61 1d       	adc	r22, r1
    3994:	23 1f       	adc	r18, r19
    3996:	84 9f       	mul	r24, r20
    3998:	60 0d       	add	r22, r0
    399a:	21 1d       	adc	r18, r1
    399c:	82 2f       	mov	r24, r18
    399e:	76 2f       	mov	r23, r22
    39a0:	6a 2f       	mov	r22, r26
    39a2:	11 24       	eor	r1, r1
    39a4:	9f 57       	subi	r25, 0x7F	; 127
    39a6:	50 40       	sbci	r21, 0x00	; 0
    39a8:	9a f0       	brmi	.+38     	; 0x39d0 <__mulsf3_pse+0x88>
    39aa:	f1 f0       	breq	.+60     	; 0x39e8 <__mulsf3_pse+0xa0>
    39ac:	88 23       	and	r24, r24
    39ae:	4a f0       	brmi	.+18     	; 0x39c2 <__mulsf3_pse+0x7a>
    39b0:	ee 0f       	add	r30, r30
    39b2:	ff 1f       	adc	r31, r31
    39b4:	bb 1f       	adc	r27, r27
    39b6:	66 1f       	adc	r22, r22
    39b8:	77 1f       	adc	r23, r23
    39ba:	88 1f       	adc	r24, r24
    39bc:	91 50       	subi	r25, 0x01	; 1
    39be:	50 40       	sbci	r21, 0x00	; 0
    39c0:	a9 f7       	brne	.-22     	; 0x39ac <__mulsf3_pse+0x64>
    39c2:	9e 3f       	cpi	r25, 0xFE	; 254
    39c4:	51 05       	cpc	r21, r1
    39c6:	80 f0       	brcs	.+32     	; 0x39e8 <__mulsf3_pse+0xa0>
    39c8:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__fp_inf>
    39cc:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__fp_szero>
    39d0:	5f 3f       	cpi	r21, 0xFF	; 255
    39d2:	e4 f3       	brlt	.-8      	; 0x39cc <__mulsf3_pse+0x84>
    39d4:	98 3e       	cpi	r25, 0xE8	; 232
    39d6:	d4 f3       	brlt	.-12     	; 0x39cc <__mulsf3_pse+0x84>
    39d8:	86 95       	lsr	r24
    39da:	77 95       	ror	r23
    39dc:	67 95       	ror	r22
    39de:	b7 95       	ror	r27
    39e0:	f7 95       	ror	r31
    39e2:	e7 95       	ror	r30
    39e4:	9f 5f       	subi	r25, 0xFF	; 255
    39e6:	c1 f7       	brne	.-16     	; 0x39d8 <__mulsf3_pse+0x90>
    39e8:	fe 2b       	or	r31, r30
    39ea:	88 0f       	add	r24, r24
    39ec:	91 1d       	adc	r25, r1
    39ee:	96 95       	lsr	r25
    39f0:	87 95       	ror	r24
    39f2:	97 f9       	bld	r25, 7
    39f4:	08 95       	ret

000039f6 <sin>:
    39f6:	9f 93       	push	r25
    39f8:	0e 94 12 1c 	call	0x3824	; 0x3824 <__fp_rempio2>
    39fc:	0f 90       	pop	r0
    39fe:	07 fc       	sbrc	r0, 7
    3a00:	ee 5f       	subi	r30, 0xFE	; 254
    3a02:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__fp_sinus>

00003a06 <__fp_mpack>:
    3a06:	9f 3f       	cpi	r25, 0xFF	; 255
    3a08:	31 f0       	breq	.+12     	; 0x3a16 <__fp_mpack_finite+0xc>

00003a0a <__fp_mpack_finite>:
    3a0a:	91 50       	subi	r25, 0x01	; 1
    3a0c:	20 f4       	brcc	.+8      	; 0x3a16 <__fp_mpack_finite+0xc>
    3a0e:	87 95       	ror	r24
    3a10:	77 95       	ror	r23
    3a12:	67 95       	ror	r22
    3a14:	b7 95       	ror	r27
    3a16:	88 0f       	add	r24, r24
    3a18:	91 1d       	adc	r25, r1
    3a1a:	96 95       	lsr	r25
    3a1c:	87 95       	ror	r24
    3a1e:	97 f9       	bld	r25, 7
    3a20:	08 95       	ret

00003a22 <__fp_powsodd>:
    3a22:	9f 93       	push	r25
    3a24:	8f 93       	push	r24
    3a26:	7f 93       	push	r23
    3a28:	6f 93       	push	r22
    3a2a:	ff 93       	push	r31
    3a2c:	ef 93       	push	r30
    3a2e:	9b 01       	movw	r18, r22
    3a30:	ac 01       	movw	r20, r24
    3a32:	0e 94 8e 1c 	call	0x391c	; 0x391c <__mulsf3>
    3a36:	ef 91       	pop	r30
    3a38:	ff 91       	pop	r31
    3a3a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__fp_powser>
    3a3e:	2f 91       	pop	r18
    3a40:	3f 91       	pop	r19
    3a42:	4f 91       	pop	r20
    3a44:	5f 91       	pop	r21
    3a46:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__mulsf3>

00003a4a <__fp_powser>:
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	1f 93       	push	r17
    3a50:	0f 93       	push	r16
    3a52:	ff 92       	push	r15
    3a54:	ef 92       	push	r14
    3a56:	df 92       	push	r13
    3a58:	7b 01       	movw	r14, r22
    3a5a:	8c 01       	movw	r16, r24
    3a5c:	68 94       	set
    3a5e:	06 c0       	rjmp	.+12     	; 0x3a6c <__fp_powser+0x22>
    3a60:	da 2e       	mov	r13, r26
    3a62:	ef 01       	movw	r28, r30
    3a64:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__mulsf3x>
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e8 94       	clt
    3a6c:	a5 91       	lpm	r26, Z+
    3a6e:	25 91       	lpm	r18, Z+
    3a70:	35 91       	lpm	r19, Z+
    3a72:	45 91       	lpm	r20, Z+
    3a74:	55 91       	lpm	r21, Z+
    3a76:	a6 f3       	brts	.-24     	; 0x3a60 <__fp_powser+0x16>
    3a78:	ef 01       	movw	r28, r30
    3a7a:	0e 94 91 1a 	call	0x3522	; 0x3522 <__addsf3x>
    3a7e:	fe 01       	movw	r30, r28
    3a80:	97 01       	movw	r18, r14
    3a82:	a8 01       	movw	r20, r16
    3a84:	da 94       	dec	r13
    3a86:	69 f7       	brne	.-38     	; 0x3a62 <__fp_powser+0x18>
    3a88:	df 90       	pop	r13
    3a8a:	ef 90       	pop	r14
    3a8c:	ff 90       	pop	r15
    3a8e:	0f 91       	pop	r16
    3a90:	1f 91       	pop	r17
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <__mulsi3>:
    3a98:	db 01       	movw	r26, r22
    3a9a:	8f 93       	push	r24
    3a9c:	9f 93       	push	r25
    3a9e:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__muluhisi3>
    3aa2:	bf 91       	pop	r27
    3aa4:	af 91       	pop	r26
    3aa6:	a2 9f       	mul	r26, r18
    3aa8:	80 0d       	add	r24, r0
    3aaa:	91 1d       	adc	r25, r1
    3aac:	a3 9f       	mul	r26, r19
    3aae:	90 0d       	add	r25, r0
    3ab0:	b2 9f       	mul	r27, r18
    3ab2:	90 0d       	add	r25, r0
    3ab4:	11 24       	eor	r1, r1
    3ab6:	08 95       	ret

00003ab8 <__udivmodsi4>:
    3ab8:	a1 e2       	ldi	r26, 0x21	; 33
    3aba:	1a 2e       	mov	r1, r26
    3abc:	aa 1b       	sub	r26, r26
    3abe:	bb 1b       	sub	r27, r27
    3ac0:	fd 01       	movw	r30, r26
    3ac2:	0d c0       	rjmp	.+26     	; 0x3ade <__udivmodsi4_ep>

00003ac4 <__udivmodsi4_loop>:
    3ac4:	aa 1f       	adc	r26, r26
    3ac6:	bb 1f       	adc	r27, r27
    3ac8:	ee 1f       	adc	r30, r30
    3aca:	ff 1f       	adc	r31, r31
    3acc:	a2 17       	cp	r26, r18
    3ace:	b3 07       	cpc	r27, r19
    3ad0:	e4 07       	cpc	r30, r20
    3ad2:	f5 07       	cpc	r31, r21
    3ad4:	20 f0       	brcs	.+8      	; 0x3ade <__udivmodsi4_ep>
    3ad6:	a2 1b       	sub	r26, r18
    3ad8:	b3 0b       	sbc	r27, r19
    3ada:	e4 0b       	sbc	r30, r20
    3adc:	f5 0b       	sbc	r31, r21

00003ade <__udivmodsi4_ep>:
    3ade:	66 1f       	adc	r22, r22
    3ae0:	77 1f       	adc	r23, r23
    3ae2:	88 1f       	adc	r24, r24
    3ae4:	99 1f       	adc	r25, r25
    3ae6:	1a 94       	dec	r1
    3ae8:	69 f7       	brne	.-38     	; 0x3ac4 <__udivmodsi4_loop>
    3aea:	60 95       	com	r22
    3aec:	70 95       	com	r23
    3aee:	80 95       	com	r24
    3af0:	90 95       	com	r25
    3af2:	9b 01       	movw	r18, r22
    3af4:	ac 01       	movw	r20, r24
    3af6:	bd 01       	movw	r22, r26
    3af8:	cf 01       	movw	r24, r30
    3afa:	08 95       	ret

00003afc <__divmodsi4>:
    3afc:	05 2e       	mov	r0, r21
    3afe:	97 fb       	bst	r25, 7
    3b00:	1e f4       	brtc	.+6      	; 0x3b08 <__divmodsi4+0xc>
    3b02:	00 94       	com	r0
    3b04:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__negsi2>
    3b08:	57 fd       	sbrc	r21, 7
    3b0a:	07 d0       	rcall	.+14     	; 0x3b1a <__divmodsi4_neg2>
    3b0c:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__udivmodsi4>
    3b10:	07 fc       	sbrc	r0, 7
    3b12:	03 d0       	rcall	.+6      	; 0x3b1a <__divmodsi4_neg2>
    3b14:	4e f4       	brtc	.+18     	; 0x3b28 <__divmodsi4_exit>
    3b16:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__negsi2>

00003b1a <__divmodsi4_neg2>:
    3b1a:	50 95       	com	r21
    3b1c:	40 95       	com	r20
    3b1e:	30 95       	com	r19
    3b20:	21 95       	neg	r18
    3b22:	3f 4f       	sbci	r19, 0xFF	; 255
    3b24:	4f 4f       	sbci	r20, 0xFF	; 255
    3b26:	5f 4f       	sbci	r21, 0xFF	; 255

00003b28 <__divmodsi4_exit>:
    3b28:	08 95       	ret

00003b2a <__negsi2>:
    3b2a:	90 95       	com	r25
    3b2c:	80 95       	com	r24
    3b2e:	70 95       	com	r23
    3b30:	61 95       	neg	r22
    3b32:	7f 4f       	sbci	r23, 0xFF	; 255
    3b34:	8f 4f       	sbci	r24, 0xFF	; 255
    3b36:	9f 4f       	sbci	r25, 0xFF	; 255
    3b38:	08 95       	ret

00003b3a <__muluhisi3>:
    3b3a:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__umulhisi3>
    3b3e:	a5 9f       	mul	r26, r21
    3b40:	90 0d       	add	r25, r0
    3b42:	b4 9f       	mul	r27, r20
    3b44:	90 0d       	add	r25, r0
    3b46:	a4 9f       	mul	r26, r20
    3b48:	80 0d       	add	r24, r0
    3b4a:	91 1d       	adc	r25, r1
    3b4c:	11 24       	eor	r1, r1
    3b4e:	08 95       	ret

00003b50 <__tablejump2__>:
    3b50:	ee 0f       	add	r30, r30
    3b52:	ff 1f       	adc	r31, r31
    3b54:	05 90       	lpm	r0, Z+
    3b56:	f4 91       	lpm	r31, Z
    3b58:	e0 2d       	mov	r30, r0
    3b5a:	09 94       	ijmp

00003b5c <__umulhisi3>:
    3b5c:	a2 9f       	mul	r26, r18
    3b5e:	b0 01       	movw	r22, r0
    3b60:	b3 9f       	mul	r27, r19
    3b62:	c0 01       	movw	r24, r0
    3b64:	a3 9f       	mul	r26, r19
    3b66:	70 0d       	add	r23, r0
    3b68:	81 1d       	adc	r24, r1
    3b6a:	11 24       	eor	r1, r1
    3b6c:	91 1d       	adc	r25, r1
    3b6e:	b2 9f       	mul	r27, r18
    3b70:	70 0d       	add	r23, r0
    3b72:	81 1d       	adc	r24, r1
    3b74:	11 24       	eor	r1, r1
    3b76:	91 1d       	adc	r25, r1
    3b78:	08 95       	ret

00003b7a <do_rand>:
    3b7a:	8f 92       	push	r8
    3b7c:	9f 92       	push	r9
    3b7e:	af 92       	push	r10
    3b80:	bf 92       	push	r11
    3b82:	cf 92       	push	r12
    3b84:	df 92       	push	r13
    3b86:	ef 92       	push	r14
    3b88:	ff 92       	push	r15
    3b8a:	cf 93       	push	r28
    3b8c:	df 93       	push	r29
    3b8e:	ec 01       	movw	r28, r24
    3b90:	68 81       	ld	r22, Y
    3b92:	79 81       	ldd	r23, Y+1	; 0x01
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	9b 81       	ldd	r25, Y+3	; 0x03
    3b98:	61 15       	cp	r22, r1
    3b9a:	71 05       	cpc	r23, r1
    3b9c:	81 05       	cpc	r24, r1
    3b9e:	91 05       	cpc	r25, r1
    3ba0:	21 f4       	brne	.+8      	; 0x3baa <do_rand+0x30>
    3ba2:	64 e2       	ldi	r22, 0x24	; 36
    3ba4:	79 ed       	ldi	r23, 0xD9	; 217
    3ba6:	8b e5       	ldi	r24, 0x5B	; 91
    3ba8:	97 e0       	ldi	r25, 0x07	; 7
    3baa:	2d e1       	ldi	r18, 0x1D	; 29
    3bac:	33 ef       	ldi	r19, 0xF3	; 243
    3bae:	41 e0       	ldi	r20, 0x01	; 1
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__divmodsi4>
    3bb6:	49 01       	movw	r8, r18
    3bb8:	5a 01       	movw	r10, r20
    3bba:	9b 01       	movw	r18, r22
    3bbc:	ac 01       	movw	r20, r24
    3bbe:	a7 ea       	ldi	r26, 0xA7	; 167
    3bc0:	b1 e4       	ldi	r27, 0x41	; 65
    3bc2:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__muluhisi3>
    3bc6:	6b 01       	movw	r12, r22
    3bc8:	7c 01       	movw	r14, r24
    3bca:	ac ee       	ldi	r26, 0xEC	; 236
    3bcc:	b4 ef       	ldi	r27, 0xF4	; 244
    3bce:	a5 01       	movw	r20, r10
    3bd0:	94 01       	movw	r18, r8
    3bd2:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__mulohisi3>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	8c 0d       	add	r24, r12
    3bdc:	9d 1d       	adc	r25, r13
    3bde:	ae 1d       	adc	r26, r14
    3be0:	bf 1d       	adc	r27, r15
    3be2:	b7 ff       	sbrs	r27, 7
    3be4:	03 c0       	rjmp	.+6      	; 0x3bec <do_rand+0x72>
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	a1 09       	sbc	r26, r1
    3bea:	b0 48       	sbci	r27, 0x80	; 128
    3bec:	88 83       	st	Y, r24
    3bee:	99 83       	std	Y+1, r25	; 0x01
    3bf0:	aa 83       	std	Y+2, r26	; 0x02
    3bf2:	bb 83       	std	Y+3, r27	; 0x03
    3bf4:	9f 77       	andi	r25, 0x7F	; 127
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	cf 90       	pop	r12
    3c02:	bf 90       	pop	r11
    3c04:	af 90       	pop	r10
    3c06:	9f 90       	pop	r9
    3c08:	8f 90       	pop	r8
    3c0a:	08 95       	ret

00003c0c <rand_r>:
    3c0c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <do_rand>
    3c10:	08 95       	ret

00003c12 <rand>:
    3c12:	80 e6       	ldi	r24, 0x60	; 96
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <do_rand>
    3c1a:	08 95       	ret

00003c1c <srand>:
    3c1c:	a0 e0       	ldi	r26, 0x00	; 0
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	80 93 60 00 	sts	0x0060, r24
    3c24:	90 93 61 00 	sts	0x0061, r25
    3c28:	a0 93 62 00 	sts	0x0062, r26
    3c2c:	b0 93 63 00 	sts	0x0063, r27
    3c30:	08 95       	ret

00003c32 <strlen>:
    3c32:	fc 01       	movw	r30, r24
    3c34:	01 90       	ld	r0, Z+
    3c36:	00 20       	and	r0, r0
    3c38:	e9 f7       	brne	.-6      	; 0x3c34 <strlen+0x2>
    3c3a:	80 95       	com	r24
    3c3c:	90 95       	com	r25
    3c3e:	8e 0f       	add	r24, r30
    3c40:	9f 1f       	adc	r25, r31
    3c42:	08 95       	ret

00003c44 <__mulshisi3>:
    3c44:	b7 ff       	sbrs	r27, 7
    3c46:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <__muluhisi3>

00003c4a <__mulohisi3>:
    3c4a:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__muluhisi3>
    3c4e:	82 1b       	sub	r24, r18
    3c50:	93 0b       	sbc	r25, r19
    3c52:	08 95       	ret

00003c54 <_exit>:
    3c54:	f8 94       	cli

00003c56 <__stop_program>:
    3c56:	ff cf       	rjmp	.-2      	; 0x3c56 <__stop_program>
