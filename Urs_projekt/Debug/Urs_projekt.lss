
Urs_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002bb4  00002c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800072  00800072  00002c5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000068dc  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ddf  00000000  00000000  00009854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f58  00000000  00000000  0000a633  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a38  00000000  00000000  0000c58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9b  00000000  00000000  0000cfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000424d  00000000  00000000  0000dd5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00011fac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__ctors_end>
       4:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
       8:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
       c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      10:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      14:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      18:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      1c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      20:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      24:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      28:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      2c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      30:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      34:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      38:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      3c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      40:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      44:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      48:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      4c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      50:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__bad_interrupt>
      54:	f8 08       	sbc	r15, r8
      56:	05 09       	sbc	r16, r5
      58:	12 09       	sbc	r17, r2
      5a:	1f 09       	sbc	r17, r15
      5c:	2c 09       	sbc	r18, r12
      5e:	39 09       	sbc	r19, r9
      60:	46 09       	sbc	r20, r6
      62:	53 09       	sbc	r21, r3
      64:	60 09       	sbc	r22, r0
      66:	6d 09       	sbc	r22, r13
      68:	7a 09       	sbc	r23, r10
      6a:	87 09       	sbc	r24, r7
      6c:	94 09       	sbc	r25, r4
      6e:	a1 09       	sbc	r26, r1
      70:	ae 09       	sbc	r26, r14
      72:	bb 09       	sbc	r27, r11
      74:	05 a8       	ldd	r0, Z+53	; 0x35
      76:	4c cd       	rjmp	.-1384   	; 0xfffffb10 <__eeprom_end+0xff7efb10>
      78:	b2 d4       	rcall	.+2404   	; 0x9de <__stack+0x57f>
      7a:	4e b9       	out	0x0e, r20	; 14
      7c:	38 36       	cpi	r19, 0x68	; 104
      7e:	a9 02       	muls	r26, r25
      80:	0c 50       	subi	r16, 0x0C	; 12
      82:	b9 91       	ld	r27, Y+
      84:	86 88       	ldd	r8, Z+22	; 0x16
      86:	08 3c       	cpi	r16, 0xC8	; 200
      88:	a6 aa       	std	Z+54, r10	; 0x36
      8a:	aa 2a       	or	r10, r26
      8c:	be 00       	.word	0x00be	; ????
      8e:	00 00       	nop
      90:	80 3f       	cpi	r24, 0xF0	; 240

00000092 <BigFont>:
      92:	10 10 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
	...
      ba:	07 00 0f 80 0f 80 0f 80 0f 80 0f 80 07 00 07 00     ................
      ca:	00 00 00 00 07 00 07 00 07 00 00 00 00 00 0e 38     ...............8
      da:	0e 38 0e 38 0e 38 06 30 00 00 00 00 00 00 00 00     .8.8.8.0........
	...
      f6:	00 00 0c 30 0c 30 0c 30 7f fe 7f fe 0c 30 0c 30     ...0.0.0.....0.0
     106:	0c 30 0c 30 7f fe 7f fe 0c 30 0c 30 0c 30 00 00     .0.0.....0.0.0..
     116:	00 00 02 40 02 40 0f f8 1f f8 1a 40 1a 40 1f f0     ...@.@.....@.@..
     126:	0f f8 02 58 02 58 1f f8 1f f0 02 40 02 40 00 00     ...X.X.....@.@..
     136:	00 00 00 00 00 00 0e 10 0e 30 0e 70 00 e0 01 c0     .........0.p....
     146:	03 80 07 00 0e 70 0c 70 08 70 00 00 00 00 00 00     .....p.p.p......
     156:	00 00 00 00 0f 00 19 80 19 80 19 80 0f 00 0f 08     ................
     166:	0f 98 19 f8 18 f0 18 e0 19 f0 0f 98 00 00 00 00     ................
     176:	00 00 00 00 07 00 07 00 07 00 0e 00 00 00 00 00     ................
	...
     19a:	00 f0 01 c0 03 80 07 00 0e 00 0e 00 0e 00 0e 00     ................
     1aa:	07 00 03 80 01 c0 00 f0 00 00 00 00 00 00 00 00     ................
     1ba:	0f 00 03 80 01 c0 00 e0 00 70 00 70 00 70 00 70     .........p.p.p.p
     1ca:	00 e0 01 c0 03 80 0f 00 00 00 00 00 00 00 00 00     ................
     1da:	01 80 11 88 09 90 07 e0 07 e0 3f fc 3f fc 07 e0     ..........?.?...
     1ea:	07 e0 09 90 11 88 01 80 00 00 00 00 00 00 00 00     ................
     1fa:	00 00 00 00 01 80 01 80 01 80 0f f0 0f f0 01 80     ................
     20a:	01 80 01 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     22a:	00 00 07 00 07 00 07 00 0e 00 00 00 00 00 00 00     ................
	...
     242:	00 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
	...
     26a:	00 00 07 00 07 00 07 00 00 00 00 00 00 00 00 00     ................
     27a:	00 02 00 06 00 0e 00 1c 00 38 00 70 00 e0 01 c0     .........8.p....
     28a:	03 80 07 00 0e 00 1c 00 00 00 00 00 00 00 00 00     ................
     29a:	0f f0 1c 38 1c 78 1c f8 1c f8 1d b8 1d b8 1f 38     ...8.x.........8
     2aa:	1f 38 1e 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     2ba:	01 80 01 80 03 80 1f 80 1f 80 03 80 03 80 03 80     ................
     2ca:	03 80 03 80 03 80 1f f0 00 00 00 00 00 00 00 00     ................
     2da:	0f e0 1c 70 1c 38 00 38 00 70 00 e0 01 c0 03 80     ...p.8.8.p......
     2ea:	07 00 0e 38 1c 38 1f f8 00 00 00 00 00 00 00 00     ...8.8..........
     2fa:	0f e0 1c 70 1c 38 00 38 00 70 03 c0 03 c0 00 70     ...p.8.8.p.....p
     30a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     31a:	00 e0 01 e0 03 e0 06 e0 0c e0 18 e0 1f f8 1f f8     ................
     32a:	00 e0 00 e0 00 e0 03 f8 00 00 00 00 00 00 00 00     ................
     33a:	1f f8 1c 00 1c 00 1c 00 1c 00 1f e0 1f f0 00 78     ...............x
     34a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     35a:	03 e0 07 00 0e 00 1c 00 1c 00 1f f0 1f f8 1c 38     ...............8
     36a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     37a:	1f fc 1c 1c 1c 1c 1c 1c 00 1c 00 38 00 70 00 e0     ...........8.p..
     38a:	01 c0 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
     39a:	0f f0 1c 38 1c 38 1c 38 1f 38 07 e0 07 e0 1c f8     ...8.8.8.8......
     3aa:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     3ba:	0f f0 1c 38 1c 38 1c 38 1c 38 1f f8 0f f8 00 38     ...8.8.8.8.....8
     3ca:	00 38 00 70 00 e0 07 c0 00 00 00 00 00 00 00 00     .8.p............
     3da:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     3ea:	03 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3fa:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     40a:	03 80 03 80 07 00 00 00 00 00 00 00 00 00 00 70     ...............p
     41a:	00 e0 01 c0 03 80 07 00 0e 00 1c 00 1c 00 0e 00     ................
     42a:	07 00 03 80 01 c0 00 e0 00 70 00 00 00 00 00 00     .........p......
     43a:	00 00 00 00 00 00 3f fc 3f fc 00 00 00 00 3f fc     ......?.?.....?.
     44a:	3f fc 00 00 00 00 00 00 00 00 00 00 00 00 1c 00     ?...............
     45a:	0e 00 07 00 03 80 01 c0 00 e0 00 70 00 70 00 e0     ...........p.p..
     46a:	01 c0 03 80 07 00 0e 00 1c 00 00 00 00 00 03 c0     ................
     47a:	0f f0 1e 78 18 38 00 38 00 70 00 e0 01 c0 01 c0     ...x.8.8.p......
     48a:	00 00 00 00 01 c0 01 c0 01 c0 00 00 00 00 0f f8     ................
     49a:	1c 1c 1c 1c 1c 1c 1c 1c 1c fc 1c fc 1c fc 1c fc     ................
     4aa:	1c 00 1c 00 1c 00 1f f0 07 f8 00 00 00 00 00 00     ................
     4ba:	03 c0 07 e0 0e 70 1c 38 1c 38 1c 38 1c 38 1f f8     .....p.8.8.8.8..
     4ca:	1c 38 1c 38 1c 38 1c 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     4da:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 38     ...8.8.8.8.....8
     4ea:	0e 38 0e 38 0e 38 1f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     4fa:	07 f0 0e 38 1c 38 1c 00 1c 00 1c 00 1c 00 1c 00     ...8.8..........
     50a:	1c 00 1c 38 0e 38 07 f0 00 00 00 00 00 00 00 00     ...8.8..........
     51a:	1f e0 0e 70 0e 38 0e 38 0e 38 0e 38 0e 38 0e 38     ...p.8.8.8.8.8.8
     52a:	0e 38 0e 38 0e 70 1f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     53a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     54a:	0e 00 0e 08 0e 18 1f f8 00 00 00 00 00 00 00 00     ................
     55a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     56a:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     57a:	07 f0 0e 38 1c 38 1c 38 1c 00 1c 00 1c 00 1c f8     ...8.8.8........
     58a:	1c 38 1c 38 0e 38 07 f8 00 00 00 00 00 00 00 00     .8.8.8..........
     59a:	1c 70 1c 70 1c 70 1c 70 1c 70 1f f0 1f f0 1c 70     .p.p.p.p.p.....p
     5aa:	1c 70 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     .p.p.p.p........
     5ba:	0f e0 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     5ca:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     5da:	01 fc 00 70 00 70 00 70 00 70 00 70 00 70 38 70     ...p.p.p.p.p.p8p
     5ea:	38 70 38 70 38 70 0f e0 00 00 00 00 00 00 00 00     8p8p8p..........
     5fa:	1e 38 0e 38 0e 70 0e e0 0f c0 0f 80 0f 80 0f c0     .8.8.p..........
     60a:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     61a:	1f 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     62a:	0e 08 0e 18 0e 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     63a:	1c 1c 1e 3c 1f 7c 1f fc 1f fc 1d dc 1c 9c 1c 1c     ...<.|..........
     64a:	1c 1c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     ................
     65a:	1c 1c 1c 1c 1e 1c 1f 1c 1f 9c 1d dc 1c fc 1c 7c     ...............|
     66a:	1c 3c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     .<..............
     67a:	03 e0 07 f0 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     .....8..........
     68a:	1c 1c 0e 38 07 f0 03 e0 00 00 00 00 00 00 00 00     ...8............
     69a:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 00     ...8.8.8.8......
     6aa:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     6ba:	03 e0 0f 78 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 7c     ...x.8.........|
     6ca:	1c fc 0f f8 0f f8 00 38 00 fc 00 00 00 00 00 00     .......8........
     6da:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 70     ...8.8.8.8.....p
     6ea:	0e 38 0e 38 0e 38 1e 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     6fa:	0f f0 1c 38 1c 38 1c 38 1c 00 0f e0 07 f0 00 38     ...8.8.8.......8
     70a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     71a:	1f fc 19 cc 11 c4 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     72a:	01 c0 01 c0 01 c0 07 f0 00 00 00 00 00 00 00 00     ................
     73a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     74a:	1c 70 1c 70 1c 70 0f e0 00 00 00 00 00 00 00 00     .p.p.p..........
     75a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     76a:	1c 70 0e e0 07 c0 03 80 00 00 00 00 00 00 00 00     .p..............
     77a:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 1c 9c     ................
     78a:	0f f8 0f f8 07 70 07 70 00 00 00 00 00 00 00 00     .....p.p........
     79a:	1c 70 1c 70 1c 70 0e e0 07 c0 03 80 03 80 07 c0     .p.p.p..........
     7aa:	0e e0 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     ...p.p.p........
     7ba:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
     7ca:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     7da:	1f f8 1c 38 18 38 10 70 00 e0 01 c0 03 80 07 00     ...8.8.p........
     7ea:	0e 08 1c 18 1c 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     7fa:	07 f0 07 00 07 00 07 00 07 00 07 00 07 00 07 00     ................
     80a:	07 00 07 00 07 00 07 f0 00 00 00 00 00 00 00 00     ................
     81a:	10 00 18 00 1c 00 0e 00 07 00 03 80 01 c0 00 e0     ................
     82a:	00 70 00 38 00 1c 00 07 00 00 00 00 00 00 00 00     .p.8............
     83a:	07 f0 00 70 00 70 00 70 00 70 00 70 00 70 00 70     ...p.p.p.p.p.p.p
     84a:	00 70 00 70 00 70 07 f0 00 00 00 00 00 00 01 80     .p.p.p..........
     85a:	03 c0 07 e0 0e 70 1c 38 00 00 00 00 00 00 00 00     .....p.8........
	...
     892:	7f ff 7f ff 00 00 00 00 1c 00 1c 00 07 00 07 00     ................
	...
     8c2:	0f e0 00 70 00 70 0f f0 1c 70 1c 70 1c 70 0f d8     ...p.p...p.p.p..
	...
     8da:	1e 00 0e 00 0e 00 0e 00 0f f0 0e 38 0e 38 0e 38     ...........8.8.8
     8ea:	0e 38 0e 38 0e 38 1b f0 00 00 00 00 00 00 00 00     .8.8.8..........
	...
     902:	0f e0 1c 70 1c 70 1c 00 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     91a:	00 f8 00 70 00 70 00 70 0f f0 1c 70 1c 70 1c 70     ...p.p.p...p.p.p
     92a:	1c 70 1c 70 1c 70 0f d8 00 00 00 00 00 00 00 00     .p.p.p..........
	...
     942:	0f e0 1c 70 1c 70 1f f0 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     95a:	03 e0 07 70 07 70 07 00 07 00 1f e0 1f e0 07 00     ...p.p..........
     96a:	07 00 07 00 07 00 1f c0 00 00 00 00 00 00 00 00     ................
	...
     982:	0f d8 1c 70 1c 70 1c 70 1c 70 0f f0 07 f0 00 70     ...p.p.p.p.....p
     992:	1c 70 0f e0 00 00 00 00 1e 00 0e 00 0e 00 0e 00     .p..............
     9a2:	0e f0 0f 38 0f 38 0e 38 0e 38 0e 38 0e 38 1e 38     ...8.8.8.8.8.8.8
	...
     9ba:	01 c0 01 c0 01 c0 00 00 0f c0 01 c0 01 c0 01 c0     ................
     9ca:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
     9da:	00 70 00 70 00 70 00 00 03 f0 00 70 00 70 00 70     .p.p.p.....p.p.p
     9ea:	00 70 00 70 00 70 1c 70 0c f0 07 e0 00 00 00 00     .p.p.p.p........
     9fa:	1e 00 0e 00 0e 00 0e 00 0e 38 0e 70 0e e0 0f c0     .........8.p....
     a0a:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     a1a:	0f c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     a2a:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
	...
     a42:	1f f8 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c     ................
	...
     a62:	1f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     ...p.p.p.p.p.p.p
	...
     a82:	0f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f e0     ...p.p.p.p.p.p..
	...
     aa2:	1b f0 0e 38 0e 38 0e 38 0e 38 0e 38 0f f0 0e 00     ...8.8.8.8.8....
     ab2:	0e 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ac2:	1f b0 38 e0 38 e0 38 e0 38 e0 38 e0 1f e0 00 e0     ..8.8.8.8.8.....
     ad2:	00 e0 01 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ae2:	1e f0 0f f8 0f 38 0e 00 0e 00 0e 00 0e 00 1f 00     .....8..........
	...
     b02:	0f e0 1c 30 1c 30 0f 80 03 e0 18 70 18 70 0f e0     ...0.0.....p.p..
	...
     b1a:	00 00 01 00 03 00 07 00 1f f0 07 00 07 00 07 00     ................
     b2a:	07 00 07 70 07 70 03 e0 00 00 00 00 00 00 00 00     ...p.p..........
	...
     b42:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f d8     .p.p.p.p.p.p.p..
	...
     b62:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
	...
     b82:	1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 0f f8 07 70 07 70     .............p.p
	...
     ba2:	1c e0 1c e0 0f c0 07 80 07 80 0f c0 1c e0 1c e0     ................
	...
     bc2:	0e 38 0e 38 0e 38 0e 38 0e 38 07 f0 03 e0 00 e0     .8.8.8.8.8......
     bd2:	01 c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     be2:	1f e0 18 e0 11 c0 03 80 07 00 0e 20 1c 60 1f e0     ........... .`..
	...
     bfa:	01 f8 03 80 03 80 03 80 07 00 1c 00 1c 00 07 00     ................
     c0a:	03 80 03 80 03 80 01 f8 00 00 00 00 00 00 01 c0     ................
     c1a:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     c2a:	01 c0 01 c0 01 c0 01 c0 01 c0 00 00 00 00 00 00     ................
     c3a:	1f 80 01 c0 01 c0 01 c0 00 e0 00 38 00 38 00 e0     ...........8.8..
     c4a:	01 c0 01 c0 01 c0 1f 80 00 00 00 00 00 00 00 00     ................
     c5a:	1f 1c 3b 9c 39 dc 38 f8 00 00 00 00 00 00 00 00     ..;.9.8.........
	...

00000c76 <__ctors_start>:
     c76:	51 0b       	sbc	r21, r17

00000c78 <__ctors_end>:
     c78:	11 24       	eor	r1, r1
     c7a:	1f be       	out	0x3f, r1	; 63
     c7c:	cf e5       	ldi	r28, 0x5F	; 95
     c7e:	d4 e0       	ldi	r29, 0x04	; 4
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	cd bf       	out	0x3d, r28	; 61

00000c84 <__do_copy_data>:
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	a0 e6       	ldi	r26, 0x60	; 96
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e4 eb       	ldi	r30, 0xB4	; 180
     c8c:	fb e2       	ldi	r31, 0x2B	; 43
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <__do_copy_data+0x10>
     c90:	05 90       	lpm	r0, Z+
     c92:	0d 92       	st	X+, r0
     c94:	a2 37       	cpi	r26, 0x72	; 114
     c96:	b1 07       	cpc	r27, r17
     c98:	d9 f7       	brne	.-10     	; 0xc90 <__do_copy_data+0xc>

00000c9a <__do_clear_bss>:
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	a2 e7       	ldi	r26, 0x72	; 114
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <.do_clear_bss_start>

00000ca2 <.do_clear_bss_loop>:
     ca2:	1d 92       	st	X+, r1

00000ca4 <.do_clear_bss_start>:
     ca4:	a8 3a       	cpi	r26, 0xA8	; 168
     ca6:	b2 07       	cpc	r27, r18
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <.do_clear_bss_loop>

00000caa <__do_global_ctors>:
     caa:	16 e0       	ldi	r17, 0x06	; 6
     cac:	cc e3       	ldi	r28, 0x3C	; 60
     cae:	d6 e0       	ldi	r29, 0x06	; 6
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <__do_global_ctors+0x10>
     cb2:	21 97       	sbiw	r28, 0x01	; 1
     cb4:	fe 01       	movw	r30, r28
     cb6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__tablejump2__>
     cba:	cb 33       	cpi	r28, 0x3B	; 59
     cbc:	d1 07       	cpc	r29, r17
     cbe:	c9 f7       	brne	.-14     	; 0xcb2 <__do_global_ctors+0x8>
     cc0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <main>
     cc4:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <_exit>

00000cc8 <__bad_interrupt>:
     cc8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ccc <fastbitmap_1bit>:
		r20:r21 fg color 
		r18:r19 bg color
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     ccc:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     cce:	ba 2f       	mov	r27, r26
	set
     cd0:	68 94       	set
	bld r26,WR_PIN
     cd2:	a6 f9       	bld	r26, 6
	clt
     cd4:	e8 94       	clt
	bld r27,WR_PIN
     cd6:	b6 f9       	bld	r27, 6
	
	movw r30, r22
     cd8:	fb 01       	movw	r30, r22

00000cda <FB1BIT_LOOP>:

FB1BIT_LOOP:

	LPM r0, Z+
     cda:	05 90       	lpm	r0, Z+

	PLOT_MONO_PIXEL r0,7
     cdc:	07 fa       	bst	r0, 7
     cde:	1e f4       	brtc	.+6      	; 0xce6 <FB1BIT_LOOP+0xc>
     ce0:	42 bb       	out	0x12, r20	; 18
     ce2:	5b bb       	out	0x1b, r21	; 27
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <FB1BIT_LOOP+0x10>
     ce6:	22 bb       	out	0x12, r18	; 18
     ce8:	3b bb       	out	0x1b, r19	; 27
     cea:	b5 bb       	out	0x15, r27	; 21
     cec:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,6
     cee:	06 fa       	bst	r0, 6
     cf0:	1e f4       	brtc	.+6      	; 0xcf8 <FB1BIT_LOOP+0x1e>
     cf2:	42 bb       	out	0x12, r20	; 18
     cf4:	5b bb       	out	0x1b, r21	; 27
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <FB1BIT_LOOP+0x22>
     cf8:	22 bb       	out	0x12, r18	; 18
     cfa:	3b bb       	out	0x1b, r19	; 27
     cfc:	b5 bb       	out	0x15, r27	; 21
     cfe:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,5
     d00:	05 fa       	bst	r0, 5
     d02:	1e f4       	brtc	.+6      	; 0xd0a <FB1BIT_LOOP+0x30>
     d04:	42 bb       	out	0x12, r20	; 18
     d06:	5b bb       	out	0x1b, r21	; 27
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <FB1BIT_LOOP+0x34>
     d0a:	22 bb       	out	0x12, r18	; 18
     d0c:	3b bb       	out	0x1b, r19	; 27
     d0e:	b5 bb       	out	0x15, r27	; 21
     d10:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,4
     d12:	04 fa       	bst	r0, 4
     d14:	1e f4       	brtc	.+6      	; 0xd1c <FB1BIT_LOOP+0x42>
     d16:	42 bb       	out	0x12, r20	; 18
     d18:	5b bb       	out	0x1b, r21	; 27
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <FB1BIT_LOOP+0x46>
     d1c:	22 bb       	out	0x12, r18	; 18
     d1e:	3b bb       	out	0x1b, r19	; 27
     d20:	b5 bb       	out	0x15, r27	; 21
     d22:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,3
     d24:	03 fa       	bst	r0, 3
     d26:	1e f4       	brtc	.+6      	; 0xd2e <FB1BIT_LOOP+0x54>
     d28:	42 bb       	out	0x12, r20	; 18
     d2a:	5b bb       	out	0x1b, r21	; 27
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <FB1BIT_LOOP+0x58>
     d2e:	22 bb       	out	0x12, r18	; 18
     d30:	3b bb       	out	0x1b, r19	; 27
     d32:	b5 bb       	out	0x15, r27	; 21
     d34:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,2
     d36:	02 fa       	bst	r0, 2
     d38:	1e f4       	brtc	.+6      	; 0xd40 <FB1BIT_LOOP+0x66>
     d3a:	42 bb       	out	0x12, r20	; 18
     d3c:	5b bb       	out	0x1b, r21	; 27
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <FB1BIT_LOOP+0x6a>
     d40:	22 bb       	out	0x12, r18	; 18
     d42:	3b bb       	out	0x1b, r19	; 27
     d44:	b5 bb       	out	0x15, r27	; 21
     d46:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,1
     d48:	01 fa       	bst	r0, 1
     d4a:	1e f4       	brtc	.+6      	; 0xd52 <FB1BIT_LOOP+0x78>
     d4c:	42 bb       	out	0x12, r20	; 18
     d4e:	5b bb       	out	0x1b, r21	; 27
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <FB1BIT_LOOP+0x7c>
     d52:	22 bb       	out	0x12, r18	; 18
     d54:	3b bb       	out	0x1b, r19	; 27
     d56:	b5 bb       	out	0x15, r27	; 21
     d58:	a5 bb       	out	0x15, r26	; 21
	PLOT_MONO_PIXEL r0,0
     d5a:	00 fa       	bst	r0, 0
     d5c:	1e f4       	brtc	.+6      	; 0xd64 <FB1BIT_LOOP+0x8a>
     d5e:	42 bb       	out	0x12, r20	; 18
     d60:	5b bb       	out	0x1b, r21	; 27
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <FB1BIT_LOOP+0x8e>
     d64:	22 bb       	out	0x12, r18	; 18
     d66:	3b bb       	out	0x1b, r19	; 27
     d68:	b5 bb       	out	0x15, r27	; 21
     d6a:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
     d6c:	81 50       	subi	r24, 0x01	; 1
     d6e:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
     d70:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
     d72:	91 05       	cpc	r25, r1
	breq FB1BIT_DONE
     d74:	11 f0       	breq	.+4      	; 0xd7a <FB1BIT_DONE>
	jmp FB1BIT_LOOP
     d76:	0c 94 6d 06 	jmp	0xcda	; 0xcda <FB1BIT_LOOP>

00000d7a <FB1BIT_DONE>:


FB1BIT_DONE:

	ret;
     d7a:	08 95       	ret

00000d7c <fastbitmap_16bit>:
		r24:r25 lenght in pixels/words
		r22:r23 pointer to data
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     d7c:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     d7e:	ba 2f       	mov	r27, r26
	set
     d80:	68 94       	set
	bld r26,WR_PIN
     d82:	a6 f9       	bld	r26, 6
	clt
     d84:	e8 94       	clt
	bld r27,WR_PIN
     d86:	b6 f9       	bld	r27, 6
	
	movw r30, r22
     d88:	fb 01       	movw	r30, r22

00000d8a <FB16BIT_LOOP>:

FB16BIT_LOOP:

	
	LPM r0, Z+	
     d8a:	05 90       	lpm	r0, Z+
	out DPHIO, r0	
     d8c:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+	
     d8e:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     d90:	02 ba       	out	0x12, r0	; 18

	TOGGLE_WR_FAST r27,r26	// place a pixel!
     d92:	b5 bb       	out	0x15, r27	; 21
     d94:	a5 bb       	out	0x15, r26	; 21

	SUB16 r24,r25,1
     d96:	81 50       	subi	r24, 0x01	; 1
     d98:	90 40       	sbci	r25, 0x00	; 0

	cpi r24,0
     d9a:	80 30       	cpi	r24, 0x00	; 0
	cpc r25,r1
     d9c:	91 05       	cpc	r25, r1
	breq FB16BIT_DONE
     d9e:	11 f0       	breq	.+4      	; 0xda4 <FB16BIT_DONE>
	jmp FB16BIT_LOOP
     da0:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <FB16BIT_LOOP>

00000da4 <FB16BIT_DONE>:


FB16BIT_DONE:

	ret;
     da4:	08 95       	ret

00000da6 <fastbitmap_pb565>:
		r24:r25 data
		
	*/

	/* this block sets up the TOGGLE_WR_FAST registers r30:r31 */
	in r26, _SFR_IO_ADDR(WR_PORT)
     da6:	a5 b3       	in	r26, 0x15	; 21
	mov r27, r26
     da8:	ba 2f       	mov	r27, r26
	set
     daa:	68 94       	set
	bld r26,WR_PIN
     dac:	a6 f9       	bld	r26, 6
	clt
     dae:	e8 94       	clt
	bld r27,WR_PIN
     db0:	b6 f9       	bld	r27, 6
	
	movw r30, r24
     db2:	fc 01       	movw	r30, r24

	clr r1
     db4:	11 24       	eor	r1, r1

00000db6 <PB565BIT_LOOP>:

PB565BIT_LOOP:
	
	LPM r18, Z+	
     db6:	25 91       	lpm	r18, Z+
	cpi r18,0
     db8:	20 30       	cpi	r18, 0x00	; 0
	breq PB565BIT_DONE
     dba:	a9 f0       	breq	.+42     	; 0xde6 <PB565BIT_DONE>
	
	bst r18,7
     dbc:	27 fb       	bst	r18, 7
	brtc PB565PLAIN
     dbe:	56 f4       	brtc	.+20     	; 0xdd4 <PB565PLAIN>
	
	// compressed loop.
	andi r18,0x7F
     dc0:	2f 77       	andi	r18, 0x7F	; 127
	LPM r0, Z+
     dc2:	05 90       	lpm	r0, Z+
	out DPHIO, r0
     dc4:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
     dc6:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     dc8:	02 ba       	out	0x12, r0	; 18

00000dca <PB565COMPRESSED>:
	

PB565COMPRESSED:
	TOGGLE_WR_FAST r27,r26
     dca:	b5 bb       	out	0x15, r27	; 21
     dcc:	a5 bb       	out	0x15, r26	; 21
	dec r18
     dce:	2a 95       	dec	r18
	brne PB565COMPRESSED
     dd0:	e1 f7       	brne	.-8      	; 0xdca <PB565COMPRESSED>
	rjmp PB565BIT_LOOP
     dd2:	f1 cf       	rjmp	.-30     	; 0xdb6 <PB565BIT_LOOP>

00000dd4 <PB565PLAIN>:


PB565PLAIN:

	LPM r0, Z+
     dd4:	05 90       	lpm	r0, Z+
	out DPHIO, r0
     dd6:	0b ba       	out	0x1b, r0	; 27
	LPM r0, Z+
     dd8:	05 90       	lpm	r0, Z+
	out DPLIO, r0
     dda:	02 ba       	out	0x12, r0	; 18
	TOGGLE_WR_FAST r27,r26
     ddc:	b5 bb       	out	0x15, r27	; 21
     dde:	a5 bb       	out	0x15, r26	; 21
	dec r18
     de0:	2a 95       	dec	r18
	brne PB565PLAIN
     de2:	c1 f7       	brne	.-16     	; 0xdd4 <PB565PLAIN>
	rjmp PB565BIT_LOOP
     de4:	e8 cf       	rjmp	.-48     	; 0xdb6 <PB565BIT_LOOP>

00000de6 <PB565BIT_DONE>:




PB565BIT_DONE:
	clr r0
     de6:	00 24       	eor	r0, r0
     de8:	08 95       	ret

00000dea <fastfill>:
// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill:

	clr r18
     dea:	22 27       	eor	r18, r18

	// devide by 2
	// no need for register 25 it has no bits we care about.
	lsr r24
     dec:	86 95       	lsr	r24
	ror r23
     dee:	77 95       	ror	r23
	ror r22
     df0:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     df2:	27 95       	ror	r18

	// devide by 4
	// no need for register 24, it had a max of 1 bit we care about.
	lsr r23
     df4:	76 95       	lsr	r23
	ror r22
     df6:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     df8:	27 95       	ror	r18

	// devide by 8
	//lsr r24
	lsr r23
     dfa:	76 95       	lsr	r23
	ror r22
     dfc:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     dfe:	27 95       	ror	r18

	// devide by 16		
	// lsr r24
	lsr r23
     e00:	76 95       	lsr	r23
	ror r22
     e02:	67 95       	ror	r22
	ror r18 // take carry onto r18 (modulus)
     e04:	27 95       	ror	r18

	// finish rolling a full 8 bits aka swap nibbles
	swap r18
     e06:	22 95       	swap	r18

	movw r24, r22
     e08:	cb 01       	movw	r24, r22

00000e0a <fastfill2>:
// r24 + r25 hold 16 bit unsigned number of 16xloops.
// r18 holds 8 bit unsigned numner of single loops
fastfill2:

	// prepare the out port registers
	in r30, _SFR_IO_ADDR(WR_PORT)
     e0a:	e5 b3       	in	r30, 0x15	; 21
	mov r31, r30
     e0c:	fe 2f       	mov	r31, r30
	set
     e0e:	68 94       	set
	bld r30,WR_PIN
     e10:	e6 f9       	bld	r30, 6
	clt
     e12:	e8 94       	clt
	bld r31,WR_PIN
     e14:	f6 f9       	bld	r31, 6

	sbiw r24,0 // subtract zero and test if zero	
     e16:	00 97       	sbiw	r24, 0x00	; 0
	breq exitloop16
     e18:	11 f1       	breq	.+68     	; 0xe5e <exitloop16>

00000e1a <loop16>:
loop16:
		
	TOGGLE_WR_FAST r31,r30
     e1a:	f5 bb       	out	0x15, r31	; 21
     e1c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e1e:	f5 bb       	out	0x15, r31	; 21
     e20:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e22:	f5 bb       	out	0x15, r31	; 21
     e24:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e26:	f5 bb       	out	0x15, r31	; 21
     e28:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e2a:	f5 bb       	out	0x15, r31	; 21
     e2c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e2e:	f5 bb       	out	0x15, r31	; 21
     e30:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e32:	f5 bb       	out	0x15, r31	; 21
     e34:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e36:	f5 bb       	out	0x15, r31	; 21
     e38:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e3a:	f5 bb       	out	0x15, r31	; 21
     e3c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e3e:	f5 bb       	out	0x15, r31	; 21
     e40:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e42:	f5 bb       	out	0x15, r31	; 21
     e44:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e46:	f5 bb       	out	0x15, r31	; 21
     e48:	e5 bb       	out	0x15, r30	; 21
		
	TOGGLE_WR_FAST r31,r30
     e4a:	f5 bb       	out	0x15, r31	; 21
     e4c:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e4e:	f5 bb       	out	0x15, r31	; 21
     e50:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e52:	f5 bb       	out	0x15, r31	; 21
     e54:	e5 bb       	out	0x15, r30	; 21
	TOGGLE_WR_FAST r31,r30
     e56:	f5 bb       	out	0x15, r31	; 21
     e58:	e5 bb       	out	0x15, r30	; 21

	sbiw r24,1	
     e5a:	01 97       	sbiw	r24, 0x01	; 1
	brne loop16
     e5c:	f1 f6       	brne	.-68     	; 0xe1a <loop16>

00000e5e <exitloop16>:

exitloop16:

	cpi r18,0
     e5e:	20 30       	cpi	r18, 0x00	; 0
	breq exitsingleloop
     e60:	21 f0       	breq	.+8      	; 0xe6a <exitsingleloop>

00000e62 <singleloop>:
singleloop:			
	TOGGLE_WR_FAST r31,r30
     e62:	f5 bb       	out	0x15, r31	; 21
     e64:	e5 bb       	out	0x15, r30	; 21
	dec r18
     e66:	2a 95       	dec	r18
	brne singleloop
     e68:	e1 f7       	brne	.-8      	; 0xe62 <singleloop>

00000e6a <exitsingleloop>:

exitsingleloop:
	ret 
     e6a:	08 95       	ret

00000e6c <fastfill3>:

// r22-r25 unsigned 32 bit number of pixels to set.
// note that only 17 bits of this are used, so max pixels
// is 131071, which is fine since we only have 320 * 240 pixels or 76800 loops
fastfill3:
	TOGGLE_WR
     e6c:	ae 98       	cbi	0x15, 6	; 21
     e6e:	ae 9a       	sbi	0x15, 6	; 21
	SUB32 r22,r23,r24,r25,1
     e70:	61 50       	subi	r22, 0x01	; 1
     e72:	70 40       	sbci	r23, 0x00	; 0
     e74:	80 40       	sbci	r24, 0x00	; 0
     e76:	90 40       	sbci	r25, 0x00	; 0
	brne fastfill3
     e78:	c9 f7       	brne	.-14     	; 0xe6c <fastfill3>

     e7a:	08 95       	ret

00000e7c <LCD_Write_COM>:
#include "as_macros.h"


.global LCD_Write_COM
LCD_Write_COM:
	BUS_START_REG
     e7c:	af 98       	cbi	0x15, 7	; 21
	clr r1
     e7e:	11 24       	eor	r1, r1
	out DPLIO, r24
     e80:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     e82:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     e84:	ae 98       	cbi	0x15, 6	; 21
     e86:	ae 9a       	sbi	0x15, 6	; 21
	ret
     e88:	08 95       	ret

00000e8a <LCD_Write_DATA>:

.global LCD_Write_DATA
LCD_Write_DATA:
	BUS_START_DATA	
     e8a:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
     e8c:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r24
     e8e:	8b bb       	out	0x1b, r24	; 27
	TOGGLE_WR
     e90:	ae 98       	cbi	0x15, 6	; 21
     e92:	ae 9a       	sbi	0x15, 6	; 21
	ret
     e94:	08 95       	ret

00000e96 <LCD_Write_DATA2>:

.global LCD_Write_DATA2
LCD_Write_DATA2:
	BUS_START_DATA	
     e96:	af 9a       	sbi	0x15, 7	; 21
	clr r1
     e98:	11 24       	eor	r1, r1
	out DPLIO, r24
     e9a:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     e9c:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     e9e:	ae 98       	cbi	0x15, 6	; 21
     ea0:	ae 9a       	sbi	0x15, 6	; 21
	ret
     ea2:	08 95       	ret

00000ea4 <LCD_Write_COM_DATA>:


.global LCD_Write_COM_DATA
LCD_Write_COM_DATA:
	
	BUS_START_REG
     ea4:	af 98       	cbi	0x15, 7	; 21
	clr r1
     ea6:	11 24       	eor	r1, r1
	out DPLIO, r24
     ea8:	82 bb       	out	0x12, r24	; 18
	out DPHIO, r1
     eaa:	1b ba       	out	0x1b, r1	; 27
	TOGGLE_WR
     eac:	ae 98       	cbi	0x15, 6	; 21
     eae:	ae 9a       	sbi	0x15, 6	; 21

	BUS_START_DATA	
     eb0:	af 9a       	sbi	0x15, 7	; 21
	out DPLIO, r22
     eb2:	62 bb       	out	0x12, r22	; 18
	out DPHIO, r23
     eb4:	7b bb       	out	0x1b, r23	; 27
	TOGGLE_WR
     eb6:	ae 98       	cbi	0x15, 6	; 21
     eb8:	ae 9a       	sbi	0x15, 6	; 21

	ret
     eba:	08 95       	ret

00000ebc <LCD_Writ_Bus>:


.global LCD_Writ_Bus
	LCD_Writ_Bus:

	out DPHIO, r24
     ebc:	8b bb       	out	0x1b, r24	; 27
	out DPLIO, r22
     ebe:	62 bb       	out	0x12, r22	; 18
	TOGGLE_WR
     ec0:	ae 98       	cbi	0x15, 6	; 21
     ec2:	ae 9a       	sbi	0x15, 6	; 21

     ec4:	08 95       	ret

00000ec6 <_Z41__static_initialization_and_destruction_0ii>:
	
	while (1) {
		display.print("Tap to start", CENTER, 119);
		memoryGame();
	}
}
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	39 f4       	brne	.+14     	; 0xed8 <_Z41__static_initialization_and_destruction_0ii+0x12>
     eca:	6f 3f       	cpi	r22, 0xFF	; 255
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	21 f4       	brne	.+8      	; 0xed8 <_Z41__static_initialization_and_destruction_0ii+0x12>
#define Y2_1 56
#define Y2_2 117
#define Y2_3 178
#define Y2_4 239

UTFT display;
     ed0:	85 e9       	ldi	r24, 0x95	; 149
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <_ZN4UTFTC1Ev>
     ed8:	08 95       	ret

00000eda <_Z7Touchedv>:

bool Touched() {
	// PINB3(T-IRQ) nizak pri dodiru
	if (bit_is_clear(PINB, T_IRQ)){
     eda:	b3 99       	sbic	0x16, 3	; 22
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_Z7Touchedv+0x8>
		return true;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret
		} else {
		return false;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ee4:	08 95       	ret

00000ee6 <_Z4getXv>:

uint16_t getX() {
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
	SPI_Write(0X90);
     eee:	80 e9       	ldi	r24, 0x90	; 144
     ef0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <SPI_Write>
	float x = SPI_Read() / 120.0 * 320 - 15;
     ef4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <SPI_Read>
     ef8:	68 2f       	mov	r22, r24
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 56 13 	call	0x26ac	; 0x26ac <__floatsisf>
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 ef       	ldi	r20, 0xF0	; 240
     f0a:	52 e4       	ldi	r21, 0x42	; 66
     f0c:	0e 94 ac 12 	call	0x2558	; 0x2558 <__divsf3>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 ea       	ldi	r20, 0xA0	; 160
     f16:	53 e4       	ldi	r21, 0x43	; 67
     f18:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e7       	ldi	r20, 0x70	; 112
     f22:	51 e4       	ldi	r21, 0x41	; 65
     f24:	0e 94 35 12 	call	0x246a	; 0x246a <__subsf3>
     f28:	6b 01       	movw	r12, r22
     f2a:	7c 01       	movw	r14, r24
	SPI_Write(0);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	97 e4       	ldi	r25, 0x47	; 71
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <_Z4getXv+0x50>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <_Z4getXv+0x56>
     f3c:	00 00       	nop
	_delay_ms(10);
	return (uint16_t) x;
     f3e:	c7 01       	movw	r24, r14
     f40:	b6 01       	movw	r22, r12
     f42:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
}
     f46:	cb 01       	movw	r24, r22
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	08 95       	ret

00000f52 <_Z4getYv>:

uint16_t getY() {
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
	float y = 0;
     f5a:	c1 2c       	mov	r12, r1
     f5c:	d1 2c       	mov	r13, r1
     f5e:	76 01       	movw	r14, r12
	while(y <= 0 ){
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	a9 01       	movw	r20, r18
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	0e 94 a2 12 	call	0x2544	; 0x2544 <__cmpsf2>
     f6e:	18 16       	cp	r1, r24
     f70:	ec f0       	brlt	.+58     	; 0xfac <_Z4getYv+0x5a>
		SPI_Write(0XD0);
     f72:	80 ed       	ldi	r24, 0xD0	; 208
     f74:	0e 94 67 0b 	call	0x16ce	; 0x16ce <SPI_Write>
		y = SPI_Read() / 120.0 * 240;
     f78:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <SPI_Read>
     f7c:	68 2f       	mov	r22, r24
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 56 13 	call	0x26ac	; 0x26ac <__floatsisf>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 ef       	ldi	r20, 0xF0	; 240
     f8e:	52 e4       	ldi	r21, 0x42	; 66
     f90:	0e 94 ac 12 	call	0x2558	; 0x2558 <__divsf3>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e7       	ldi	r20, 0x70	; 112
     f9a:	53 e4       	ldi	r21, 0x43	; 67
     f9c:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
     fa0:	6b 01       	movw	r12, r22
     fa2:	7c 01       	movw	r14, r24
		SPI_Write(0);
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <SPI_Write>
	return (uint16_t) x;
}

uint16_t getY() {
	float y = 0;
	while(y <= 0 ){
     faa:	da cf       	rjmp	.-76     	; 0xf60 <_Z4getYv+0xe>
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	97 e4       	ldi	r25, 0x47	; 71
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <_Z4getYv+0x5e>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <_Z4getYv+0x64>
     fb6:	00 00       	nop
		SPI_Write(0XD0);
		y = SPI_Read() / 120.0 * 240;
		SPI_Write(0);
	}
	_delay_ms(10);
	return (uint16_t) y;
     fb8:	c7 01       	movw	r24, r14
     fba:	b6 01       	movw	r22, r12
     fbc:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
}
     fc0:	cb 01       	movw	r24, r22
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	08 95       	ret

00000fcc <_Z9fillBoardv>:
uint8_t c1 = 0, c2 = 0;                   // varijable koje pamte indeks okrenutih karti
uint8_t state = 0;                        // stanje igre 0 - nema okrenutih karti, 1 - jedna okrenuta karta, 2 - dvije okrenute karte - provjera jesu li iste
// uint8_t gameFinished = 0;              // 0 - igra jos traje, 1 - pobjeda, 2 - vrijeme je isteklo, TODO ideja je da imamo timer

// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
     fcc:	cf 93       	push	r28
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
     fce:	c0 e0       	ldi	r28, 0x00	; 0
     fd0:	c0 31       	cpi	r28, 0x10	; 16
     fd2:	08 f5       	brcc	.+66     	; 0x1016 <_Z9fillBoardv+0x4a>
		index = rand() % 16;
     fd4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <rand>
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	90 78       	andi	r25, 0x80	; 128
     fdc:	99 23       	and	r25, r25
     fde:	34 f4       	brge	.+12     	; 0xfec <_Z9fillBoardv+0x20>
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	80 6f       	ori	r24, 0xF0	; 240
     fe4:	9f 6f       	ori	r25, 0xFF	; 255
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <_Z9fillBoardv+0x20>
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
			index++;
			if (index > 15) {
				index = 0;
     fea:	80 e0       	ldi	r24, 0x00	; 0
// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
		index = rand() % 16;
		while(board[index] != 0) { //ako se izabere polje koje je vec popunjeno, biraj sljedece
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	f9 01       	movw	r30, r18
     ff2:	eb 57       	subi	r30, 0x7B	; 123
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	90 81       	ld	r25, Z
     ff8:	99 23       	and	r25, r25
     ffa:	21 f0       	breq	.+8      	; 0x1004 <_Z9fillBoardv+0x38>
			index++;
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
			if (index > 15) {
     ffe:	80 31       	cpi	r24, 0x10	; 16
    1000:	a8 f3       	brcs	.-22     	; 0xfec <_Z9fillBoardv+0x20>
    1002:	f3 cf       	rjmp	.-26     	; 0xfea <_Z9fillBoardv+0x1e>
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
    1004:	f9 01       	movw	r30, r18
    1006:	eb 57       	subi	r30, 0x7B	; 123
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	8c 2f       	mov	r24, r28
    100c:	87 70       	andi	r24, 0x07	; 7
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	80 83       	st	Z, r24
// uint8_t gameFinished = 0;              // 0 - igra jos traje, 1 - pobjeda, 2 - vrijeme je isteklo, TODO ideja je da imamo timer

// popuni plocu nasumicno simbolima, koristimo obicne brojeve zbog jednostavnosti implementacije
void fillBoard() {
	uint8_t index, i;
	for (i = 0; i < 16; i++) {
    1012:	cf 5f       	subi	r28, 0xFF	; 255
    1014:	dd cf       	rjmp	.-70     	; 0xfd0 <_Z9fillBoardv+0x4>
				index = 0;
			}
		}
		board[index] = (i % 8) + 1;
	}
}
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <_Z14memoryGetInputv>:

// vraca indeks + 1 karte na koju smo kliknuli, 0 je za kad kliknemo izvan ploce
uint8_t memoryGetInput() {
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
	while(!Touched());
    101e:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z7Touchedv>
    1022:	88 23       	and	r24, r24
    1024:	e1 f3       	breq	.-8      	; 0x101e <_Z14memoryGetInputv+0x4>
	uint16_t x = getX();
    1026:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z4getXv>
    102a:	ec 01       	movw	r28, r24
	uint16_t y = getY();
    102c:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z4getYv>
	
	     if ((x > X1_1) && (x < X2_1) && (y > Y1_1) && (y < Y2_1)) return 1;
    1030:	9e 01       	movw	r18, r28
    1032:	20 55       	subi	r18, 0x50	; 80
    1034:	31 09       	sbc	r19, r1
    1036:	27 33       	cpi	r18, 0x37	; 55
    1038:	31 05       	cpc	r19, r1
    103a:	30 f4       	brcc	.+12     	; 0x1048 <_Z14memoryGetInputv+0x2e>
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	21 f0       	breq	.+8      	; 0x1048 <_Z14memoryGetInputv+0x2e>
    1040:	88 33       	cpi	r24, 0x38	; 56
    1042:	91 05       	cpc	r25, r1
    1044:	08 f4       	brcc	.+2      	; 0x1048 <_Z14memoryGetInputv+0x2e>
    1046:	97 c0       	rjmp	.+302    	; 0x1176 <_Z14memoryGetInputv+0x15c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_1) && (y < Y2_1)) return 2;
    1048:	ae 01       	movw	r20, r28
    104a:	4d 58       	subi	r20, 0x8D	; 141
    104c:	51 09       	sbc	r21, r1
    104e:	47 33       	cpi	r20, 0x37	; 55
    1050:	51 05       	cpc	r21, r1
    1052:	30 f4       	brcc	.+12     	; 0x1060 <_Z14memoryGetInputv+0x46>
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	21 f0       	breq	.+8      	; 0x1060 <_Z14memoryGetInputv+0x46>
    1058:	88 33       	cpi	r24, 0x38	; 56
    105a:	91 05       	cpc	r25, r1
    105c:	08 f4       	brcc	.+2      	; 0x1060 <_Z14memoryGetInputv+0x46>
    105e:	8d c0       	rjmp	.+282    	; 0x117a <_Z14memoryGetInputv+0x160>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_1) && (y < Y2_1)) return 3;
    1060:	be 01       	movw	r22, r28
    1062:	6a 5c       	subi	r22, 0xCA	; 202
    1064:	71 09       	sbc	r23, r1
    1066:	67 33       	cpi	r22, 0x37	; 55
    1068:	71 05       	cpc	r23, r1
    106a:	30 f4       	brcc	.+12     	; 0x1078 <_Z14memoryGetInputv+0x5e>
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	21 f0       	breq	.+8      	; 0x1078 <_Z14memoryGetInputv+0x5e>
    1070:	88 33       	cpi	r24, 0x38	; 56
    1072:	91 05       	cpc	r25, r1
    1074:	08 f4       	brcc	.+2      	; 0x1078 <_Z14memoryGetInputv+0x5e>
    1076:	83 c0       	rjmp	.+262    	; 0x117e <_Z14memoryGetInputv+0x164>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_1) && (y < Y2_1)) return 4;
    1078:	c7 50       	subi	r28, 0x07	; 7
    107a:	d1 40       	sbci	r29, 0x01	; 1
    107c:	c7 33       	cpi	r28, 0x37	; 55
    107e:	d1 05       	cpc	r29, r1
    1080:	30 f4       	brcc	.+12     	; 0x108e <_Z14memoryGetInputv+0x74>
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	21 f0       	breq	.+8      	; 0x108e <_Z14memoryGetInputv+0x74>
    1086:	88 33       	cpi	r24, 0x38	; 56
    1088:	91 05       	cpc	r25, r1
    108a:	08 f4       	brcc	.+2      	; 0x108e <_Z14memoryGetInputv+0x74>
    108c:	7a c0       	rjmp	.+244    	; 0x1182 <_Z14memoryGetInputv+0x168>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_2) && (y < Y2_2)) return 5;
    108e:	27 33       	cpi	r18, 0x37	; 55
    1090:	31 05       	cpc	r19, r1
    1092:	38 f4       	brcc	.+14     	; 0x10a2 <_Z14memoryGetInputv+0x88>
    1094:	8e 33       	cpi	r24, 0x3E	; 62
    1096:	91 05       	cpc	r25, r1
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <_Z14memoryGetInputv+0x88>
    109a:	85 37       	cpi	r24, 0x75	; 117
    109c:	91 05       	cpc	r25, r1
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <_Z14memoryGetInputv+0x88>
    10a0:	72 c0       	rjmp	.+228    	; 0x1186 <_Z14memoryGetInputv+0x16c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_2) && (y < Y2_2)) return 6;
    10a2:	47 33       	cpi	r20, 0x37	; 55
    10a4:	51 05       	cpc	r21, r1
    10a6:	38 f4       	brcc	.+14     	; 0x10b6 <_Z14memoryGetInputv+0x9c>
    10a8:	8e 33       	cpi	r24, 0x3E	; 62
    10aa:	91 05       	cpc	r25, r1
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <_Z14memoryGetInputv+0x9c>
    10ae:	85 37       	cpi	r24, 0x75	; 117
    10b0:	91 05       	cpc	r25, r1
    10b2:	08 f4       	brcc	.+2      	; 0x10b6 <_Z14memoryGetInputv+0x9c>
    10b4:	6a c0       	rjmp	.+212    	; 0x118a <_Z14memoryGetInputv+0x170>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_2) && (y < Y2_2)) return 7;
    10b6:	67 33       	cpi	r22, 0x37	; 55
    10b8:	71 05       	cpc	r23, r1
    10ba:	38 f4       	brcc	.+14     	; 0x10ca <_Z14memoryGetInputv+0xb0>
    10bc:	8e 33       	cpi	r24, 0x3E	; 62
    10be:	91 05       	cpc	r25, r1
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <_Z14memoryGetInputv+0xb0>
    10c2:	85 37       	cpi	r24, 0x75	; 117
    10c4:	91 05       	cpc	r25, r1
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <_Z14memoryGetInputv+0xb0>
    10c8:	62 c0       	rjmp	.+196    	; 0x118e <_Z14memoryGetInputv+0x174>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_2) && (y < Y2_2)) return 8;
    10ca:	c7 33       	cpi	r28, 0x37	; 55
    10cc:	d1 05       	cpc	r29, r1
    10ce:	38 f4       	brcc	.+14     	; 0x10de <_Z14memoryGetInputv+0xc4>
    10d0:	8e 33       	cpi	r24, 0x3E	; 62
    10d2:	91 05       	cpc	r25, r1
    10d4:	20 f0       	brcs	.+8      	; 0x10de <_Z14memoryGetInputv+0xc4>
    10d6:	85 37       	cpi	r24, 0x75	; 117
    10d8:	91 05       	cpc	r25, r1
    10da:	08 f4       	brcc	.+2      	; 0x10de <_Z14memoryGetInputv+0xc4>
    10dc:	5a c0       	rjmp	.+180    	; 0x1192 <_Z14memoryGetInputv+0x178>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_3) && (y < Y2_3)) return 9;
    10de:	27 33       	cpi	r18, 0x37	; 55
    10e0:	31 05       	cpc	r19, r1
    10e2:	38 f4       	brcc	.+14     	; 0x10f2 <_Z14memoryGetInputv+0xd8>
    10e4:	8b 37       	cpi	r24, 0x7B	; 123
    10e6:	91 05       	cpc	r25, r1
    10e8:	20 f0       	brcs	.+8      	; 0x10f2 <_Z14memoryGetInputv+0xd8>
    10ea:	82 3b       	cpi	r24, 0xB2	; 178
    10ec:	91 05       	cpc	r25, r1
    10ee:	08 f4       	brcc	.+2      	; 0x10f2 <_Z14memoryGetInputv+0xd8>
    10f0:	52 c0       	rjmp	.+164    	; 0x1196 <_Z14memoryGetInputv+0x17c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_3) && (y < Y2_3)) return 10;
    10f2:	47 33       	cpi	r20, 0x37	; 55
    10f4:	51 05       	cpc	r21, r1
    10f6:	38 f4       	brcc	.+14     	; 0x1106 <_Z14memoryGetInputv+0xec>
    10f8:	8b 37       	cpi	r24, 0x7B	; 123
    10fa:	91 05       	cpc	r25, r1
    10fc:	20 f0       	brcs	.+8      	; 0x1106 <_Z14memoryGetInputv+0xec>
    10fe:	82 3b       	cpi	r24, 0xB2	; 178
    1100:	91 05       	cpc	r25, r1
    1102:	08 f4       	brcc	.+2      	; 0x1106 <_Z14memoryGetInputv+0xec>
    1104:	4a c0       	rjmp	.+148    	; 0x119a <_Z14memoryGetInputv+0x180>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_3) && (y < Y2_3)) return 11;
    1106:	67 33       	cpi	r22, 0x37	; 55
    1108:	71 05       	cpc	r23, r1
    110a:	38 f4       	brcc	.+14     	; 0x111a <_Z14memoryGetInputv+0x100>
    110c:	8b 37       	cpi	r24, 0x7B	; 123
    110e:	91 05       	cpc	r25, r1
    1110:	20 f0       	brcs	.+8      	; 0x111a <_Z14memoryGetInputv+0x100>
    1112:	82 3b       	cpi	r24, 0xB2	; 178
    1114:	91 05       	cpc	r25, r1
    1116:	08 f4       	brcc	.+2      	; 0x111a <_Z14memoryGetInputv+0x100>
    1118:	42 c0       	rjmp	.+132    	; 0x119e <_Z14memoryGetInputv+0x184>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
    111a:	c7 33       	cpi	r28, 0x37	; 55
    111c:	d1 05       	cpc	r29, r1
    111e:	30 f4       	brcc	.+12     	; 0x112c <_Z14memoryGetInputv+0x112>
    1120:	8b 37       	cpi	r24, 0x7B	; 123
    1122:	91 05       	cpc	r25, r1
    1124:	18 f0       	brcs	.+6      	; 0x112c <_Z14memoryGetInputv+0x112>
    1126:	82 3b       	cpi	r24, 0xB2	; 178
    1128:	91 05       	cpc	r25, r1
    112a:	d8 f1       	brcs	.+118    	; 0x11a2 <_Z14memoryGetInputv+0x188>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
    112c:	27 33       	cpi	r18, 0x37	; 55
    112e:	31 05       	cpc	r19, r1
    1130:	30 f4       	brcc	.+12     	; 0x113e <_Z14memoryGetInputv+0x124>
    1132:	88 3b       	cpi	r24, 0xB8	; 184
    1134:	91 05       	cpc	r25, r1
    1136:	18 f0       	brcs	.+6      	; 0x113e <_Z14memoryGetInputv+0x124>
    1138:	8f 3e       	cpi	r24, 0xEF	; 239
    113a:	91 05       	cpc	r25, r1
    113c:	a0 f1       	brcs	.+104    	; 0x11a6 <_Z14memoryGetInputv+0x18c>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
    113e:	47 33       	cpi	r20, 0x37	; 55
    1140:	51 05       	cpc	r21, r1
    1142:	30 f4       	brcc	.+12     	; 0x1150 <_Z14memoryGetInputv+0x136>
    1144:	88 3b       	cpi	r24, 0xB8	; 184
    1146:	91 05       	cpc	r25, r1
    1148:	18 f0       	brcs	.+6      	; 0x1150 <_Z14memoryGetInputv+0x136>
    114a:	8f 3e       	cpi	r24, 0xEF	; 239
    114c:	91 05       	cpc	r25, r1
    114e:	68 f1       	brcs	.+90     	; 0x11aa <_Z14memoryGetInputv+0x190>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
    1150:	67 33       	cpi	r22, 0x37	; 55
    1152:	71 05       	cpc	r23, r1
    1154:	30 f4       	brcc	.+12     	; 0x1162 <_Z14memoryGetInputv+0x148>
    1156:	88 3b       	cpi	r24, 0xB8	; 184
    1158:	91 05       	cpc	r25, r1
    115a:	18 f0       	brcs	.+6      	; 0x1162 <_Z14memoryGetInputv+0x148>
    115c:	8f 3e       	cpi	r24, 0xEF	; 239
    115e:	91 05       	cpc	r25, r1
    1160:	30 f1       	brcs	.+76     	; 0x11ae <_Z14memoryGetInputv+0x194>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
    1162:	e7 97       	sbiw	r28, 0x37	; 55
    1164:	30 f5       	brcc	.+76     	; 0x11b2 <_Z14memoryGetInputv+0x198>
    1166:	88 3b       	cpi	r24, 0xB8	; 184
    1168:	91 05       	cpc	r25, r1
    116a:	28 f1       	brcs	.+74     	; 0x11b6 <_Z14memoryGetInputv+0x19c>
    116c:	8f 3e       	cpi	r24, 0xEF	; 239
    116e:	91 05       	cpc	r25, r1
    1170:	20 f1       	brcs	.+72     	; 0x11ba <_Z14memoryGetInputv+0x1a0>
	else return 0;
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	23 c0       	rjmp	.+70     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
uint8_t memoryGetInput() {
	while(!Touched());
	uint16_t x = getX();
	uint16_t y = getY();
	
	     if ((x > X1_1) && (x < X2_1) && (y > Y1_1) && (y < Y2_1)) return 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	21 c0       	rjmp	.+66     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_1) && (y < Y2_1)) return 2;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_1) && (y < Y2_1)) return 3;
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	1d c0       	rjmp	.+58     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_1) && (y < Y2_1)) return 4;
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	1b c0       	rjmp	.+54     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_2) && (y < Y2_2)) return 5;
    1186:	85 e0       	ldi	r24, 0x05	; 5
    1188:	19 c0       	rjmp	.+50     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_2) && (y < Y2_2)) return 6;
    118a:	86 e0       	ldi	r24, 0x06	; 6
    118c:	17 c0       	rjmp	.+46     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_2) && (y < Y2_2)) return 7;
    118e:	87 e0       	ldi	r24, 0x07	; 7
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_2) && (y < Y2_2)) return 8;
    1192:	88 e0       	ldi	r24, 0x08	; 8
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_3) && (y < Y2_3)) return 9;
    1196:	89 e0       	ldi	r24, 0x09	; 9
    1198:	11 c0       	rjmp	.+34     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_3) && (y < Y2_3)) return 10;
    119a:	8a e0       	ldi	r24, 0x0A	; 10
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_3) && (y < Y2_3)) return 11;
    119e:	8b e0       	ldi	r24, 0x0B	; 11
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
    11a2:	8c e0       	ldi	r24, 0x0C	; 12
    11a4:	0b c0       	rjmp	.+22     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
    11a6:	8d e0       	ldi	r24, 0x0D	; 13
    11a8:	09 c0       	rjmp	.+18     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
    11aa:	8e e0       	ldi	r24, 0x0E	; 14
    11ac:	07 c0       	rjmp	.+14     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
    11ae:	8f e0       	ldi	r24, 0x0F	; 15
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
	else return 0;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <_Z14memoryGetInputv+0x1a2>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <_Z14memoryGetInputv+0x1a2>
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_3) && (y < Y2_3)) return 12;
	
	else if ((x > X1_1) && (x < X2_1) && (y > Y1_4) && (y < Y2_4)) return 13;
	else if ((x > X1_2) && (x < X2_2) && (y > Y1_4) && (y < Y2_4)) return 14;
	else if ((x > X1_3) && (x < X2_3) && (y > Y1_4) && (y < Y2_4)) return 15;
	else if ((x > X1_4) && (x < X2_4) && (y > Y1_4) && (y < Y2_4)) return 16;
    11ba:	80 e1       	ldi	r24, 0x10	; 16
	else return 0;
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <_Z9closeCardh>:

// "pokriva" kartu crtanjem crnog kvadrata preko simbola
void closeCard(uint8_t index) {
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	c8 2f       	mov	r28, r24
	display.setColor(0, 0, 0);
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	85 e9       	ldi	r24, 0x95	; 149
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_ZN4UTFT8setColorEhhh>
	switch(index) {
    11d8:	8c 2f       	mov	r24, r28
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	fc 01       	movw	r30, r24
    11de:	31 97       	sbiw	r30, 0x01	; 1
    11e0:	e0 31       	cpi	r30, 0x10	; 16
    11e2:	f1 05       	cpc	r31, r1
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <_Z9closeCardh+0x26>
    11e6:	d3 c0       	rjmp	.+422    	; 0x138e <_Z9closeCardh+0x1cc>
    11e8:	e6 5d       	subi	r30, 0xD6	; 214
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__tablejump2__>
		case 1:
			display.fillRect(X1_1 + 2, Y1_1 + 1, X2_1 - 1, Y2_1 - 1);
    11f0:	07 e3       	ldi	r16, 0x37	; 55
    11f2:	10 e0       	ldi	r17, 0x00	; 0
    11f4:	26 e8       	ldi	r18, 0x86	; 134
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	41 e0       	ldi	r20, 0x01	; 1
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	61 e5       	ldi	r22, 0x51	; 81
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	85 e9       	ldi	r24, 0x95	; 149
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    1208:	c2 c0       	rjmp	.+388    	; 0x138e <_Z9closeCardh+0x1cc>
		case 2:
			display.fillRect(X1_2 + 2, Y1_1 + 1, X2_2 - 1, Y2_1 - 1);
    120a:	07 e3       	ldi	r16, 0x37	; 55
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	23 ec       	ldi	r18, 0xC3	; 195
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	6e e8       	ldi	r22, 0x8E	; 142
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	85 e9       	ldi	r24, 0x95	; 149
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    1222:	b5 c0       	rjmp	.+362    	; 0x138e <_Z9closeCardh+0x1cc>
		case 3:
			display.fillRect(X1_3 + 2, Y1_1 + 1, X2_3 - 1, Y2_1 - 1);
    1224:	07 e3       	ldi	r16, 0x37	; 55
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	31 e0       	ldi	r19, 0x01	; 1
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	6b ec       	ldi	r22, 0xCB	; 203
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	85 e9       	ldi	r24, 0x95	; 149
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    123c:	a8 c0       	rjmp	.+336    	; 0x138e <_Z9closeCardh+0x1cc>
		case 4:
			display.fillRect(X1_4 + 2, Y1_1 + 1, X2_4 - 1, Y2_1 - 1);
    123e:	07 e3       	ldi	r16, 0x37	; 55
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	2d e3       	ldi	r18, 0x3D	; 61
    1244:	31 e0       	ldi	r19, 0x01	; 1
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	68 e0       	ldi	r22, 0x08	; 8
    124c:	71 e0       	ldi	r23, 0x01	; 1
    124e:	85 e9       	ldi	r24, 0x95	; 149
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    1256:	9b c0       	rjmp	.+310    	; 0x138e <_Z9closeCardh+0x1cc>
		case 5:
			display.fillRect(X1_1 + 2, Y1_2 + 1, X2_1 - 1, Y2_2 - 1);
    1258:	04 e7       	ldi	r16, 0x74	; 116
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	26 e8       	ldi	r18, 0x86	; 134
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4e e3       	ldi	r20, 0x3E	; 62
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	61 e5       	ldi	r22, 0x51	; 81
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	85 e9       	ldi	r24, 0x95	; 149
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    1270:	8e c0       	rjmp	.+284    	; 0x138e <_Z9closeCardh+0x1cc>
		case 6:
			display.fillRect(X1_2 + 2, Y1_2 + 1, X2_2 - 1, Y2_2 - 1);
    1272:	04 e7       	ldi	r16, 0x74	; 116
    1274:	10 e0       	ldi	r17, 0x00	; 0
    1276:	23 ec       	ldi	r18, 0xC3	; 195
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4e e3       	ldi	r20, 0x3E	; 62
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	6e e8       	ldi	r22, 0x8E	; 142
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	85 e9       	ldi	r24, 0x95	; 149
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    128a:	81 c0       	rjmp	.+258    	; 0x138e <_Z9closeCardh+0x1cc>
		case 7:
			display.fillRect(X1_3 + 2, Y1_2 + 1, X2_3 - 1, Y2_2 - 1);
    128c:	04 e7       	ldi	r16, 0x74	; 116
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	31 e0       	ldi	r19, 0x01	; 1
    1294:	4e e3       	ldi	r20, 0x3E	; 62
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	6b ec       	ldi	r22, 0xCB	; 203
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	85 e9       	ldi	r24, 0x95	; 149
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    12a4:	74 c0       	rjmp	.+232    	; 0x138e <_Z9closeCardh+0x1cc>
		case 8:
			display.fillRect(X1_4 + 2, Y1_2 + 1, X2_4 - 1, Y2_2 - 1);
    12a6:	04 e7       	ldi	r16, 0x74	; 116
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	2d e3       	ldi	r18, 0x3D	; 61
    12ac:	31 e0       	ldi	r19, 0x01	; 1
    12ae:	4e e3       	ldi	r20, 0x3E	; 62
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	68 e0       	ldi	r22, 0x08	; 8
    12b4:	71 e0       	ldi	r23, 0x01	; 1
    12b6:	85 e9       	ldi	r24, 0x95	; 149
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;	
    12be:	67 c0       	rjmp	.+206    	; 0x138e <_Z9closeCardh+0x1cc>
		case 9:
			display.fillRect(X1_1 + 2, Y1_3 + 1, X2_1 - 1, Y2_3 - 1);
    12c0:	01 eb       	ldi	r16, 0xB1	; 177
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	26 e8       	ldi	r18, 0x86	; 134
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4b e7       	ldi	r20, 0x7B	; 123
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	61 e5       	ldi	r22, 0x51	; 81
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	85 e9       	ldi	r24, 0x95	; 149
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    12d8:	5a c0       	rjmp	.+180    	; 0x138e <_Z9closeCardh+0x1cc>
		case 10:
			display.fillRect(X1_2 + 2, Y1_3 + 1, X2_2 - 1, Y2_3 - 1);
    12da:	01 eb       	ldi	r16, 0xB1	; 177
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	23 ec       	ldi	r18, 0xC3	; 195
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4b e7       	ldi	r20, 0x7B	; 123
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	6e e8       	ldi	r22, 0x8E	; 142
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	85 e9       	ldi	r24, 0x95	; 149
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    12f2:	4d c0       	rjmp	.+154    	; 0x138e <_Z9closeCardh+0x1cc>
		case 11:
			display.fillRect(X1_3 + 2, Y1_3 + 1, X2_3 - 1, Y2_3 - 1);
    12f4:	01 eb       	ldi	r16, 0xB1	; 177
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	31 e0       	ldi	r19, 0x01	; 1
    12fc:	4b e7       	ldi	r20, 0x7B	; 123
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	6b ec       	ldi	r22, 0xCB	; 203
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	85 e9       	ldi	r24, 0x95	; 149
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    130c:	40 c0       	rjmp	.+128    	; 0x138e <_Z9closeCardh+0x1cc>
		case 12:
			display.fillRect(X1_4 + 2, Y1_3 + 1, X2_4 - 1, Y2_3 - 1);
    130e:	01 eb       	ldi	r16, 0xB1	; 177
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	2d e3       	ldi	r18, 0x3D	; 61
    1314:	31 e0       	ldi	r19, 0x01	; 1
    1316:	4b e7       	ldi	r20, 0x7B	; 123
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	68 e0       	ldi	r22, 0x08	; 8
    131c:	71 e0       	ldi	r23, 0x01	; 1
    131e:	85 e9       	ldi	r24, 0x95	; 149
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    1326:	33 c0       	rjmp	.+102    	; 0x138e <_Z9closeCardh+0x1cc>
		case 13:
			display.fillRect(X1_1 + 2, Y1_4 + 1, X2_1 - 1, Y2_4 - 1);
    1328:	0e ee       	ldi	r16, 0xEE	; 238
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	26 e8       	ldi	r18, 0x86	; 134
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	48 eb       	ldi	r20, 0xB8	; 184
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	61 e5       	ldi	r22, 0x51	; 81
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	85 e9       	ldi	r24, 0x95	; 149
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    1340:	26 c0       	rjmp	.+76     	; 0x138e <_Z9closeCardh+0x1cc>
		case 14:
			display.fillRect(X1_2 + 2, Y1_4 + 1, X2_2 - 1, Y2_4 - 1);
    1342:	0e ee       	ldi	r16, 0xEE	; 238
    1344:	10 e0       	ldi	r17, 0x00	; 0
    1346:	23 ec       	ldi	r18, 0xC3	; 195
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	48 eb       	ldi	r20, 0xB8	; 184
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	6e e8       	ldi	r22, 0x8E	; 142
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	85 e9       	ldi	r24, 0x95	; 149
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    135a:	19 c0       	rjmp	.+50     	; 0x138e <_Z9closeCardh+0x1cc>
		case 15:
			display.fillRect(X1_3 + 2, Y1_4 + 1, X2_3 - 1, Y2_4 - 1);
    135c:	0e ee       	ldi	r16, 0xEE	; 238
    135e:	10 e0       	ldi	r17, 0x00	; 0
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	31 e0       	ldi	r19, 0x01	; 1
    1364:	48 eb       	ldi	r20, 0xB8	; 184
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	6b ec       	ldi	r22, 0xCB	; 203
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	85 e9       	ldi	r24, 0x95	; 149
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
    1374:	0c c0       	rjmp	.+24     	; 0x138e <_Z9closeCardh+0x1cc>
		case 16:
			display.fillRect(X1_4 + 2, Y1_4 + 1, X2_4 - 1, Y2_4 - 1);
    1376:	0e ee       	ldi	r16, 0xEE	; 238
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	2d e3       	ldi	r18, 0x3D	; 61
    137c:	31 e0       	ldi	r19, 0x01	; 1
    137e:	48 eb       	ldi	r20, 0xB8	; 184
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	68 e0       	ldi	r22, 0x08	; 8
    1384:	71 e0       	ldi	r23, 0x01	; 1
    1386:	85 e9       	ldi	r24, 0x95	; 149
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
			break;
	}
}
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <_Z9checkOpenv>:

// provjera ako je memory karta vec okrenuta
void checkOpen() {
	if (board[c1 - 1] != board[c2 - 1] && control[c1 - 1] == 0 && control[c2 - 1] == 0) {  //ako su karte razlicite i kontrolno polje je 0 za obje
    1396:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <c1>
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	fc 01       	movw	r30, r24
    13a0:	eb 57       	subi	r30, 0x7B	; 123
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	50 81       	ld	r21, Z
    13a6:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <c2>
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	21 50       	subi	r18, 0x01	; 1
    13ae:	31 09       	sbc	r19, r1
    13b0:	f9 01       	movw	r30, r18
    13b2:	eb 57       	subi	r30, 0x7B	; 123
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	40 81       	ld	r20, Z
    13b8:	54 17       	cp	r21, r20
    13ba:	f1 f0       	breq	.+60     	; 0x13f8 <_Z9checkOpenv+0x62>
    13bc:	fc 01       	movw	r30, r24
    13be:	eb 58       	subi	r30, 0x8B	; 139
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	40 81       	ld	r20, Z
    13c4:	41 11       	cpse	r20, r1
    13c6:	18 c0       	rjmp	.+48     	; 0x13f8 <_Z9checkOpenv+0x62>
    13c8:	f9 01       	movw	r30, r18
    13ca:	eb 58       	subi	r30, 0x8B	; 139
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	40 81       	ld	r20, Z
    13d0:	41 11       	cpse	r20, r1
    13d2:	12 c0       	rjmp	.+36     	; 0x13f8 <_Z9checkOpenv+0x62>
    13d4:	2f ef       	ldi	r18, 0xFF	; 255
    13d6:	8f eb       	ldi	r24, 0xBF	; 191
    13d8:	96 e0       	ldi	r25, 0x06	; 6
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	80 40       	sbci	r24, 0x00	; 0
    13de:	90 40       	sbci	r25, 0x00	; 0
    13e0:	e1 f7       	brne	.-8      	; 0x13da <_Z9checkOpenv+0x44>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <_Z9checkOpenv+0x4e>
    13e4:	00 00       	nop
		_delay_ms(300); //cekaj ~trecinu sekunde da se zatvore karte
		closeCard(c1);
    13e6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <c1>
    13ea:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_Z9closeCardh>
		closeCard(c2);
    13ee:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <c2>
    13f2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_Z9closeCardh>
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <_Z9checkOpenv+0x74>
	} else { //ako su isti okrenuti, postavi kontrolno polje u 1
		control[c1-1] = 1;
    13f8:	fc 01       	movw	r30, r24
    13fa:	eb 58       	subi	r30, 0x8B	; 139
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	40 83       	st	Z, r20
		control[c2-1] = 1;
    1402:	f9 01       	movw	r30, r18
    1404:	eb 58       	subi	r30, 0x8B	; 139
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	40 83       	st	Z, r20
	}
	state = c1 = c2 = 0;
    140a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <c2>
    140e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <c1>
    1412:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
    1416:	08 95       	ret

00001418 <_Z10revealCardh>:
}

// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
    1418:	cf 92       	push	r12
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	c8 2f       	mov	r28, r24
	display.setColor(255, 255, 255);
    1426:	2f ef       	ldi	r18, 0xFF	; 255
    1428:	4f ef       	ldi	r20, 0xFF	; 255
    142a:	6f ef       	ldi	r22, 0xFF	; 255
    142c:	85 e9       	ldi	r24, 0x95	; 149
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_ZN4UTFT8setColorEhhh>
	display.setFont(BigFont);
    1434:	62 e9       	ldi	r22, 0x92	; 146
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	85 e9       	ldi	r24, 0x95	; 149
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN4UTFT7setFontEPKh>
    1440:	8c 2f       	mov	r24, r28
    1442:	83 70       	andi	r24, 0x03	; 3
	
	uint16_t x = 0, y = 0;
	
	if (input % 4 == 1) {                 // prvi stupac
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	49 f0       	breq	.+18     	; 0x145a <_Z10revealCardh+0x42>
		x = X1_1;
		} else if (input % 4 == 2) {      // drugi stupac
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	51 f0       	breq	.+20     	; 0x1460 <_Z10revealCardh+0x48>
		x = X1_2;
		} else if (input % 4 == 3) {      // treci stupac
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	59 f0       	breq	.+22     	; 0x1466 <_Z10revealCardh+0x4e>
		x = X1_3;
		} else if (input % 4 == 0) {      // cetvrti stupac
    1450:	88 23       	and	r24, r24
    1452:	61 f0       	breq	.+24     	; 0x146c <_Z10revealCardh+0x54>
// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
	display.setColor(255, 255, 255);
	display.setFont(BigFont);
	
	uint16_t x = 0, y = 0;
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	0b c0       	rjmp	.+22     	; 0x1470 <_Z10revealCardh+0x58>
	
	if (input % 4 == 1) {                 // prvi stupac
		x = X1_1;
    145a:	2f e4       	ldi	r18, 0x4F	; 79
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <_Z10revealCardh+0x58>
		} else if (input % 4 == 2) {      // drugi stupac
		x = X1_2;
    1460:	2c e8       	ldi	r18, 0x8C	; 140
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <_Z10revealCardh+0x58>
		} else if (input % 4 == 3) {      // treci stupac
		x = X1_3;
    1466:	29 ec       	ldi	r18, 0xC9	; 201
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <_Z10revealCardh+0x58>
		} else if (input % 4 == 0) {      // cetvrti stupac
		x = X1_4;
    146c:	26 e0       	ldi	r18, 0x06	; 6
    146e:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	if ((input > 0) && (input < 5)) {                   // prvi red
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	8c 0f       	add	r24, r28
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	78 f0       	brcs	.+30     	; 0x1496 <_Z10revealCardh+0x7e>
		y = Y1_1;
		} else if ((input > 4) && (input < 9)) {        // drugi stupac
    1478:	8b ef       	ldi	r24, 0xFB	; 251
    147a:	8c 0f       	add	r24, r28
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	70 f0       	brcs	.+28     	; 0x149c <_Z10revealCardh+0x84>
		y = Y1_2;
		} else if ((input > 8) && (input < 13)) {       // treci stupac
    1480:	87 ef       	ldi	r24, 0xF7	; 247
    1482:	8c 0f       	add	r24, r28
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	68 f0       	brcs	.+26     	; 0x14a2 <_Z10revealCardh+0x8a>
		y = Y1_3;
		} else if ((input > 12) && (input < 17)) {      // cetvrti stupac
    1488:	83 ef       	ldi	r24, 0xF3	; 243
    148a:	8c 0f       	add	r24, r28
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	60 f0       	brcs	.+24     	; 0x14a8 <_Z10revealCardh+0x90>
// otkrivanje karte - crtanje simbola iz polja na plocu
void revealCard(uint8_t input) {
	display.setColor(255, 255, 255);
	display.setFont(BigFont);
	
	uint16_t x = 0, y = 0;
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <_Z10revealCardh+0x94>
		} else if (input % 4 == 0) {      // cetvrti stupac
		x = X1_4;
	}
	
	if ((input > 0) && (input < 5)) {                   // prvi red
		y = Y1_1;
    1496:	00 e0       	ldi	r16, 0x00	; 0
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <_Z10revealCardh+0x94>
		} else if ((input > 4) && (input < 9)) {        // drugi stupac
		y = Y1_2;
    149c:	0d e3       	ldi	r16, 0x3D	; 61
    149e:	10 e0       	ldi	r17, 0x00	; 0
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <_Z10revealCardh+0x94>
		} else if ((input > 8) && (input < 13)) {       // treci stupac
		y = Y1_3;
    14a2:	0a e7       	ldi	r16, 0x7A	; 122
    14a4:	10 e0       	ldi	r17, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <_Z10revealCardh+0x94>
		} else if ((input > 12) && (input < 17)) {      // cetvrti stupac
		y = Y1_4;
    14a8:	07 eb       	ldi	r16, 0xB7	; 183
    14aa:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	uint8_t openSymbol = board[input - 1];
    14ac:	ec 2f       	mov	r30, r28
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	ec 57       	subi	r30, 0x7C	; 124
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	40 81       	ld	r20, Z
	
	display.printNumI(openSymbol, x + 20, y + 20);
    14b6:	0c 5e       	subi	r16, 0xEC	; 236
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	2c 5e       	subi	r18, 0xEC	; 236
    14bc:	3f 4f       	sbci	r19, 0xFF	; 255
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	68 94       	set
    14c6:	cc 24       	eor	r12, r12
    14c8:	c5 f8       	bld	r12, 5
    14ca:	e1 2c       	mov	r14, r1
    14cc:	f1 2c       	mov	r15, r1
    14ce:	85 e9       	ldi	r24, 0x95	; 149
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 12 11 	call	0x2224	; 0x2224 <_ZN4UTFT9printNumIEliiic>
    14d6:	2f ef       	ldi	r18, 0xFF	; 255
    14d8:	8f e7       	ldi	r24, 0x7F	; 127
    14da:	94 e0       	ldi	r25, 0x04	; 4
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	80 40       	sbci	r24, 0x00	; 0
    14e0:	90 40       	sbci	r25, 0x00	; 0
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <_Z10revealCardh+0xc4>
    14e4:	00 c0       	rjmp	.+0      	; 0x14e6 <_Z10revealCardh+0xce>
    14e6:	00 00       	nop
	
	_delay_ms(200);                                     // Debounce cekanjem
}
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	cf 90       	pop	r12
    14f4:	08 95       	ret

000014f6 <_Z10memoryInitv>:

// inicijalno stanje memory igre - generiranje sadrzaja polja i crtanje ploce
void memoryInit() {
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
	display.clrScr();
    14fa:	85 e9       	ldi	r24, 0x95	; 149
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN4UTFT6clrScrEv>
	fillBoard();
    1502:	0e 94 e6 07 	call	0xfcc	; 0xfcc <_Z9fillBoardv>
	
	//crtanje ploce za memory
	
	display.fillRect(BORDER_L, BOARD_Y1, BORDER_L + BORDER_WIDTH, BOARD_Y2);
    1506:	0f ee       	ldi	r16, 0xEF	; 239
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	2d e8       	ldi	r18, 0x8D	; 141
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	68 e8       	ldi	r22, 0x88	; 136
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	85 e9       	ldi	r24, 0x95	; 149
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_C, BOARD_Y1, BORDER_C + BORDER_WIDTH, BOARD_Y2);
    151e:	2a ec       	ldi	r18, 0xCA	; 202
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	65 ec       	ldi	r22, 0xC5	; 197
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	85 e9       	ldi	r24, 0x95	; 149
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BORDER_R, BOARD_Y1, BORDER_R + BORDER_WIDTH, BOARD_Y2);
    1532:	27 e0       	ldi	r18, 0x07	; 7
    1534:	31 e0       	ldi	r19, 0x01	; 1
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	62 e0       	ldi	r22, 0x02	; 2
    153c:	71 e0       	ldi	r23, 0x01	; 1
    153e:	85 e9       	ldi	r24, 0x95	; 149
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_T, BOARD_X2, BORDER_T + BORDER_WIDTH);
    1546:	0d e3       	ldi	r16, 0x3D	; 61
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	2e e3       	ldi	r18, 0x3E	; 62
    154c:	31 e0       	ldi	r19, 0x01	; 1
    154e:	48 e3       	ldi	r20, 0x38	; 56
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	6f e4       	ldi	r22, 0x4F	; 79
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	85 e9       	ldi	r24, 0x95	; 149
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_M, BOARD_X2, BORDER_M + BORDER_WIDTH);
    155e:	0a e7       	ldi	r16, 0x7A	; 122
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	2e e3       	ldi	r18, 0x3E	; 62
    1564:	31 e0       	ldi	r19, 0x01	; 1
    1566:	45 e7       	ldi	r20, 0x75	; 117
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	6f e4       	ldi	r22, 0x4F	; 79
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	85 e9       	ldi	r24, 0x95	; 149
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
	display.fillRect(BOARD_X1, BORDER_B, BOARD_X2, BORDER_B + BORDER_WIDTH);
    1576:	07 eb       	ldi	r16, 0xB7	; 183
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	2e e3       	ldi	r18, 0x3E	; 62
    157c:	31 e0       	ldi	r19, 0x01	; 1
    157e:	42 eb       	ldi	r20, 0xB2	; 178
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	6f e4       	ldi	r22, 0x4F	; 79
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	85 e9       	ldi	r24, 0x95	; 149
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN4UTFT8fillRectEiiii>
}
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <_Z10memoryGamev>:

// glavni game loop
void memoryGame() {
	uint16_t input;
	
	bool started = 0;
    1594:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1) {
		if (state == 2) checkOpen(); 
    1596:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	11 f4       	brne	.+4      	; 0x15a2 <_Z10memoryGamev+0xe>
    159e:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z9checkOpenv>
		input = memoryGetInput(); //svakih pola sekunde provjeri input 
    15a2:	0e 94 0d 08 	call	0x101a	; 0x101a <_Z14memoryGetInputv>
    15a6:	08 2f       	mov	r16, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0

		if (!started) { //inicijalizira stanje igre pri prvom pokretanju
    15aa:	11 11       	cpse	r17, r1
    15ac:	0d c0       	rjmp	.+26     	; 0x15c8 <_Z10memoryGamev+0x34>
			
			// sluzi kao workaroun za vrijeme - generira random seed na temelju gdje smo dodirnuli
			uint16_t x = getX();
    15ae:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z4getXv>
    15b2:	ec 01       	movw	r28, r24
			uint16_t y = getY();
    15b4:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z4getYv>
			srand(x+y);
    15b8:	8c 0f       	add	r24, r28
    15ba:	9d 1f       	adc	r25, r29
    15bc:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <srand>

			memoryInit();
    15c0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z10memoryInitv>
			started = 1;
    15c4:	11 e0       	ldi	r17, 0x01	; 1
    15c6:	3e c0       	rjmp	.+124    	; 0x1644 <_Z10memoryGamev+0xb0>
		} else if (input > 0 && started && !(control[input-1])) { // ako igra vec traje, pritisnut je ekran i karta nije vec pogodjena, otvori kartu
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	e1 f1       	breq	.+120    	; 0x1644 <_Z10memoryGamev+0xb0>
    15cc:	11 23       	and	r17, r17
    15ce:	d1 f1       	breq	.+116    	; 0x1644 <_Z10memoryGamev+0xb0>
    15d0:	ec 01       	movw	r28, r24
    15d2:	21 97       	sbiw	r28, 0x01	; 1
    15d4:	fe 01       	movw	r30, r28
    15d6:	eb 58       	subi	r30, 0x8B	; 139
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	81 11       	cpse	r24, r1
    15de:	32 c0       	rjmp	.+100    	; 0x1644 <_Z10memoryGamev+0xb0>
			revealCard(input);
    15e0:	80 2f       	mov	r24, r16
    15e2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_Z10revealCardh>
			
			if (state == 0 && control[input-1] == 0) { // nisu trenutno otvorene karte, ne smijemo otvarati vec otvorenu kartu
    15e6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
    15ea:	81 11       	cpse	r24, r1
    15ec:	12 c0       	rjmp	.+36     	; 0x1612 <_Z10memoryGamev+0x7e>
    15ee:	cb 58       	subi	r28, 0x8B	; 139
    15f0:	df 4f       	sbci	r29, 0xFF	; 255
    15f2:	98 81       	ld	r25, Y
    15f4:	91 11       	cpse	r25, r1
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <_Z10memoryGamev+0x7e>
				c1 = input;
    15f8:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <c1>
			    if (control[c1-1] == 0) state = 1;  // promjena stanja jedino ako je u c1 spremljena karta koja nije pogodjena
    15fc:	e0 2f       	mov	r30, r16
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	ec 58       	subi	r30, 0x8C	; 140
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	81 11       	cpse	r24, r1
    1608:	1d c0       	rjmp	.+58     	; 0x1644 <_Z10memoryGamev+0xb0>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
    1610:	19 c0       	rjmp	.+50     	; 0x1644 <_Z10memoryGamev+0xb0>
			}
			else if (state == 1 && control[c1-1] == 0) { // otvorena jedna karta, ne smijemo otvarati vec otvorenu kartu
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	b9 f4       	brne	.+46     	; 0x1644 <_Z10memoryGamev+0xb0>
    1616:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <c1>
    161a:	e8 2f       	mov	r30, r24
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	ec 58       	subi	r30, 0x8C	; 140
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	90 81       	ld	r25, Z
    1624:	91 11       	cpse	r25, r1
    1626:	0e c0       	rjmp	.+28     	; 0x1644 <_Z10memoryGamev+0xb0>
					c2 = input;
    1628:	00 93 73 00 	sts	0x0073, r16	; 0x800073 <c2>
					if (c1 != c2 && control[c2-1] == 0) state = 2; // promjena stanja jedino ako je u c1 spremljena karta koja nije pogodjena i c1 i c2 su razliciti
    162c:	08 17       	cp	r16, r24
    162e:	51 f0       	breq	.+20     	; 0x1644 <_Z10memoryGamev+0xb0>
    1630:	e0 2f       	mov	r30, r16
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	ec 58       	subi	r30, 0x8C	; 140
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 81       	ld	r24, Z
    163a:	81 11       	cpse	r24, r1
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <_Z10memoryGamev+0xb0>
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
    1644:	2f ef       	ldi	r18, 0xFF	; 255
    1646:	8f e3       	ldi	r24, 0x3F	; 63
    1648:	9b e0       	ldi	r25, 0x0B	; 11
    164a:	21 50       	subi	r18, 0x01	; 1
    164c:	80 40       	sbci	r24, 0x00	; 0
    164e:	90 40       	sbci	r25, 0x00	; 0
    1650:	e1 f7       	brne	.-8      	; 0x164a <_Z10memoryGamev+0xb6>
    1652:	00 c0       	rjmp	.+0      	; 0x1654 <_Z10memoryGamev+0xc0>
    1654:	00 00       	nop
    1656:	9f cf       	rjmp	.-194    	; 0x1596 <_Z10memoryGamev+0x2>

00001658 <main>:
}

int main(void) {
	
	//T-IRQ spojen na PINB3 kao ulazni te je nizak samo pri dodiru, inace visok
	DDRB &= ~_BV(T_IRQ);
    1658:	87 b3       	in	r24, 0x17	; 23
    165a:	87 7f       	andi	r24, 0xF7	; 247
    165c:	87 bb       	out	0x17, r24	; 23

	SPI_Init();
    165e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <SPI_Init>
	SS_Enable;
    1662:	88 b3       	in	r24, 0x18	; 24
    1664:	8f 7e       	andi	r24, 0xEF	; 239
    1666:	88 bb       	out	0x18, r24	; 24
	
	display.InitLCD(LANDSCAPE);
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	85 e9       	ldi	r24, 0x95	; 149
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN4UTFT7InitLCDEh>
	display.clrScr();
    1672:	85 e9       	ldi	r24, 0x95	; 149
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN4UTFT6clrScrEv>
	display.setFont(BigFont);
    167a:	62 e9       	ldi	r22, 0x92	; 146
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	85 e9       	ldi	r24, 0x95	; 149
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN4UTFT7setFontEPKh>
	
	while (1) {
		display.print("Tap to start", CENTER, 119);
    1686:	00 e0       	ldi	r16, 0x00	; 0
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	27 e7       	ldi	r18, 0x77	; 119
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4e e0       	ldi	r20, 0x0E	; 14
    1690:	57 e2       	ldi	r21, 0x27	; 39
    1692:	64 e6       	ldi	r22, 0x64	; 100
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	85 e9       	ldi	r24, 0x95	; 149
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 37 10 	call	0x206e	; 0x206e <_ZN4UTFT5printEPKciii>
		memoryGame();
    169e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_Z10memoryGamev>

000016a2 <_GLOBAL__sub_I_display>:
	}
}
    16a2:	6f ef       	ldi	r22, 0xFF	; 255
    16a4:	7f ef       	ldi	r23, 0xFF	; 255
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 63 07 	call	0xec6	; 0xec6 <_Z41__static_initialization_and_destruction_0ii>
    16ae:	08 95       	ret

000016b0 <SPI_Init>:
#include "SPI_Master_H_file.h"				/* Include SPI Master header file */


void SPI_Init()								/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);		/* Make MOSI, SCK, 0th pin direction as output pins */
    16b0:	87 b3       	in	r24, 0x17	; 23
    16b2:	80 6b       	ori	r24, 0xB0	; 176
    16b4:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);						/* Make MISO pin as input pin */
    16b6:	87 b3       	in	r24, 0x17	; 23
    16b8:	8f 7b       	andi	r24, 0xBF	; 191
    16ba:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS);						/* Disable slave initially by making high on SS pin */
    16bc:	88 b3       	in	r24, 0x18	; 24
    16be:	80 61       	ori	r24, 0x10	; 16
    16c0:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI, Enable in master mode, with Fosc/16 SCK frequency */
    16c2:	81 e5       	ldi	r24, 0x51	; 81
    16c4:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);					/* Disable speed doubler */
    16c6:	8e b1       	in	r24, 0x0e	; 14
    16c8:	8e 7f       	andi	r24, 0xFE	; 254
    16ca:	8e b9       	out	0x0e, r24	; 14
    16cc:	08 95       	ret

000016ce <SPI_Write>:
}

void SPI_Write(char data)					/* SPI write data function */
{
	char flush_buffer;
	SPDR = data;							/* Write data to SPI data register */
    16ce:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
    16d0:	77 9b       	sbis	0x0e, 7	; 14
    16d2:	fe cf       	rjmp	.-4      	; 0x16d0 <SPI_Write+0x2>
	flush_buffer = SPDR;					/* Flush received data */
    16d4:	8f b1       	in	r24, 0x0f	; 15
    16d6:	08 95       	ret

000016d8 <SPI_Read>:
/* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
}

char SPI_Read()								/* SPI read data function */
{
	SPDR = 0xFF;
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
    16dc:	77 9b       	sbis	0x0e, 7	; 14
    16de:	fe cf       	rjmp	.-4      	; 0x16dc <SPI_Read+0x4>
	return(SPDR);							/* return received data */
    16e0:	8f b1       	in	r24, 0x0f	; 15
}
    16e2:	08 95       	ret

000016e4 <SSD1289_init>:



void SSD1289_init()
{	
	DATA_PORT_LOW_DDR = 0xff;
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	81 bb       	out	0x11, r24	; 17
	DATA_PORT_HIGH_DDR = 0xff;
    16e8:	8a bb       	out	0x1a, r24	; 26
			
	RS_PORT_DDR |= _BV( RS_PIN);
    16ea:	84 b3       	in	r24, 0x14	; 20
    16ec:	80 68       	ori	r24, 0x80	; 128
    16ee:	84 bb       	out	0x14, r24	; 20
				
	WR_PORT_DDR |= _BV(WR_PIN);
    16f0:	84 b3       	in	r24, 0x14	; 20
    16f2:	80 64       	ori	r24, 0x40	; 64
    16f4:	84 bb       	out	0x14, r24	; 20

	CS_PORT_DDR |= _BV(CS_PIN);
    16f6:	84 b3       	in	r24, 0x14	; 20
    16f8:	81 60       	ori	r24, 0x01	; 1
    16fa:	84 bb       	out	0x14, r24	; 20
		
	RD_PORT_DDR |= _BV(RD_PIN);
    16fc:	87 b3       	in	r24, 0x17	; 23
    16fe:	81 60       	ori	r24, 0x01	; 1
    1700:	87 bb       	out	0x17, r24	; 23
	RD_PORT |= _BV(RD_PIN);
    1702:	88 b3       	in	r24, 0x18	; 24
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	88 bb       	out	0x18, r24	; 24
		
	RESET_PORT_DDR |= _BV(RESET_PIN);
    1708:	84 b3       	in	r24, 0x14	; 20
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	84 bb       	out	0x14, r24	; 20
		
	BACK_LIGHT_PORT |= _BV(BACK_LIGHT_PIN);
    170e:	88 b3       	in	r24, 0x18	; 24
    1710:	82 60       	ori	r24, 0x02	; 2
    1712:	88 bb       	out	0x18, r24	; 24
	
	BACK_LIGHT_DDR |= _BV(BACK_LIGHT_PIN);			
    1714:	87 b3       	in	r24, 0x17	; 23
    1716:	82 60       	ori	r24, 0x02	; 2
    1718:	87 bb       	out	0x17, r24	; 23
	
	sbi(RESET_PORT, RESET_PIN);
    171a:	85 b3       	in	r24, 0x15	; 21
    171c:	82 60       	ori	r24, 0x02	; 2
    171e:	85 bb       	out	0x15, r24	; 21
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	93 e2       	ldi	r25, 0x23	; 35
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <SSD1289_init+0x40>
    1728:	00 c0       	rjmp	.+0      	; 0x172a <SSD1289_init+0x46>
    172a:	00 00       	nop
	_delay_ms(5);
	cbi(RESET_PORT, RESET_PIN);
    172c:	85 b3       	in	r24, 0x15	; 21
    172e:	8d 7f       	andi	r24, 0xFD	; 253
    1730:	85 bb       	out	0x15, r24	; 21
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	9b e6       	ldi	r25, 0x6B	; 107
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <SSD1289_init+0x52>
    173a:	00 c0       	rjmp	.+0      	; 0x173c <SSD1289_init+0x58>
    173c:	00 00       	nop
	_delay_ms(15);
	sbi(RESET_PORT, RESET_PIN);
    173e:	85 b3       	in	r24, 0x15	; 21
    1740:	82 60       	ori	r24, 0x02	; 2
    1742:	85 bb       	out	0x15, r24	; 21
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	9b e6       	ldi	r25, 0x6B	; 107
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <SSD1289_init+0x64>
    174c:	00 c0       	rjmp	.+0      	; 0x174e <SSD1289_init+0x6a>
    174e:	00 00       	nop
	_delay_ms(15);

	cbi(CS_PORT, CS_PIN);
    1750:	85 b3       	in	r24, 0x15	; 21
    1752:	8e 7f       	andi	r24, 0xFE	; 254
    1754:	85 bb       	out	0x15, r24	; 21

	LCD_Write_COM_DATA(0x00,0x0001);
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x03,0xA8A4);
    1760:	64 ea       	ldi	r22, 0xA4	; 164
    1762:	78 ea       	ldi	r23, 0xA8	; 168
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0C,0x0000);
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	8c e0       	ldi	r24, 0x0C	; 12
    1770:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0D,0x080C);
    1774:	6c e0       	ldi	r22, 0x0C	; 12
    1776:	78 e0       	ldi	r23, 0x08	; 8
    1778:	8d e0       	ldi	r24, 0x0D	; 13
    177a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0E,0x2B00);
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	7b e2       	ldi	r23, 0x2B	; 43
    1782:	8e e0       	ldi	r24, 0x0E	; 14
    1784:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x1E,0x00B7);
    1788:	67 eb       	ldi	r22, 0xB7	; 183
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	8e e1       	ldi	r24, 0x1E	; 30
    178e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x01,0x2B3F);
    1792:	6f e3       	ldi	r22, 0x3F	; 63
    1794:	7b e2       	ldi	r23, 0x2B	; 43
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x02,0x0600);
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	76 e0       	ldi	r23, 0x06	; 6
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x10,0x0000);
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	80 e1       	ldi	r24, 0x10	; 16
    17ac:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x11,0x6070);
    17b0:	60 e7       	ldi	r22, 0x70	; 112
    17b2:	70 e6       	ldi	r23, 0x60	; 96
    17b4:	81 e1       	ldi	r24, 0x11	; 17
    17b6:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x05,0x0000);
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	85 e0       	ldi	r24, 0x05	; 5
    17c0:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x06,0x0000);
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	86 e0       	ldi	r24, 0x06	; 6
    17ca:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x16,0xEF1C);
    17ce:	6c e1       	ldi	r22, 0x1C	; 28
    17d0:	7f ee       	ldi	r23, 0xEF	; 239
    17d2:	86 e1       	ldi	r24, 0x16	; 22
    17d4:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x17,0x0003);
    17d8:	63 e0       	ldi	r22, 0x03	; 3
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	87 e1       	ldi	r24, 0x17	; 23
    17de:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x07,0x0233);
    17e2:	63 e3       	ldi	r22, 0x33	; 51
    17e4:	72 e0       	ldi	r23, 0x02	; 2
    17e6:	87 e0       	ldi	r24, 0x07	; 7
    17e8:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0B,0x0000);
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	8b e0       	ldi	r24, 0x0B	; 11
    17f2:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x0F,0x0000);
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	8f e0       	ldi	r24, 0x0F	; 15
    17fc:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x41,0x0000);
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	81 e4       	ldi	r24, 0x41	; 65
    1806:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x42,0x0000);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	82 e4       	ldi	r24, 0x42	; 66
    1810:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x48,0x0000);
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	88 e4       	ldi	r24, 0x48	; 72
    181a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x49,0x013F);
    181e:	6f e3       	ldi	r22, 0x3F	; 63
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	89 e4       	ldi	r24, 0x49	; 73
    1824:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4A,0x0000);
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	8a e4       	ldi	r24, 0x4A	; 74
    182e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4B,0x0000);
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	8b e4       	ldi	r24, 0x4B	; 75
    1838:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x44,0xEF00);
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	7f ee       	ldi	r23, 0xEF	; 239
    1840:	84 e4       	ldi	r24, 0x44	; 68
    1842:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x45,0x0000);
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	85 e4       	ldi	r24, 0x45	; 69
    184c:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x46,0x013F);
    1850:	6f e3       	ldi	r22, 0x3F	; 63
    1852:	71 e0       	ldi	r23, 0x01	; 1
    1854:	86 e4       	ldi	r24, 0x46	; 70
    1856:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x30,0x0707);
    185a:	67 e0       	ldi	r22, 0x07	; 7
    185c:	77 e0       	ldi	r23, 0x07	; 7
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x31,0x0204);
    1864:	64 e0       	ldi	r22, 0x04	; 4
    1866:	72 e0       	ldi	r23, 0x02	; 2
    1868:	81 e3       	ldi	r24, 0x31	; 49
    186a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x32,0x0204);
    186e:	64 e0       	ldi	r22, 0x04	; 4
    1870:	72 e0       	ldi	r23, 0x02	; 2
    1872:	82 e3       	ldi	r24, 0x32	; 50
    1874:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x33,0x0502);
    1878:	62 e0       	ldi	r22, 0x02	; 2
    187a:	75 e0       	ldi	r23, 0x05	; 5
    187c:	83 e3       	ldi	r24, 0x33	; 51
    187e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x34,0x0507);
    1882:	67 e0       	ldi	r22, 0x07	; 7
    1884:	75 e0       	ldi	r23, 0x05	; 5
    1886:	84 e3       	ldi	r24, 0x34	; 52
    1888:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x35,0x0204);
    188c:	64 e0       	ldi	r22, 0x04	; 4
    188e:	72 e0       	ldi	r23, 0x02	; 2
    1890:	85 e3       	ldi	r24, 0x35	; 53
    1892:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x36,0x0204);
    1896:	64 e0       	ldi	r22, 0x04	; 4
    1898:	72 e0       	ldi	r23, 0x02	; 2
    189a:	86 e3       	ldi	r24, 0x36	; 54
    189c:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x37,0x0502);
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	75 e0       	ldi	r23, 0x05	; 5
    18a4:	87 e3       	ldi	r24, 0x37	; 55
    18a6:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3A,0x0302);
    18aa:	62 e0       	ldi	r22, 0x02	; 2
    18ac:	73 e0       	ldi	r23, 0x03	; 3
    18ae:	8a e3       	ldi	r24, 0x3A	; 58
    18b0:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x3B,0x0302);
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	73 e0       	ldi	r23, 0x03	; 3
    18b8:	8b e3       	ldi	r24, 0x3B	; 59
    18ba:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x23,0x0000);
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	83 e2       	ldi	r24, 0x23	; 35
    18c4:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x24,0x0000);
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	84 e2       	ldi	r24, 0x24	; 36
    18ce:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x25,0x8000);
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	70 e8       	ldi	r23, 0x80	; 128
    18d6:	85 e2       	ldi	r24, 0x25	; 37
    18d8:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4f,0x0000);
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	8f e4       	ldi	r24, 0x4F	; 79
    18e2:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM_DATA(0x4e,0x0000);
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	8e e4       	ldi	r24, 0x4E	; 78
    18ec:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
	LCD_Write_COM(0x22);
    18f0:	82 e2       	ldi	r24, 0x22	; 34
    18f2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>


	sbi(CS_PORT, CS_PIN);
    18f6:	85 b3       	in	r24, 0x15	; 21
    18f8:	81 60       	ori	r24, 0x01	; 1
    18fa:	85 bb       	out	0x15, r24	; 21
    18fc:	08 95       	ret

000018fe <_ZN4UTFTC1Ev>:
		}
		st[c2+f]=0;
	}

	print(st,x,y);
}
    18fe:	4f ee       	ldi	r20, 0xEF	; 239
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	fc 01       	movw	r30, r24
    1908:	45 83       	std	Z+5, r20	; 0x05
    190a:	56 83       	std	Z+6, r21	; 0x06
    190c:	67 83       	std	Z+7, r22	; 0x07
    190e:	70 87       	std	Z+8, r23	; 0x08
    1910:	4f e3       	ldi	r20, 0x3F	; 63
    1912:	51 e0       	ldi	r21, 0x01	; 1
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	41 87       	std	Z+9, r20	; 0x09
    191a:	52 87       	std	Z+10, r21	; 0x0a
    191c:	63 87       	std	Z+11, r22	; 0x0b
    191e:	74 87       	std	Z+12, r23	; 0x0c
    1920:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <SSD1289_init>
    1924:	08 95       	ret

00001926 <_ZN4UTFT5setXYEjjjj>:
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	eb 01       	movw	r28, r22
    1934:	e4 2e       	mov	r14, r20
    1936:	f5 2e       	mov	r15, r21
    1938:	fc 01       	movw	r30, r24
    193a:	44 81       	ldd	r20, Z+4	; 0x04
    193c:	41 30       	cpi	r20, 0x01	; 1
    193e:	89 f4       	brne	.+34     	; 0x1962 <_ZN4UTFT5setXYEjjjj+0x3c>
    1940:	81 85       	ldd	r24, Z+9	; 0x09
    1942:	92 85       	ldd	r25, Z+10	; 0x0a
    1944:	a3 85       	ldd	r26, Z+11	; 0x0b
    1946:	b4 85       	ldd	r27, Z+12	; 0x0c
    1948:	ac 01       	movw	r20, r24
    194a:	46 1b       	sub	r20, r22
    194c:	57 0b       	sbc	r21, r23
    194e:	82 1b       	sub	r24, r18
    1950:	93 0b       	sbc	r25, r19
    1952:	20 2f       	mov	r18, r16
    1954:	31 2f       	mov	r19, r17
    1956:	04 2f       	mov	r16, r20
    1958:	15 2f       	mov	r17, r21
    195a:	ce 2d       	mov	r28, r14
    195c:	df 2d       	mov	r29, r15
    195e:	e8 2e       	mov	r14, r24
    1960:	f9 2e       	mov	r15, r25
    1962:	32 2f       	mov	r19, r18
    1964:	22 27       	eor	r18, r18
    1966:	be 01       	movw	r22, r28
    1968:	62 0f       	add	r22, r18
    196a:	73 1f       	adc	r23, r19
    196c:	84 e4       	ldi	r24, 0x44	; 68
    196e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1972:	6e 2d       	mov	r22, r14
    1974:	7f 2d       	mov	r23, r15
    1976:	85 e4       	ldi	r24, 0x45	; 69
    1978:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    197c:	60 2f       	mov	r22, r16
    197e:	71 2f       	mov	r23, r17
    1980:	86 e4       	ldi	r24, 0x46	; 70
    1982:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1986:	be 01       	movw	r22, r28
    1988:	8e e4       	ldi	r24, 0x4E	; 78
    198a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    198e:	6e 2d       	mov	r22, r14
    1990:	7f 2d       	mov	r23, r15
    1992:	8f e4       	ldi	r24, 0x4F	; 79
    1994:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1998:	82 e2       	ldi	r24, 0x22	; 34
    199a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    199e:	85 b3       	in	r24, 0x15	; 21
    19a0:	80 68       	ori	r24, 0x80	; 128
    19a2:	85 bb       	out	0x15, r24	; 21
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	08 95       	ret

000019b2 <_ZN4UTFT8fillRectEiiii>:
    19b2:	8f 92       	push	r8
    19b4:	9f 92       	push	r9
    19b6:	af 92       	push	r10
    19b8:	bf 92       	push	r11
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	4c 01       	movw	r8, r24
    19cc:	5b 01       	movw	r10, r22
    19ce:	7a 01       	movw	r14, r20
    19d0:	69 01       	movw	r12, r18
    19d2:	e8 01       	movw	r28, r16
    19d4:	26 17       	cp	r18, r22
    19d6:	37 07       	cpc	r19, r23
    19d8:	24 f4       	brge	.+8      	; 0x19e2 <_ZN4UTFT8fillRectEiiii+0x30>
    19da:	8b 2d       	mov	r24, r11
    19dc:	59 01       	movw	r10, r18
    19de:	c6 2e       	mov	r12, r22
    19e0:	d8 2e       	mov	r13, r24
    19e2:	ce 15       	cp	r28, r14
    19e4:	df 05       	cpc	r29, r15
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <_ZN4UTFT8fillRectEiiii+0x40>
    19e8:	9e 2d       	mov	r25, r14
    19ea:	8f 2d       	mov	r24, r15
    19ec:	7e 01       	movw	r14, r28
    19ee:	c9 2f       	mov	r28, r25
    19f0:	d8 2f       	mov	r29, r24
    19f2:	85 b3       	in	r24, 0x15	; 21
    19f4:	8e 7f       	andi	r24, 0xFE	; 254
    19f6:	85 bb       	out	0x15, r24	; 21
    19f8:	8e 01       	movw	r16, r28
    19fa:	96 01       	movw	r18, r12
    19fc:	a7 01       	movw	r20, r14
    19fe:	b5 01       	movw	r22, r10
    1a00:	c4 01       	movw	r24, r8
    1a02:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN4UTFT5setXYEjjjj>
    1a06:	f4 01       	movw	r30, r8
    1a08:	80 81       	ld	r24, Z
    1a0a:	8b bb       	out	0x1b, r24	; 27
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	82 bb       	out	0x12, r24	; 18
    1a10:	96 01       	movw	r18, r12
    1a12:	2a 19       	sub	r18, r10
    1a14:	3b 09       	sbc	r19, r11
    1a16:	c9 01       	movw	r24, r18
    1a18:	33 0f       	add	r19, r19
    1a1a:	aa 0b       	sbc	r26, r26
    1a1c:	bb 0b       	sbc	r27, r27
    1a1e:	9c 01       	movw	r18, r24
    1a20:	ad 01       	movw	r20, r26
    1a22:	2f 5f       	subi	r18, 0xFF	; 255
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	4f 4f       	sbci	r20, 0xFF	; 255
    1a28:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2a:	be 01       	movw	r22, r28
    1a2c:	6e 19       	sub	r22, r14
    1a2e:	7f 09       	sbc	r23, r15
    1a30:	cb 01       	movw	r24, r22
    1a32:	77 0f       	add	r23, r23
    1a34:	aa 0b       	sbc	r26, r26
    1a36:	bb 0b       	sbc	r27, r27
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	6f 5f       	subi	r22, 0xFF	; 255
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	8f 4f       	sbci	r24, 0xFF	; 255
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__mulsi3>
    1a48:	0e 94 f5 06 	call	0xdea	; 0xdea <fastfill>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	82 bb       	out	0x12, r24	; 18
    1a50:	8b bb       	out	0x1b, r24	; 27
    1a52:	85 b3       	in	r24, 0x15	; 21
    1a54:	8e 7f       	andi	r24, 0xFE	; 254
    1a56:	85 bb       	out	0x15, r24	; 21
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	08 95       	ret

00001a72 <_ZN4UTFT6clrScrEv>:
    1a72:	85 b3       	in	r24, 0x15	; 21
    1a74:	8e 7f       	andi	r24, 0xFE	; 254
    1a76:	85 bb       	out	0x15, r24	; 21
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	7f ee       	ldi	r23, 0xEF	; 239
    1a7c:	84 e4       	ldi	r24, 0x44	; 68
    1a7e:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	85 e4       	ldi	r24, 0x45	; 69
    1a88:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1a8c:	6f e3       	ldi	r22, 0x3F	; 63
    1a8e:	71 e0       	ldi	r23, 0x01	; 1
    1a90:	86 e4       	ldi	r24, 0x46	; 70
    1a92:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	8e e4       	ldi	r24, 0x4E	; 78
    1a9c:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	8f e4       	ldi	r24, 0x4F	; 79
    1aa6:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1aaa:	68 e7       	ldi	r22, 0x78	; 120
    1aac:	70 e6       	ldi	r23, 0x60	; 96
    1aae:	81 e1       	ldi	r24, 0x11	; 17
    1ab0:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1ab4:	82 e2       	ldi	r24, 0x22	; 34
    1ab6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    1aba:	85 b3       	in	r24, 0x15	; 21
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	85 bb       	out	0x15, r24	; 21
    1ac0:	12 ba       	out	0x12, r1	; 18
    1ac2:	1b ba       	out	0x1b, r1	; 27
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	7c e2       	ldi	r23, 0x2C	; 44
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 f5 06 	call	0xdea	; 0xdea <fastfill>
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	82 bb       	out	0x12, r24	; 18
    1ad4:	8b bb       	out	0x1b, r24	; 27
    1ad6:	85 b3       	in	r24, 0x15	; 21
    1ad8:	8e 7f       	andi	r24, 0xFE	; 254
    1ada:	85 bb       	out	0x15, r24	; 21
    1adc:	08 95       	ret

00001ade <_ZN4UTFT8setColorEhhh>:
    1ade:	e4 2f       	mov	r30, r20
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	f5 95       	asr	r31
    1ae4:	e7 95       	ror	r30
    1ae6:	f5 95       	asr	r31
    1ae8:	e7 95       	ror	r30
    1aea:	f5 95       	asr	r31
    1aec:	e7 95       	ror	r30
    1aee:	f5 95       	asr	r31
    1af0:	e7 95       	ror	r30
    1af2:	f5 95       	asr	r31
    1af4:	e7 95       	ror	r30
    1af6:	68 7f       	andi	r22, 0xF8	; 248
    1af8:	e6 2b       	or	r30, r22
    1afa:	dc 01       	movw	r26, r24
    1afc:	ec 93       	st	X, r30
    1afe:	4c 71       	andi	r20, 0x1C	; 28
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	44 0f       	add	r20, r20
    1b04:	55 1f       	adc	r21, r21
    1b06:	44 0f       	add	r20, r20
    1b08:	55 1f       	adc	r21, r21
    1b0a:	44 0f       	add	r20, r20
    1b0c:	55 1f       	adc	r21, r21
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	35 95       	asr	r19
    1b12:	27 95       	ror	r18
    1b14:	35 95       	asr	r19
    1b16:	27 95       	ror	r18
    1b18:	35 95       	asr	r19
    1b1a:	27 95       	ror	r18
    1b1c:	42 2b       	or	r20, r18
    1b1e:	11 96       	adiw	r26, 0x01	; 1
    1b20:	4c 93       	st	X, r20
    1b22:	08 95       	ret

00001b24 <_ZN4UTFT12setBackColorEhhh>:
    1b24:	e4 2f       	mov	r30, r20
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	f5 95       	asr	r31
    1b2a:	e7 95       	ror	r30
    1b2c:	f5 95       	asr	r31
    1b2e:	e7 95       	ror	r30
    1b30:	f5 95       	asr	r31
    1b32:	e7 95       	ror	r30
    1b34:	f5 95       	asr	r31
    1b36:	e7 95       	ror	r30
    1b38:	f5 95       	asr	r31
    1b3a:	e7 95       	ror	r30
    1b3c:	68 7f       	andi	r22, 0xF8	; 248
    1b3e:	e6 2b       	or	r30, r22
    1b40:	dc 01       	movw	r26, r24
    1b42:	12 96       	adiw	r26, 0x02	; 2
    1b44:	ec 93       	st	X, r30
    1b46:	12 97       	sbiw	r26, 0x02	; 2
    1b48:	4c 71       	andi	r20, 0x1C	; 28
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	44 0f       	add	r20, r20
    1b4e:	55 1f       	adc	r21, r21
    1b50:	44 0f       	add	r20, r20
    1b52:	55 1f       	adc	r21, r21
    1b54:	44 0f       	add	r20, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	35 95       	asr	r19
    1b5c:	27 95       	ror	r18
    1b5e:	35 95       	asr	r19
    1b60:	27 95       	ror	r18
    1b62:	35 95       	asr	r19
    1b64:	27 95       	ror	r18
    1b66:	42 2b       	or	r20, r18
    1b68:	13 96       	adiw	r26, 0x03	; 3
    1b6a:	4c 93       	st	X, r20
    1b6c:	08 95       	ret

00001b6e <_ZN4UTFT7InitLCDEh>:
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ec 01       	movw	r28, r24
    1b74:	6c 83       	std	Y+4, r22	; 0x04
    1b76:	2f ef       	ldi	r18, 0xFF	; 255
    1b78:	4f ef       	ldi	r20, 0xFF	; 255
    1b7a:	6f ef       	ldi	r22, 0xFF	; 255
    1b7c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_ZN4UTFT8setColorEhhh>
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	ce 01       	movw	r24, r28
    1b88:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN4UTFT12setBackColorEhhh>
    1b8c:	1e 86       	std	Y+14, r1	; 0x0e
    1b8e:	1d 86       	std	Y+13, r1	; 0x0d
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <_ZN4UTFT8setPixelEj>:
    1b96:	87 2f       	mov	r24, r23
    1b98:	0e 94 45 07 	call	0xe8a	; 0xe8a <LCD_Write_DATA>
    1b9c:	08 95       	ret

00001b9e <_ZN4UTFT9printCharEhii>:
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	ec 01       	movw	r28, r24
    1bb4:	7a 01       	movw	r14, r20
    1bb6:	89 01       	movw	r16, r18
    1bb8:	85 b3       	in	r24, 0x15	; 21
    1bba:	8e 7f       	andi	r24, 0xFE	; 254
    1bbc:	85 bb       	out	0x15, r24	; 21
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	69 c0       	rjmp	.+210    	; 0x1c96 <_ZN4UTFT9printCharEhii+0xf8>
    1bc4:	29 89       	ldd	r18, Y+17	; 0x11
    1bc6:	86 2f       	mov	r24, r22
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	82 1b       	sub	r24, r18
    1bcc:	91 09       	sbc	r25, r1
    1bce:	4f 85       	ldd	r20, Y+15	; 0x0f
    1bd0:	54 2f       	mov	r21, r20
    1bd2:	56 95       	lsr	r21
    1bd4:	56 95       	lsr	r21
    1bd6:	56 95       	lsr	r21
    1bd8:	28 89       	ldd	r18, Y+16	; 0x10
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	52 9f       	mul	r21, r18
    1bde:	b0 01       	movw	r22, r0
    1be0:	53 9f       	mul	r21, r19
    1be2:	70 0d       	add	r23, r0
    1be4:	11 24       	eor	r1, r1
    1be6:	86 9f       	mul	r24, r22
    1be8:	60 01       	movw	r12, r0
    1bea:	87 9f       	mul	r24, r23
    1bec:	d0 0c       	add	r13, r0
    1bee:	96 9f       	mul	r25, r22
    1bf0:	d0 0c       	add	r13, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	84 e0       	ldi	r24, 0x04	; 4
    1bf6:	c8 0e       	add	r12, r24
    1bf8:	d1 1c       	adc	r13, r1
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	84 0f       	add	r24, r20
    1bfe:	91 1d       	adc	r25, r1
    1c00:	20 0f       	add	r18, r16
    1c02:	31 1f       	adc	r19, r17
    1c04:	59 01       	movw	r10, r18
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	a4 1a       	sub	r10, r20
    1c0a:	b1 08       	sbc	r11, r1
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	7f ef       	ldi	r23, 0xFF	; 255
    1c12:	78 0f       	add	r23, r24
    1c14:	6e 0d       	add	r22, r14
    1c16:	7f 1d       	adc	r23, r15
    1c18:	84 e4       	ldi	r24, 0x44	; 68
    1c1a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1c1e:	b8 01       	movw	r22, r16
    1c20:	85 e4       	ldi	r24, 0x45	; 69
    1c22:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1c26:	b5 01       	movw	r22, r10
    1c28:	86 e4       	ldi	r24, 0x46	; 70
    1c2a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1c2e:	b7 01       	movw	r22, r14
    1c30:	8e e4       	ldi	r24, 0x4E	; 78
    1c32:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1c36:	b8 01       	movw	r22, r16
    1c38:	8f e4       	ldi	r24, 0x4F	; 79
    1c3a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1c3e:	60 e7       	ldi	r22, 0x70	; 112
    1c40:	70 e6       	ldi	r23, 0x60	; 96
    1c42:	81 e1       	ldi	r24, 0x11	; 17
    1c44:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1c48:	82 e2       	ldi	r24, 0x22	; 34
    1c4a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    1c4e:	85 b3       	in	r24, 0x15	; 21
    1c50:	80 68       	ori	r24, 0x80	; 128
    1c52:	85 bb       	out	0x15, r24	; 21
    1c54:	2a 81       	ldd	r18, Y+2	; 0x02
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	32 2f       	mov	r19, r18
    1c5a:	22 27       	eor	r18, r18
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2b       	or	r18, r24
    1c60:	48 81       	ld	r20, Y
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	54 2f       	mov	r21, r20
    1c66:	44 27       	eor	r20, r20
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	48 2b       	or	r20, r24
    1c6c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c6e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c70:	6c 0d       	add	r22, r12
    1c72:	7d 1d       	adc	r23, r13
    1c74:	88 89       	ldd	r24, Y+16	; 0x10
    1c76:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c78:	89 9f       	mul	r24, r25
    1c7a:	c0 01       	movw	r24, r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	99 23       	and	r25, r25
    1c80:	0c f4       	brge	.+2      	; 0x1c84 <_ZN4UTFT9printCharEhii+0xe6>
    1c82:	07 96       	adiw	r24, 0x07	; 7
    1c84:	95 95       	asr	r25
    1c86:	87 95       	ror	r24
    1c88:	95 95       	asr	r25
    1c8a:	87 95       	ror	r24
    1c8c:	95 95       	asr	r25
    1c8e:	87 95       	ror	r24
    1c90:	0e 94 66 06 	call	0xccc	; 0xccc <fastbitmap_1bit>
    1c94:	6f c0       	rjmp	.+222    	; 0x1d74 <_ZN4UTFT9printCharEhii+0x1d6>
    1c96:	29 89       	ldd	r18, Y+17	; 0x11
    1c98:	86 2f       	mov	r24, r22
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	82 1b       	sub	r24, r18
    1c9e:	91 09       	sbc	r25, r1
    1ca0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ca2:	54 2f       	mov	r21, r20
    1ca4:	56 95       	lsr	r21
    1ca6:	56 95       	lsr	r21
    1ca8:	56 95       	lsr	r21
    1caa:	28 89       	ldd	r18, Y+16	; 0x10
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	52 9f       	mul	r21, r18
    1cb0:	b0 01       	movw	r22, r0
    1cb2:	53 9f       	mul	r21, r19
    1cb4:	70 0d       	add	r23, r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	86 9f       	mul	r24, r22
    1cba:	60 01       	movw	r12, r0
    1cbc:	87 9f       	mul	r24, r23
    1cbe:	d0 0c       	add	r13, r0
    1cc0:	96 9f       	mul	r25, r22
    1cc2:	d0 0c       	add	r13, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	c8 0e       	add	r12, r24
    1cca:	d1 1c       	adc	r13, r1
    1ccc:	c7 01       	movw	r24, r14
    1cce:	84 0f       	add	r24, r20
    1cd0:	91 1d       	adc	r25, r1
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	20 0f       	add	r18, r16
    1cd6:	31 1f       	adc	r19, r17
    1cd8:	49 85       	ldd	r20, Y+9	; 0x09
    1cda:	5a 85       	ldd	r21, Y+10	; 0x0a
    1cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce0:	5a 01       	movw	r10, r20
    1ce2:	ae 18       	sub	r10, r14
    1ce4:	bf 08       	sbc	r11, r15
    1ce6:	7a 01       	movw	r14, r20
    1ce8:	e8 1a       	sub	r14, r24
    1cea:	f9 0a       	sbc	r15, r25
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	7f ef       	ldi	r23, 0xFF	; 255
    1cf2:	72 0f       	add	r23, r18
    1cf4:	60 0f       	add	r22, r16
    1cf6:	71 1f       	adc	r23, r17
    1cf8:	84 e4       	ldi	r24, 0x44	; 68
    1cfa:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1cfe:	b7 01       	movw	r22, r14
    1d00:	85 e4       	ldi	r24, 0x45	; 69
    1d02:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1d06:	b5 01       	movw	r22, r10
    1d08:	86 e4       	ldi	r24, 0x46	; 70
    1d0a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1d0e:	b8 01       	movw	r22, r16
    1d10:	8e e4       	ldi	r24, 0x4E	; 78
    1d12:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1d16:	b5 01       	movw	r22, r10
    1d18:	8f e4       	ldi	r24, 0x4F	; 79
    1d1a:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1d1e:	68 e5       	ldi	r22, 0x58	; 88
    1d20:	70 e6       	ldi	r23, 0x60	; 96
    1d22:	81 e1       	ldi	r24, 0x11	; 17
    1d24:	0e 94 52 07 	call	0xea4	; 0xea4 <LCD_Write_COM_DATA>
    1d28:	82 e2       	ldi	r24, 0x22	; 34
    1d2a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LCD_Write_COM>
    1d2e:	85 b3       	in	r24, 0x15	; 21
    1d30:	80 68       	ori	r24, 0x80	; 128
    1d32:	85 bb       	out	0x15, r24	; 21
    1d34:	2a 81       	ldd	r18, Y+2	; 0x02
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	32 2f       	mov	r19, r18
    1d3a:	22 27       	eor	r18, r18
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2b       	or	r18, r24
    1d40:	48 81       	ld	r20, Y
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	54 2f       	mov	r21, r20
    1d46:	44 27       	eor	r20, r20
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	48 2b       	or	r20, r24
    1d4c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d4e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d50:	6c 0d       	add	r22, r12
    1d52:	7d 1d       	adc	r23, r13
    1d54:	88 89       	ldd	r24, Y+16	; 0x10
    1d56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d58:	89 9f       	mul	r24, r25
    1d5a:	c0 01       	movw	r24, r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	99 23       	and	r25, r25
    1d60:	0c f4       	brge	.+2      	; 0x1d64 <_ZN4UTFT9printCharEhii+0x1c6>
    1d62:	07 96       	adiw	r24, 0x07	; 7
    1d64:	95 95       	asr	r25
    1d66:	87 95       	ror	r24
    1d68:	95 95       	asr	r25
    1d6a:	87 95       	ror	r24
    1d6c:	95 95       	asr	r25
    1d6e:	87 95       	ror	r24
    1d70:	0e 94 66 06 	call	0xccc	; 0xccc <fastbitmap_1bit>
    1d74:	85 b3       	in	r24, 0x15	; 21
    1d76:	81 60       	ori	r24, 0x01	; 1
    1d78:	85 bb       	out	0x15, r24	; 21
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	df 90       	pop	r13
    1d88:	cf 90       	pop	r12
    1d8a:	bf 90       	pop	r11
    1d8c:	af 90       	pop	r10
    1d8e:	08 95       	ret

00001d90 <_ZN4UTFT10rotateCharEhiiii>:
    1d90:	2f 92       	push	r2
    1d92:	3f 92       	push	r3
    1d94:	4f 92       	push	r4
    1d96:	5f 92       	push	r5
    1d98:	6f 92       	push	r6
    1d9a:	7f 92       	push	r7
    1d9c:	8f 92       	push	r8
    1d9e:	9f 92       	push	r9
    1da0:	af 92       	push	r10
    1da2:	bf 92       	push	r11
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	6b 97       	sbiw	r28, 0x1b	; 27
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	5c 01       	movw	r10, r24
    1dc6:	69 83       	std	Y+1, r22	; 0x01
    1dc8:	3a 01       	movw	r6, r20
    1dca:	49 01       	movw	r8, r18
    1dcc:	1f 8b       	std	Y+23, r17	; 0x17
    1dce:	0e 8b       	std	Y+22, r16	; 0x16
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	ff 0c       	add	r15, r15
    1dd4:	88 0b       	sbc	r24, r24
    1dd6:	99 0b       	sbc	r25, r25
    1dd8:	0e 94 56 13 	call	0x26ac	; 0x26ac <__floatsisf>
    1ddc:	29 e2       	ldi	r18, 0x29	; 41
    1dde:	3c e5       	ldi	r19, 0x5C	; 92
    1de0:	4f e8       	ldi	r20, 0x8F	; 143
    1de2:	5c e3       	ldi	r21, 0x3C	; 60
    1de4:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
    1de8:	69 8b       	std	Y+17, r22	; 0x11
    1dea:	7a 8b       	std	Y+18, r23	; 0x12
    1dec:	8b 8b       	std	Y+19, r24	; 0x13
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	85 b3       	in	r24, 0x15	; 21
    1df2:	8e 7f       	andi	r24, 0xFE	; 254
    1df4:	85 bb       	out	0x15, r24	; 21
    1df6:	d5 01       	movw	r26, r10
    1df8:	51 96       	adiw	r26, 0x11	; 17
    1dfa:	8c 91       	ld	r24, X
    1dfc:	b9 81       	ldd	r27, Y+1	; 0x01
    1dfe:	2b 2f       	mov	r18, r27
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	28 1b       	sub	r18, r24
    1e04:	31 09       	sbc	r19, r1
    1e06:	f5 01       	movw	r30, r10
    1e08:	87 85       	ldd	r24, Z+15	; 0x0f
    1e0a:	86 95       	lsr	r24
    1e0c:	86 95       	lsr	r24
    1e0e:	86 95       	lsr	r24
    1e10:	90 89       	ldd	r25, Z+16	; 0x10
    1e12:	89 9f       	mul	r24, r25
    1e14:	c0 01       	movw	r24, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	28 9f       	mul	r18, r24
    1e1a:	a0 01       	movw	r20, r0
    1e1c:	29 9f       	mul	r18, r25
    1e1e:	50 0d       	add	r21, r0
    1e20:	38 9f       	mul	r19, r24
    1e22:	50 0d       	add	r21, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	9a 01       	movw	r18, r20
    1e28:	2c 5f       	subi	r18, 0xFC	; 252
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	39 8f       	std	Y+25, r19	; 0x19
    1e2e:	28 8f       	std	Y+24, r18	; 0x18
    1e30:	1d 8a       	std	Y+21, r1	; 0x15
    1e32:	d5 01       	movw	r26, r10
    1e34:	50 96       	adiw	r26, 0x10	; 16
    1e36:	8c 91       	ld	r24, X
    1e38:	bd 89       	ldd	r27, Y+21	; 0x15
    1e3a:	b8 17       	cp	r27, r24
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <_ZN4UTFT10rotateCharEhiiii+0xb0>
    1e3e:	fb c0       	rjmp	.+502    	; 0x2036 <_ZN4UTFT10rotateCharEhiiii+0x2a6>
    1e40:	41 2c       	mov	r4, r1
    1e42:	51 2c       	mov	r5, r1
    1e44:	f5 01       	movw	r30, r10
    1e46:	87 85       	ldd	r24, Z+15	; 0x0f
    1e48:	86 95       	lsr	r24
    1e4a:	86 95       	lsr	r24
    1e4c:	86 95       	lsr	r24
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	42 16       	cp	r4, r18
    1e54:	53 06       	cpc	r5, r19
    1e56:	0c f0       	brlt	.+2      	; 0x1e5a <_ZN4UTFT10rotateCharEhiiii+0xca>
    1e58:	e4 c0       	rjmp	.+456    	; 0x2022 <_ZN4UTFT10rotateCharEhiiii+0x292>
    1e5a:	05 84       	ldd	r0, Z+13	; 0x0d
    1e5c:	f6 85       	ldd	r31, Z+14	; 0x0e
    1e5e:	e0 2d       	mov	r30, r0
    1e60:	88 8d       	ldd	r24, Y+24	; 0x18
    1e62:	99 8d       	ldd	r25, Y+25	; 0x19
    1e64:	84 0d       	add	r24, r4
    1e66:	95 1d       	adc	r25, r5
    1e68:	e8 0f       	add	r30, r24
    1e6a:	f9 1f       	adc	r31, r25
    1e6c:	24 90       	lpm	r2, Z
    1e6e:	31 2c       	mov	r3, r1
    1e70:	3a 8e       	std	Y+26, r3	; 0x1a
    1e72:	2b 8e       	std	Y+27, r2	; 0x1b
    1e74:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e76:	f8 30       	cpi	r31, 0x08	; 8
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <_ZN4UTFT10rotateCharEhiiii+0xec>
    1e7a:	cf c0       	rjmp	.+414    	; 0x201a <_ZN4UTFT10rotateCharEhiiii+0x28a>
    1e7c:	2f 2e       	mov	r2, r31
    1e7e:	31 2c       	mov	r3, r1
    1e80:	b2 01       	movw	r22, r4
    1e82:	66 0f       	add	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	66 0f       	add	r22, r22
    1e88:	77 1f       	adc	r23, r23
    1e8a:	66 0f       	add	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	62 0d       	add	r22, r2
    1e90:	73 1d       	adc	r23, r3
    1e92:	d5 01       	movw	r26, r10
    1e94:	1f 96       	adiw	r26, 0x0f	; 15
    1e96:	2c 91       	ld	r18, X
    1e98:	ee 89       	ldd	r30, Y+22	; 0x16
    1e9a:	ff 89       	ldd	r31, Y+23	; 0x17
    1e9c:	2e 9f       	mul	r18, r30
    1e9e:	c0 01       	movw	r24, r0
    1ea0:	2f 9f       	mul	r18, r31
    1ea2:	90 0d       	add	r25, r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	68 0f       	add	r22, r24
    1ea8:	79 1f       	adc	r23, r25
    1eaa:	07 2e       	mov	r0, r23
    1eac:	00 0c       	add	r0, r0
    1eae:	88 0b       	sbc	r24, r24
    1eb0:	99 0b       	sbc	r25, r25
    1eb2:	0e 94 56 13 	call	0x26ac	; 0x26ac <__floatsisf>
    1eb6:	69 83       	std	Y+1, r22	; 0x01
    1eb8:	7a 83       	std	Y+2, r23	; 0x02
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	69 89       	ldd	r22, Y+17	; 0x11
    1ec0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec6:	0e 94 a7 12 	call	0x254e	; 0x254e <cos>
    1eca:	6d 83       	std	Y+5, r22	; 0x05
    1ecc:	7e 83       	std	Y+6, r23	; 0x06
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	69 81       	ldd	r22, Y+1	; 0x01
    1ed8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
    1ee2:	6b 01       	movw	r12, r22
    1ee4:	7c 01       	movw	r14, r24
    1ee6:	fd 89       	ldd	r31, Y+21	; 0x15
    1ee8:	6f 2f       	mov	r22, r31
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 56 13 	call	0x26ac	; 0x26ac <__floatsisf>
    1ef4:	69 87       	std	Y+9, r22	; 0x09
    1ef6:	7a 87       	std	Y+10, r23	; 0x0a
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
    1efa:	9c 87       	std	Y+12, r25	; 0x0c
    1efc:	69 89       	ldd	r22, Y+17	; 0x11
    1efe:	7a 89       	ldd	r23, Y+18	; 0x12
    1f00:	8b 89       	ldd	r24, Y+19	; 0x13
    1f02:	9c 89       	ldd	r25, Y+20	; 0x14
    1f04:	0e 94 b2 14 	call	0x2964	; 0x2964 <sin>
    1f08:	6d 87       	std	Y+13, r22	; 0x0d
    1f0a:	7e 87       	std	Y+14, r23	; 0x0e
    1f0c:	8f 87       	std	Y+15, r24	; 0x0f
    1f0e:	98 8b       	std	Y+16, r25	; 0x10
    1f10:	9b 01       	movw	r18, r22
    1f12:	ac 01       	movw	r20, r24
    1f14:	69 85       	ldd	r22, Y+9	; 0x09
    1f16:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1c:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	c7 01       	movw	r24, r14
    1f26:	b6 01       	movw	r22, r12
    1f28:	0e 94 35 12 	call	0x246a	; 0x246a <__subsf3>
    1f2c:	6b 01       	movw	r12, r22
    1f2e:	7c 01       	movw	r14, r24
    1f30:	b3 01       	movw	r22, r6
    1f32:	07 2c       	mov	r0, r7
    1f34:	00 0c       	add	r0, r0
    1f36:	88 0b       	sbc	r24, r24
    1f38:	99 0b       	sbc	r25, r25
    1f3a:	0e 94 56 13 	call	0x26ac	; 0x26ac <__floatsisf>
    1f3e:	a7 01       	movw	r20, r14
    1f40:	96 01       	movw	r18, r12
    1f42:	0e 94 36 12 	call	0x246c	; 0x246c <__addsf3>
    1f46:	0e 94 1e 13 	call	0x263c	; 0x263c <__fixsfsi>
    1f4a:	6b 01       	movw	r12, r22
    1f4c:	7c 01       	movw	r14, r24
    1f4e:	29 85       	ldd	r18, Y+9	; 0x09
    1f50:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f52:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f54:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f56:	6d 81       	ldd	r22, Y+5	; 0x05
    1f58:	7e 81       	ldd	r23, Y+6	; 0x06
    1f5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5c:	98 85       	ldd	r25, Y+8	; 0x08
    1f5e:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
    1f62:	6d 83       	std	Y+5, r22	; 0x05
    1f64:	7e 83       	std	Y+6, r23	; 0x06
    1f66:	8f 83       	std	Y+7, r24	; 0x07
    1f68:	98 87       	std	Y+8, r25	; 0x08
    1f6a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f6c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f6e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f70:	58 89       	ldd	r21, Y+16	; 0x10
    1f72:	69 81       	ldd	r22, Y+1	; 0x01
    1f74:	7a 81       	ldd	r23, Y+2	; 0x02
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
    1f7e:	9b 01       	movw	r18, r22
    1f80:	ac 01       	movw	r20, r24
    1f82:	6d 81       	ldd	r22, Y+5	; 0x05
    1f84:	7e 81       	ldd	r23, Y+6	; 0x06
    1f86:	8f 81       	ldd	r24, Y+7	; 0x07
    1f88:	98 85       	ldd	r25, Y+8	; 0x08
    1f8a:	0e 94 36 12 	call	0x246c	; 0x246c <__addsf3>
    1f8e:	69 83       	std	Y+1, r22	; 0x01
    1f90:	7a 83       	std	Y+2, r23	; 0x02
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	b4 01       	movw	r22, r8
    1f98:	09 2c       	mov	r0, r9
    1f9a:	00 0c       	add	r0, r0
    1f9c:	88 0b       	sbc	r24, r24
    1f9e:	99 0b       	sbc	r25, r25
    1fa0:	0e 94 56 13 	call	0x26ac	; 0x26ac <__floatsisf>
    1fa4:	29 81       	ldd	r18, Y+1	; 0x01
    1fa6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fa8:	4b 81       	ldd	r20, Y+3	; 0x03
    1faa:	5c 81       	ldd	r21, Y+4	; 0x04
    1fac:	0e 94 36 12 	call	0x246c	; 0x246c <__addsf3>
    1fb0:	0e 94 1e 13 	call	0x263c	; 0x263c <__fixsfsi>
    1fb4:	8b 01       	movw	r16, r22
    1fb6:	0f 5f       	subi	r16, 0xFF	; 255
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	96 01       	movw	r18, r12
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	ab 01       	movw	r20, r22
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	c5 01       	movw	r24, r10
    1fc6:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN4UTFT5setXYEjjjj>
    1fca:	27 e0       	ldi	r18, 0x07	; 7
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	22 19       	sub	r18, r2
    1fd0:	33 09       	sbc	r19, r3
    1fd2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1fd4:	84 2f       	mov	r24, r20
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <_ZN4UTFT10rotateCharEhiiii+0x24e>
    1fda:	95 95       	asr	r25
    1fdc:	87 95       	ror	r24
    1fde:	2a 95       	dec	r18
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <_ZN4UTFT10rotateCharEhiiii+0x24a>
    1fe2:	80 ff       	sbrs	r24, 0
    1fe4:	0c c0       	rjmp	.+24     	; 0x1ffe <_ZN4UTFT10rotateCharEhiiii+0x26e>
    1fe6:	d5 01       	movw	r26, r10
    1fe8:	6c 91       	ld	r22, X
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	76 2f       	mov	r23, r22
    1fee:	66 27       	eor	r22, r22
    1ff0:	11 96       	adiw	r26, 0x01	; 1
    1ff2:	8c 91       	ld	r24, X
    1ff4:	68 2b       	or	r22, r24
    1ff6:	c5 01       	movw	r24, r10
    1ff8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN4UTFT8setPixelEj>
    1ffc:	0a c0       	rjmp	.+20     	; 0x2012 <_ZN4UTFT10rotateCharEhiiii+0x282>
    1ffe:	f5 01       	movw	r30, r10
    2000:	62 81       	ldd	r22, Z+2	; 0x02
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	76 2f       	mov	r23, r22
    2006:	66 27       	eor	r22, r22
    2008:	83 81       	ldd	r24, Z+3	; 0x03
    200a:	68 2b       	or	r22, r24
    200c:	c5 01       	movw	r24, r10
    200e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN4UTFT8setPixelEj>
    2012:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2014:	ff 5f       	subi	r31, 0xFF	; 255
    2016:	fa 8f       	std	Y+26, r31	; 0x1a
    2018:	2d cf       	rjmp	.-422    	; 0x1e74 <_ZN4UTFT10rotateCharEhiiii+0xe4>
    201a:	2f ef       	ldi	r18, 0xFF	; 255
    201c:	42 1a       	sub	r4, r18
    201e:	52 0a       	sbc	r5, r18
    2020:	11 cf       	rjmp	.-478    	; 0x1e44 <_ZN4UTFT10rotateCharEhiiii+0xb4>
    2022:	48 8d       	ldd	r20, Y+24	; 0x18
    2024:	59 8d       	ldd	r21, Y+25	; 0x19
    2026:	48 0f       	add	r20, r24
    2028:	51 1d       	adc	r21, r1
    202a:	59 8f       	std	Y+25, r21	; 0x19
    202c:	48 8f       	std	Y+24, r20	; 0x18
    202e:	5d 89       	ldd	r21, Y+21	; 0x15
    2030:	5f 5f       	subi	r21, 0xFF	; 255
    2032:	5d 8b       	std	Y+21, r21	; 0x15
    2034:	fe ce       	rjmp	.-516    	; 0x1e32 <_ZN4UTFT10rotateCharEhiiii+0xa2>
    2036:	85 b3       	in	r24, 0x15	; 21
    2038:	81 60       	ori	r24, 0x01	; 1
    203a:	85 bb       	out	0x15, r24	; 21
    203c:	6b 96       	adiw	r28, 0x1b	; 27
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	bf 90       	pop	r11
    205a:	af 90       	pop	r10
    205c:	9f 90       	pop	r9
    205e:	8f 90       	pop	r8
    2060:	7f 90       	pop	r7
    2062:	6f 90       	pop	r6
    2064:	5f 90       	pop	r5
    2066:	4f 90       	pop	r4
    2068:	3f 90       	pop	r3
    206a:	2f 90       	pop	r2
    206c:	08 95       	ret

0000206e <_ZN4UTFT5printEPKciii>:
    206e:	2f 92       	push	r2
    2070:	3f 92       	push	r3
    2072:	4f 92       	push	r4
    2074:	5f 92       	push	r5
    2076:	6f 92       	push	r6
    2078:	7f 92       	push	r7
    207a:	8f 92       	push	r8
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	ec 01       	movw	r28, r24
    2094:	fb 01       	movw	r30, r22
    2096:	5a 01       	movw	r10, r20
    2098:	29 01       	movw	r4, r18
    209a:	68 01       	movw	r12, r16
    209c:	db 01       	movw	r26, r22
    209e:	0d 90       	ld	r0, X+
    20a0:	00 20       	and	r0, r0
    20a2:	e9 f7       	brne	.-6      	; 0x209e <_ZN4UTFT5printEPKciii+0x30>
    20a4:	11 97       	sbiw	r26, 0x01	; 1
    20a6:	a6 1b       	sub	r26, r22
    20a8:	b7 0b       	sbc	r27, r23
    20aa:	4d 01       	movw	r8, r26
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	81 11       	cpse	r24, r1
    20b0:	3e c0       	rjmp	.+124    	; 0x212e <_ZN4UTFT5printEPKciii+0xc0>
    20b2:	4f 30       	cpi	r20, 0x0F	; 15
    20b4:	57 42       	sbci	r21, 0x27	; 39
    20b6:	81 f4       	brne	.+32     	; 0x20d8 <_ZN4UTFT5printEPKciii+0x6a>
    20b8:	4d 81       	ldd	r20, Y+5	; 0x05
    20ba:	5e 81       	ldd	r21, Y+6	; 0x06
    20bc:	6f 81       	ldd	r22, Y+7	; 0x07
    20be:	78 85       	ldd	r23, Y+8	; 0x08
    20c0:	2f 85       	ldd	r18, Y+15	; 0x0f
    20c2:	2a 9f       	mul	r18, r26
    20c4:	c0 01       	movw	r24, r0
    20c6:	2b 9f       	mul	r18, r27
    20c8:	90 0d       	add	r25, r0
    20ca:	11 24       	eor	r1, r1
    20cc:	48 1b       	sub	r20, r24
    20ce:	59 0b       	sbc	r21, r25
    20d0:	5a 01       	movw	r10, r20
    20d2:	1f ef       	ldi	r17, 0xFF	; 255
    20d4:	a1 1a       	sub	r10, r17
    20d6:	b1 0a       	sbc	r11, r17
    20d8:	2e e0       	ldi	r18, 0x0E	; 14
    20da:	a2 16       	cp	r10, r18
    20dc:	27 e2       	ldi	r18, 0x27	; 39
    20de:	b2 06       	cpc	r11, r18
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <_ZN4UTFT5printEPKciii+0x76>
    20e2:	61 c0       	rjmp	.+194    	; 0x21a6 <_ZN4UTFT5printEPKciii+0x138>
    20e4:	4d 81       	ldd	r20, Y+5	; 0x05
    20e6:	5e 81       	ldd	r21, Y+6	; 0x06
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	4f 5f       	subi	r20, 0xFF	; 255
    20ee:	5f 4f       	sbci	r21, 0xFF	; 255
    20f0:	6f 4f       	sbci	r22, 0xFF	; 255
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    20f6:	2a 9f       	mul	r18, r26
    20f8:	c0 01       	movw	r24, r0
    20fa:	2b 9f       	mul	r18, r27
    20fc:	90 0d       	add	r25, r0
    20fe:	11 24       	eor	r1, r1
    2100:	09 2e       	mov	r0, r25
    2102:	00 0c       	add	r0, r0
    2104:	aa 0b       	sbc	r26, r26
    2106:	bb 0b       	sbc	r27, r27
    2108:	8a 01       	movw	r16, r20
    210a:	9b 01       	movw	r18, r22
    210c:	08 1b       	sub	r16, r24
    210e:	19 0b       	sbc	r17, r25
    2110:	2a 0b       	sbc	r18, r26
    2112:	3b 0b       	sbc	r19, r27
    2114:	b9 01       	movw	r22, r18
    2116:	a8 01       	movw	r20, r16
    2118:	22 f4       	brpl	.+8      	; 0x2122 <_ZN4UTFT5printEPKciii+0xb4>
    211a:	4f 5f       	subi	r20, 0xFF	; 255
    211c:	5f 4f       	sbci	r21, 0xFF	; 255
    211e:	6f 4f       	sbci	r22, 0xFF	; 255
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	75 95       	asr	r23
    2124:	67 95       	ror	r22
    2126:	57 95       	ror	r21
    2128:	47 95       	ror	r20
    212a:	5a 01       	movw	r10, r20
    212c:	3c c0       	rjmp	.+120    	; 0x21a6 <_ZN4UTFT5printEPKciii+0x138>
    212e:	4f 30       	cpi	r20, 0x0F	; 15
    2130:	57 42       	sbci	r21, 0x27	; 39
    2132:	81 f4       	brne	.+32     	; 0x2154 <_ZN4UTFT5printEPKciii+0xe6>
    2134:	49 85       	ldd	r20, Y+9	; 0x09
    2136:	5a 85       	ldd	r21, Y+10	; 0x0a
    2138:	6b 85       	ldd	r22, Y+11	; 0x0b
    213a:	7c 85       	ldd	r23, Y+12	; 0x0c
    213c:	2f 85       	ldd	r18, Y+15	; 0x0f
    213e:	2a 9f       	mul	r18, r26
    2140:	c0 01       	movw	r24, r0
    2142:	2b 9f       	mul	r18, r27
    2144:	90 0d       	add	r25, r0
    2146:	11 24       	eor	r1, r1
    2148:	48 1b       	sub	r20, r24
    214a:	59 0b       	sbc	r21, r25
    214c:	5a 01       	movw	r10, r20
    214e:	2f ef       	ldi	r18, 0xFF	; 255
    2150:	a2 1a       	sub	r10, r18
    2152:	b2 0a       	sbc	r11, r18
    2154:	3e e0       	ldi	r19, 0x0E	; 14
    2156:	a3 16       	cp	r10, r19
    2158:	37 e2       	ldi	r19, 0x27	; 39
    215a:	b3 06       	cpc	r11, r19
    215c:	21 f5       	brne	.+72     	; 0x21a6 <_ZN4UTFT5printEPKciii+0x138>
    215e:	49 85       	ldd	r20, Y+9	; 0x09
    2160:	5a 85       	ldd	r21, Y+10	; 0x0a
    2162:	6b 85       	ldd	r22, Y+11	; 0x0b
    2164:	7c 85       	ldd	r23, Y+12	; 0x0c
    2166:	4f 5f       	subi	r20, 0xFF	; 255
    2168:	5f 4f       	sbci	r21, 0xFF	; 255
    216a:	6f 4f       	sbci	r22, 0xFF	; 255
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2170:	2a 9f       	mul	r18, r26
    2172:	c0 01       	movw	r24, r0
    2174:	2b 9f       	mul	r18, r27
    2176:	90 0d       	add	r25, r0
    2178:	11 24       	eor	r1, r1
    217a:	09 2e       	mov	r0, r25
    217c:	00 0c       	add	r0, r0
    217e:	aa 0b       	sbc	r26, r26
    2180:	bb 0b       	sbc	r27, r27
    2182:	8a 01       	movw	r16, r20
    2184:	9b 01       	movw	r18, r22
    2186:	08 1b       	sub	r16, r24
    2188:	19 0b       	sbc	r17, r25
    218a:	2a 0b       	sbc	r18, r26
    218c:	3b 0b       	sbc	r19, r27
    218e:	b9 01       	movw	r22, r18
    2190:	a8 01       	movw	r20, r16
    2192:	22 f4       	brpl	.+8      	; 0x219c <_ZN4UTFT5printEPKciii+0x12e>
    2194:	4f 5f       	subi	r20, 0xFF	; 255
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	6f 4f       	sbci	r22, 0xFF	; 255
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	75 95       	asr	r23
    219e:	67 95       	ror	r22
    21a0:	57 95       	ror	r21
    21a2:	47 95       	ror	r20
    21a4:	5a 01       	movw	r10, r20
    21a6:	61 2c       	mov	r6, r1
    21a8:	71 2c       	mov	r7, r1
    21aa:	68 14       	cp	r6, r8
    21ac:	79 04       	cpc	r7, r9
    21ae:	3c f5       	brge	.+78     	; 0x21fe <_ZN4UTFT5printEPKciii+0x190>
    21b0:	c1 14       	cp	r12, r1
    21b2:	d1 04       	cpc	r13, r1
    21b4:	99 f4       	brne	.+38     	; 0x21dc <_ZN4UTFT5printEPKciii+0x16e>
    21b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b8:	86 9d       	mul	r24, r6
    21ba:	a0 01       	movw	r20, r0
    21bc:	87 9d       	mul	r24, r7
    21be:	50 0d       	add	r21, r0
    21c0:	11 24       	eor	r1, r1
    21c2:	4a 0d       	add	r20, r10
    21c4:	5b 1d       	adc	r21, r11
    21c6:	1f 01       	movw	r2, r30
    21c8:	1f ef       	ldi	r17, 0xFF	; 255
    21ca:	21 1a       	sub	r2, r17
    21cc:	31 0a       	sbc	r3, r17
    21ce:	60 81       	ld	r22, Z
    21d0:	92 01       	movw	r18, r4
    21d2:	ce 01       	movw	r24, r28
    21d4:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN4UTFT9printCharEhii>
    21d8:	f1 01       	movw	r30, r2
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <_ZN4UTFT5printEPKciii+0x188>
    21dc:	1f 01       	movw	r2, r30
    21de:	2f ef       	ldi	r18, 0xFF	; 255
    21e0:	22 1a       	sub	r2, r18
    21e2:	32 0a       	sbc	r3, r18
    21e4:	60 81       	ld	r22, Z
    21e6:	76 01       	movw	r14, r12
    21e8:	83 01       	movw	r16, r6
    21ea:	92 01       	movw	r18, r4
    21ec:	a5 01       	movw	r20, r10
    21ee:	ce 01       	movw	r24, r28
    21f0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4UTFT10rotateCharEhiiii>
    21f4:	f1 01       	movw	r30, r2
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	63 1a       	sub	r6, r19
    21fa:	73 0a       	sbc	r7, r19
    21fc:	d6 cf       	rjmp	.-84     	; 0x21aa <_ZN4UTFT5printEPKciii+0x13c>
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	ff 90       	pop	r15
    2208:	ef 90       	pop	r14
    220a:	df 90       	pop	r13
    220c:	cf 90       	pop	r12
    220e:	bf 90       	pop	r11
    2210:	af 90       	pop	r10
    2212:	9f 90       	pop	r9
    2214:	8f 90       	pop	r8
    2216:	7f 90       	pop	r7
    2218:	6f 90       	pop	r6
    221a:	5f 90       	pop	r5
    221c:	4f 90       	pop	r4
    221e:	3f 90       	pop	r3
    2220:	2f 90       	pop	r2
    2222:	08 95       	ret

00002224 <_ZN4UTFT9printNumIEliiic>:
    2224:	2f 92       	push	r2
    2226:	3f 92       	push	r3
    2228:	4f 92       	push	r4
    222a:	5f 92       	push	r5
    222c:	6f 92       	push	r6
    222e:	7f 92       	push	r7
    2230:	8f 92       	push	r8
    2232:	9f 92       	push	r9
    2234:	af 92       	push	r10
    2236:	bf 92       	push	r11
    2238:	cf 92       	push	r12
    223a:	df 92       	push	r13
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	e8 97       	sbiw	r28, 0x38	; 56
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	1c 01       	movw	r2, r24
    225a:	4a 01       	movw	r8, r20
    225c:	5b 01       	movw	r10, r22
    225e:	3e ab       	std	Y+54, r19	; 0x36
    2260:	2d ab       	std	Y+53, r18	; 0x35
    2262:	18 af       	std	Y+56, r17	; 0x38
    2264:	0f ab       	std	Y+55, r16	; 0x37
    2266:	41 15       	cp	r20, r1
    2268:	51 05       	cpc	r21, r1
    226a:	61 05       	cpc	r22, r1
    226c:	71 05       	cpc	r23, r1
    226e:	49 f5       	brne	.+82     	; 0x22c2 <_ZN4UTFT9printNumIEliiic+0x9e>
    2270:	e1 14       	cp	r14, r1
    2272:	f1 04       	cpc	r15, r1
    2274:	11 f1       	breq	.+68     	; 0x22ba <_ZN4UTFT9printNumIEliiic+0x96>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	97 01       	movw	r18, r14
    227c:	21 50       	subi	r18, 0x01	; 1
    227e:	31 09       	sbc	r19, r1
    2280:	82 17       	cp	r24, r18
    2282:	93 07       	cpc	r25, r19
    2284:	4c f4       	brge	.+18     	; 0x2298 <_ZN4UTFT9printNumIEliiic+0x74>
    2286:	ea e1       	ldi	r30, 0x1A	; 26
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	ec 0f       	add	r30, r28
    228c:	fd 1f       	adc	r31, r29
    228e:	e8 0f       	add	r30, r24
    2290:	f9 1f       	adc	r31, r25
    2292:	c0 82       	st	Z, r12
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	f1 cf       	rjmp	.-30     	; 0x227a <_ZN4UTFT9printNumIEliiic+0x56>
    2298:	ea e1       	ldi	r30, 0x1A	; 26
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	ec 0f       	add	r30, r28
    229e:	fd 1f       	adc	r31, r29
    22a0:	e8 0f       	add	r30, r24
    22a2:	f9 1f       	adc	r31, r25
    22a4:	20 e3       	ldi	r18, 0x30	; 48
    22a6:	20 83       	st	Z, r18
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	ea e1       	ldi	r30, 0x1A	; 26
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	ec 0f       	add	r30, r28
    22b0:	fd 1f       	adc	r31, r29
    22b2:	e8 0f       	add	r30, r24
    22b4:	f9 1f       	adc	r31, r25
    22b6:	10 82       	st	Z, r1
    22b8:	98 c0       	rjmp	.+304    	; 0x23ea <_ZN4UTFT9printNumIEliiic+0x1c6>
    22ba:	80 e3       	ldi	r24, 0x30	; 48
    22bc:	8a 8f       	std	Y+26, r24	; 0x1a
    22be:	1b 8e       	std	Y+27, r1	; 0x1b
    22c0:	94 c0       	rjmp	.+296    	; 0x23ea <_ZN4UTFT9printNumIEliiic+0x1c6>
    22c2:	77 23       	and	r23, r23
    22c4:	5c f4       	brge	.+22     	; 0x22dc <_ZN4UTFT9printNumIEliiic+0xb8>
    22c6:	b0 94       	com	r11
    22c8:	a0 94       	com	r10
    22ca:	90 94       	com	r9
    22cc:	80 94       	com	r8
    22ce:	81 1c       	adc	r8, r1
    22d0:	91 1c       	adc	r9, r1
    22d2:	a1 1c       	adc	r10, r1
    22d4:	b1 1c       	adc	r11, r1
    22d6:	dd 24       	eor	r13, r13
    22d8:	d3 94       	inc	r13
    22da:	01 c0       	rjmp	.+2      	; 0x22de <_ZN4UTFT9printNumIEliiic+0xba>
    22dc:	d1 2c       	mov	r13, r1
    22de:	00 e0       	ldi	r16, 0x00	; 0
    22e0:	10 e0       	ldi	r17, 0x00	; 0
    22e2:	18 14       	cp	r1, r8
    22e4:	19 04       	cpc	r1, r9
    22e6:	1a 04       	cpc	r1, r10
    22e8:	1b 04       	cpc	r1, r11
    22ea:	3c f5       	brge	.+78     	; 0x233a <_ZN4UTFT9printNumIEliiic+0x116>
    22ec:	0f 2e       	mov	r0, r31
    22ee:	fa e0       	ldi	r31, 0x0A	; 10
    22f0:	4f 2e       	mov	r4, r31
    22f2:	51 2c       	mov	r5, r1
    22f4:	61 2c       	mov	r6, r1
    22f6:	71 2c       	mov	r7, r1
    22f8:	f0 2d       	mov	r31, r0
    22fa:	c5 01       	movw	r24, r10
    22fc:	b4 01       	movw	r22, r8
    22fe:	a3 01       	movw	r20, r6
    2300:	92 01       	movw	r18, r4
    2302:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__divmodsi4>
    2306:	e1 e0       	ldi	r30, 0x01	; 1
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	ec 0f       	add	r30, r28
    230c:	fd 1f       	adc	r31, r29
    230e:	e0 0f       	add	r30, r16
    2310:	f1 1f       	adc	r31, r17
    2312:	20 e3       	ldi	r18, 0x30	; 48
    2314:	26 0f       	add	r18, r22
    2316:	20 83       	st	Z, r18
    2318:	0f 5f       	subi	r16, 0xFF	; 255
    231a:	1f 4f       	sbci	r17, 0xFF	; 255
    231c:	a5 01       	movw	r20, r10
    231e:	94 01       	movw	r18, r8
    2320:	26 1b       	sub	r18, r22
    2322:	37 0b       	sbc	r19, r23
    2324:	48 0b       	sbc	r20, r24
    2326:	59 0b       	sbc	r21, r25
    2328:	ca 01       	movw	r24, r20
    232a:	b9 01       	movw	r22, r18
    232c:	a3 01       	movw	r20, r6
    232e:	92 01       	movw	r18, r4
    2330:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__divmodsi4>
    2334:	49 01       	movw	r8, r18
    2336:	5a 01       	movw	r10, r20
    2338:	d4 cf       	rjmp	.-88     	; 0x22e2 <_ZN4UTFT9printNumIEliiic+0xbe>
    233a:	e1 e0       	ldi	r30, 0x01	; 1
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	ec 0f       	add	r30, r28
    2340:	fd 1f       	adc	r31, r29
    2342:	e0 0f       	add	r30, r16
    2344:	f1 1f       	adc	r31, r17
    2346:	10 82       	st	Z, r1
    2348:	dd 20       	and	r13, r13
    234a:	11 f0       	breq	.+4      	; 0x2350 <_ZN4UTFT9printNumIEliiic+0x12c>
    234c:	8d e2       	ldi	r24, 0x2D	; 45
    234e:	8a 8f       	std	Y+26, r24	; 0x1a
    2350:	2d 2d       	mov	r18, r13
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	b8 01       	movw	r22, r16
    2356:	62 0f       	add	r22, r18
    2358:	73 1f       	adc	r23, r19
    235a:	6e 15       	cp	r22, r14
    235c:	7f 05       	cpc	r23, r15
    235e:	d4 f4       	brge	.+52     	; 0x2394 <_ZN4UTFT9printNumIEliiic+0x170>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	f7 01       	movw	r30, r14
    236a:	e0 1b       	sub	r30, r16
    236c:	f1 0b       	sbc	r31, r17
    236e:	e2 1b       	sub	r30, r18
    2370:	f3 0b       	sbc	r31, r19
    2372:	8e 17       	cp	r24, r30
    2374:	9f 07       	cpc	r25, r31
    2376:	84 f4       	brge	.+32     	; 0x2398 <_ZN4UTFT9printNumIEliiic+0x174>
    2378:	fc 01       	movw	r30, r24
    237a:	e2 0f       	add	r30, r18
    237c:	f3 1f       	adc	r31, r19
    237e:	aa e1       	ldi	r26, 0x1A	; 26
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	ac 0f       	add	r26, r28
    2384:	bd 1f       	adc	r27, r29
    2386:	ea 0f       	add	r30, r26
    2388:	fb 1f       	adc	r31, r27
    238a:	c0 82       	st	Z, r12
    238c:	4f 5f       	subi	r20, 0xFF	; 255
    238e:	5f 4f       	sbci	r21, 0xFF	; 255
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	ea cf       	rjmp	.-44     	; 0x2368 <_ZN4UTFT9printNumIEliiic+0x144>
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	a0 17       	cp	r26, r16
    239e:	b1 07       	cpc	r27, r17
    23a0:	dc f4       	brge	.+54     	; 0x23d8 <_ZN4UTFT9printNumIEliiic+0x1b4>
    23a2:	fd 01       	movw	r30, r26
    23a4:	e2 0f       	add	r30, r18
    23a6:	f3 1f       	adc	r31, r19
    23a8:	6f 01       	movw	r12, r30
    23aa:	c4 0e       	add	r12, r20
    23ac:	d5 1e       	adc	r13, r21
    23ae:	c8 01       	movw	r24, r16
    23b0:	8a 1b       	sub	r24, r26
    23b2:	9b 0b       	sbc	r25, r27
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	e1 e0       	ldi	r30, 0x01	; 1
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	ec 0f       	add	r30, r28
    23bc:	fd 1f       	adc	r31, r29
    23be:	8e 0f       	add	r24, r30
    23c0:	9f 1f       	adc	r25, r31
    23c2:	fc 01       	movw	r30, r24
    23c4:	80 81       	ld	r24, Z
    23c6:	ea e1       	ldi	r30, 0x1A	; 26
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	ec 0f       	add	r30, r28
    23cc:	fd 1f       	adc	r31, r29
    23ce:	ec 0d       	add	r30, r12
    23d0:	fd 1d       	adc	r31, r13
    23d2:	80 83       	st	Z, r24
    23d4:	11 96       	adiw	r26, 0x01	; 1
    23d6:	e2 cf       	rjmp	.-60     	; 0x239c <_ZN4UTFT9printNumIEliiic+0x178>
    23d8:	46 0f       	add	r20, r22
    23da:	57 1f       	adc	r21, r23
    23dc:	ea e1       	ldi	r30, 0x1A	; 26
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	ec 0f       	add	r30, r28
    23e2:	fd 1f       	adc	r31, r29
    23e4:	e4 0f       	add	r30, r20
    23e6:	f5 1f       	adc	r31, r21
    23e8:	10 82       	st	Z, r1
    23ea:	00 e0       	ldi	r16, 0x00	; 0
    23ec:	10 e0       	ldi	r17, 0x00	; 0
    23ee:	2f a9       	ldd	r18, Y+55	; 0x37
    23f0:	38 ad       	ldd	r19, Y+56	; 0x38
    23f2:	4d a9       	ldd	r20, Y+53	; 0x35
    23f4:	5e a9       	ldd	r21, Y+54	; 0x36
    23f6:	be 01       	movw	r22, r28
    23f8:	66 5e       	subi	r22, 0xE6	; 230
    23fa:	7f 4f       	sbci	r23, 0xFF	; 255
    23fc:	c1 01       	movw	r24, r2
    23fe:	0e 94 37 10 	call	0x206e	; 0x206e <_ZN4UTFT5printEPKciii>
    2402:	e8 96       	adiw	r28, 0x38	; 56
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	7f 90       	pop	r7
    2428:	6f 90       	pop	r6
    242a:	5f 90       	pop	r5
    242c:	4f 90       	pop	r4
    242e:	3f 90       	pop	r3
    2430:	2f 90       	pop	r2
    2432:	08 95       	ret

00002434 <_ZN4UTFT7setFontEPKh>:

void UTFT::setFont(const uint8_t* font)
{
    2434:	dc 01       	movw	r26, r24
	cfont.font=font;
    2436:	1e 96       	adiw	r26, 0x0e	; 14
    2438:	7c 93       	st	X, r23
    243a:	6e 93       	st	-X, r22
    243c:	1d 97       	sbiw	r26, 0x0d	; 13
	cfont.x_size=fontbyte(0);
    243e:	fb 01       	movw	r30, r22
    2440:	84 91       	lpm	r24, Z
    2442:	1f 96       	adiw	r26, 0x0f	; 15
    2444:	8c 93       	st	X, r24
    2446:	1f 97       	sbiw	r26, 0x0f	; 15
	cfont.y_size=fontbyte(1);
    2448:	31 96       	adiw	r30, 0x01	; 1
    244a:	e4 91       	lpm	r30, Z
    244c:	50 96       	adiw	r26, 0x10	; 16
    244e:	ec 93       	st	X, r30
    2450:	50 97       	sbiw	r26, 0x10	; 16
	cfont.offset=fontbyte(2);
    2452:	fb 01       	movw	r30, r22
    2454:	32 96       	adiw	r30, 0x02	; 2
    2456:	e4 91       	lpm	r30, Z
    2458:	51 96       	adiw	r26, 0x11	; 17
    245a:	ec 93       	st	X, r30
    245c:	51 97       	sbiw	r26, 0x11	; 17
	cfont.numchars=fontbyte(3);
    245e:	fb 01       	movw	r30, r22
    2460:	33 96       	adiw	r30, 0x03	; 3
    2462:	64 91       	lpm	r22, Z
    2464:	52 96       	adiw	r26, 0x12	; 18
    2466:	6c 93       	st	X, r22
    2468:	08 95       	ret

0000246a <__subsf3>:
    246a:	50 58       	subi	r21, 0x80	; 128

0000246c <__addsf3>:
    246c:	bb 27       	eor	r27, r27
    246e:	aa 27       	eor	r26, r26
    2470:	0e 94 4d 12 	call	0x249a	; 0x249a <__addsf3x>
    2474:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__fp_round>
    2478:	0e 94 be 13 	call	0x277c	; 0x277c <__fp_pscA>
    247c:	38 f0       	brcs	.+14     	; 0x248c <__addsf3+0x20>
    247e:	0e 94 c5 13 	call	0x278a	; 0x278a <__fp_pscB>
    2482:	20 f0       	brcs	.+8      	; 0x248c <__addsf3+0x20>
    2484:	39 f4       	brne	.+14     	; 0x2494 <__addsf3+0x28>
    2486:	9f 3f       	cpi	r25, 0xFF	; 255
    2488:	19 f4       	brne	.+6      	; 0x2490 <__addsf3+0x24>
    248a:	26 f4       	brtc	.+8      	; 0x2494 <__addsf3+0x28>
    248c:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__fp_nan>
    2490:	0e f4       	brtc	.+2      	; 0x2494 <__addsf3+0x28>
    2492:	e0 95       	com	r30
    2494:	e7 fb       	bst	r30, 7
    2496:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_inf>

0000249a <__addsf3x>:
    249a:	e9 2f       	mov	r30, r25
    249c:	0e 94 1c 14 	call	0x2838	; 0x2838 <__fp_split3>
    24a0:	58 f3       	brcs	.-42     	; 0x2478 <__addsf3+0xc>
    24a2:	ba 17       	cp	r27, r26
    24a4:	62 07       	cpc	r22, r18
    24a6:	73 07       	cpc	r23, r19
    24a8:	84 07       	cpc	r24, r20
    24aa:	95 07       	cpc	r25, r21
    24ac:	20 f0       	brcs	.+8      	; 0x24b6 <__addsf3x+0x1c>
    24ae:	79 f4       	brne	.+30     	; 0x24ce <__addsf3x+0x34>
    24b0:	a6 f5       	brtc	.+104    	; 0x251a <__addsf3x+0x80>
    24b2:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__fp_zero>
    24b6:	0e f4       	brtc	.+2      	; 0x24ba <__addsf3x+0x20>
    24b8:	e0 95       	com	r30
    24ba:	0b 2e       	mov	r0, r27
    24bc:	ba 2f       	mov	r27, r26
    24be:	a0 2d       	mov	r26, r0
    24c0:	0b 01       	movw	r0, r22
    24c2:	b9 01       	movw	r22, r18
    24c4:	90 01       	movw	r18, r0
    24c6:	0c 01       	movw	r0, r24
    24c8:	ca 01       	movw	r24, r20
    24ca:	a0 01       	movw	r20, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	ff 27       	eor	r31, r31
    24d0:	59 1b       	sub	r21, r25
    24d2:	99 f0       	breq	.+38     	; 0x24fa <__addsf3x+0x60>
    24d4:	59 3f       	cpi	r21, 0xF9	; 249
    24d6:	50 f4       	brcc	.+20     	; 0x24ec <__addsf3x+0x52>
    24d8:	50 3e       	cpi	r21, 0xE0	; 224
    24da:	68 f1       	brcs	.+90     	; 0x2536 <__addsf3x+0x9c>
    24dc:	1a 16       	cp	r1, r26
    24de:	f0 40       	sbci	r31, 0x00	; 0
    24e0:	a2 2f       	mov	r26, r18
    24e2:	23 2f       	mov	r18, r19
    24e4:	34 2f       	mov	r19, r20
    24e6:	44 27       	eor	r20, r20
    24e8:	58 5f       	subi	r21, 0xF8	; 248
    24ea:	f3 cf       	rjmp	.-26     	; 0x24d2 <__addsf3x+0x38>
    24ec:	46 95       	lsr	r20
    24ee:	37 95       	ror	r19
    24f0:	27 95       	ror	r18
    24f2:	a7 95       	ror	r26
    24f4:	f0 40       	sbci	r31, 0x00	; 0
    24f6:	53 95       	inc	r21
    24f8:	c9 f7       	brne	.-14     	; 0x24ec <__addsf3x+0x52>
    24fa:	7e f4       	brtc	.+30     	; 0x251a <__addsf3x+0x80>
    24fc:	1f 16       	cp	r1, r31
    24fe:	ba 0b       	sbc	r27, r26
    2500:	62 0b       	sbc	r22, r18
    2502:	73 0b       	sbc	r23, r19
    2504:	84 0b       	sbc	r24, r20
    2506:	ba f0       	brmi	.+46     	; 0x2536 <__addsf3x+0x9c>
    2508:	91 50       	subi	r25, 0x01	; 1
    250a:	a1 f0       	breq	.+40     	; 0x2534 <__addsf3x+0x9a>
    250c:	ff 0f       	add	r31, r31
    250e:	bb 1f       	adc	r27, r27
    2510:	66 1f       	adc	r22, r22
    2512:	77 1f       	adc	r23, r23
    2514:	88 1f       	adc	r24, r24
    2516:	c2 f7       	brpl	.-16     	; 0x2508 <__addsf3x+0x6e>
    2518:	0e c0       	rjmp	.+28     	; 0x2536 <__addsf3x+0x9c>
    251a:	ba 0f       	add	r27, r26
    251c:	62 1f       	adc	r22, r18
    251e:	73 1f       	adc	r23, r19
    2520:	84 1f       	adc	r24, r20
    2522:	48 f4       	brcc	.+18     	; 0x2536 <__addsf3x+0x9c>
    2524:	87 95       	ror	r24
    2526:	77 95       	ror	r23
    2528:	67 95       	ror	r22
    252a:	b7 95       	ror	r27
    252c:	f7 95       	ror	r31
    252e:	9e 3f       	cpi	r25, 0xFE	; 254
    2530:	08 f0       	brcs	.+2      	; 0x2534 <__addsf3x+0x9a>
    2532:	b0 cf       	rjmp	.-160    	; 0x2494 <__addsf3+0x28>
    2534:	93 95       	inc	r25
    2536:	88 0f       	add	r24, r24
    2538:	08 f0       	brcs	.+2      	; 0x253c <__addsf3x+0xa2>
    253a:	99 27       	eor	r25, r25
    253c:	ee 0f       	add	r30, r30
    253e:	97 95       	ror	r25
    2540:	87 95       	ror	r24
    2542:	08 95       	ret

00002544 <__cmpsf2>:
    2544:	0e 94 91 13 	call	0x2722	; 0x2722 <__fp_cmp>
    2548:	08 f4       	brcc	.+2      	; 0x254c <__cmpsf2+0x8>
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	08 95       	ret

0000254e <cos>:
    254e:	0e 94 ce 13 	call	0x279c	; 0x279c <__fp_rempio2>
    2552:	e3 95       	inc	r30
    2554:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__fp_sinus>

00002558 <__divsf3>:
    2558:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divsf3x>
    255c:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__fp_round>
    2560:	0e 94 c5 13 	call	0x278a	; 0x278a <__fp_pscB>
    2564:	58 f0       	brcs	.+22     	; 0x257c <__divsf3+0x24>
    2566:	0e 94 be 13 	call	0x277c	; 0x277c <__fp_pscA>
    256a:	40 f0       	brcs	.+16     	; 0x257c <__divsf3+0x24>
    256c:	29 f4       	brne	.+10     	; 0x2578 <__divsf3+0x20>
    256e:	5f 3f       	cpi	r21, 0xFF	; 255
    2570:	29 f0       	breq	.+10     	; 0x257c <__divsf3+0x24>
    2572:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_inf>
    2576:	51 11       	cpse	r21, r1
    2578:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__fp_szero>
    257c:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__fp_nan>

00002580 <__divsf3x>:
    2580:	0e 94 1c 14 	call	0x2838	; 0x2838 <__fp_split3>
    2584:	68 f3       	brcs	.-38     	; 0x2560 <__divsf3+0x8>

00002586 <__divsf3_pse>:
    2586:	99 23       	and	r25, r25
    2588:	b1 f3       	breq	.-20     	; 0x2576 <__divsf3+0x1e>
    258a:	55 23       	and	r21, r21
    258c:	91 f3       	breq	.-28     	; 0x2572 <__divsf3+0x1a>
    258e:	95 1b       	sub	r25, r21
    2590:	55 0b       	sbc	r21, r21
    2592:	bb 27       	eor	r27, r27
    2594:	aa 27       	eor	r26, r26
    2596:	62 17       	cp	r22, r18
    2598:	73 07       	cpc	r23, r19
    259a:	84 07       	cpc	r24, r20
    259c:	38 f0       	brcs	.+14     	; 0x25ac <__divsf3_pse+0x26>
    259e:	9f 5f       	subi	r25, 0xFF	; 255
    25a0:	5f 4f       	sbci	r21, 0xFF	; 255
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	44 1f       	adc	r20, r20
    25a8:	aa 1f       	adc	r26, r26
    25aa:	a9 f3       	breq	.-22     	; 0x2596 <__divsf3_pse+0x10>
    25ac:	35 d0       	rcall	.+106    	; 0x2618 <__divsf3_pse+0x92>
    25ae:	0e 2e       	mov	r0, r30
    25b0:	3a f0       	brmi	.+14     	; 0x25c0 <__divsf3_pse+0x3a>
    25b2:	e0 e8       	ldi	r30, 0x80	; 128
    25b4:	32 d0       	rcall	.+100    	; 0x261a <__divsf3_pse+0x94>
    25b6:	91 50       	subi	r25, 0x01	; 1
    25b8:	50 40       	sbci	r21, 0x00	; 0
    25ba:	e6 95       	lsr	r30
    25bc:	00 1c       	adc	r0, r0
    25be:	ca f7       	brpl	.-14     	; 0x25b2 <__divsf3_pse+0x2c>
    25c0:	2b d0       	rcall	.+86     	; 0x2618 <__divsf3_pse+0x92>
    25c2:	fe 2f       	mov	r31, r30
    25c4:	29 d0       	rcall	.+82     	; 0x2618 <__divsf3_pse+0x92>
    25c6:	66 0f       	add	r22, r22
    25c8:	77 1f       	adc	r23, r23
    25ca:	88 1f       	adc	r24, r24
    25cc:	bb 1f       	adc	r27, r27
    25ce:	26 17       	cp	r18, r22
    25d0:	37 07       	cpc	r19, r23
    25d2:	48 07       	cpc	r20, r24
    25d4:	ab 07       	cpc	r26, r27
    25d6:	b0 e8       	ldi	r27, 0x80	; 128
    25d8:	09 f0       	breq	.+2      	; 0x25dc <__divsf3_pse+0x56>
    25da:	bb 0b       	sbc	r27, r27
    25dc:	80 2d       	mov	r24, r0
    25de:	bf 01       	movw	r22, r30
    25e0:	ff 27       	eor	r31, r31
    25e2:	93 58       	subi	r25, 0x83	; 131
    25e4:	5f 4f       	sbci	r21, 0xFF	; 255
    25e6:	3a f0       	brmi	.+14     	; 0x25f6 <__divsf3_pse+0x70>
    25e8:	9e 3f       	cpi	r25, 0xFE	; 254
    25ea:	51 05       	cpc	r21, r1
    25ec:	78 f0       	brcs	.+30     	; 0x260c <__divsf3_pse+0x86>
    25ee:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_inf>
    25f2:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__fp_szero>
    25f6:	5f 3f       	cpi	r21, 0xFF	; 255
    25f8:	e4 f3       	brlt	.-8      	; 0x25f2 <__divsf3_pse+0x6c>
    25fa:	98 3e       	cpi	r25, 0xE8	; 232
    25fc:	d4 f3       	brlt	.-12     	; 0x25f2 <__divsf3_pse+0x6c>
    25fe:	86 95       	lsr	r24
    2600:	77 95       	ror	r23
    2602:	67 95       	ror	r22
    2604:	b7 95       	ror	r27
    2606:	f7 95       	ror	r31
    2608:	9f 5f       	subi	r25, 0xFF	; 255
    260a:	c9 f7       	brne	.-14     	; 0x25fe <__divsf3_pse+0x78>
    260c:	88 0f       	add	r24, r24
    260e:	91 1d       	adc	r25, r1
    2610:	96 95       	lsr	r25
    2612:	87 95       	ror	r24
    2614:	97 f9       	bld	r25, 7
    2616:	08 95       	ret
    2618:	e1 e0       	ldi	r30, 0x01	; 1
    261a:	66 0f       	add	r22, r22
    261c:	77 1f       	adc	r23, r23
    261e:	88 1f       	adc	r24, r24
    2620:	bb 1f       	adc	r27, r27
    2622:	62 17       	cp	r22, r18
    2624:	73 07       	cpc	r23, r19
    2626:	84 07       	cpc	r24, r20
    2628:	ba 07       	cpc	r27, r26
    262a:	20 f0       	brcs	.+8      	; 0x2634 <__divsf3_pse+0xae>
    262c:	62 1b       	sub	r22, r18
    262e:	73 0b       	sbc	r23, r19
    2630:	84 0b       	sbc	r24, r20
    2632:	ba 0b       	sbc	r27, r26
    2634:	ee 1f       	adc	r30, r30
    2636:	88 f7       	brcc	.-30     	; 0x261a <__divsf3_pse+0x94>
    2638:	e0 95       	com	r30
    263a:	08 95       	ret

0000263c <__fixsfsi>:
    263c:	0e 94 25 13 	call	0x264a	; 0x264a <__fixunssfsi>
    2640:	68 94       	set
    2642:	b1 11       	cpse	r27, r1
    2644:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__fp_szero>
    2648:	08 95       	ret

0000264a <__fixunssfsi>:
    264a:	0e 94 24 14 	call	0x2848	; 0x2848 <__fp_splitA>
    264e:	88 f0       	brcs	.+34     	; 0x2672 <__fixunssfsi+0x28>
    2650:	9f 57       	subi	r25, 0x7F	; 127
    2652:	98 f0       	brcs	.+38     	; 0x267a <__fixunssfsi+0x30>
    2654:	b9 2f       	mov	r27, r25
    2656:	99 27       	eor	r25, r25
    2658:	b7 51       	subi	r27, 0x17	; 23
    265a:	b0 f0       	brcs	.+44     	; 0x2688 <__fixunssfsi+0x3e>
    265c:	e1 f0       	breq	.+56     	; 0x2696 <__fixunssfsi+0x4c>
    265e:	66 0f       	add	r22, r22
    2660:	77 1f       	adc	r23, r23
    2662:	88 1f       	adc	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	1a f0       	brmi	.+6      	; 0x266e <__fixunssfsi+0x24>
    2668:	ba 95       	dec	r27
    266a:	c9 f7       	brne	.-14     	; 0x265e <__fixunssfsi+0x14>
    266c:	14 c0       	rjmp	.+40     	; 0x2696 <__fixunssfsi+0x4c>
    266e:	b1 30       	cpi	r27, 0x01	; 1
    2670:	91 f0       	breq	.+36     	; 0x2696 <__fixunssfsi+0x4c>
    2672:	0e 94 3e 14 	call	0x287c	; 0x287c <__fp_zero>
    2676:	b1 e0       	ldi	r27, 0x01	; 1
    2678:	08 95       	ret
    267a:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__fp_zero>
    267e:	67 2f       	mov	r22, r23
    2680:	78 2f       	mov	r23, r24
    2682:	88 27       	eor	r24, r24
    2684:	b8 5f       	subi	r27, 0xF8	; 248
    2686:	39 f0       	breq	.+14     	; 0x2696 <__fixunssfsi+0x4c>
    2688:	b9 3f       	cpi	r27, 0xF9	; 249
    268a:	cc f3       	brlt	.-14     	; 0x267e <__fixunssfsi+0x34>
    268c:	86 95       	lsr	r24
    268e:	77 95       	ror	r23
    2690:	67 95       	ror	r22
    2692:	b3 95       	inc	r27
    2694:	d9 f7       	brne	.-10     	; 0x268c <__fixunssfsi+0x42>
    2696:	3e f4       	brtc	.+14     	; 0x26a6 <__fixunssfsi+0x5c>
    2698:	90 95       	com	r25
    269a:	80 95       	com	r24
    269c:	70 95       	com	r23
    269e:	61 95       	neg	r22
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	8f 4f       	sbci	r24, 0xFF	; 255
    26a4:	9f 4f       	sbci	r25, 0xFF	; 255
    26a6:	08 95       	ret

000026a8 <__floatunsisf>:
    26a8:	e8 94       	clt
    26aa:	09 c0       	rjmp	.+18     	; 0x26be <__floatsisf+0x12>

000026ac <__floatsisf>:
    26ac:	97 fb       	bst	r25, 7
    26ae:	3e f4       	brtc	.+14     	; 0x26be <__floatsisf+0x12>
    26b0:	90 95       	com	r25
    26b2:	80 95       	com	r24
    26b4:	70 95       	com	r23
    26b6:	61 95       	neg	r22
    26b8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ba:	8f 4f       	sbci	r24, 0xFF	; 255
    26bc:	9f 4f       	sbci	r25, 0xFF	; 255
    26be:	99 23       	and	r25, r25
    26c0:	a9 f0       	breq	.+42     	; 0x26ec <__floatsisf+0x40>
    26c2:	f9 2f       	mov	r31, r25
    26c4:	96 e9       	ldi	r25, 0x96	; 150
    26c6:	bb 27       	eor	r27, r27
    26c8:	93 95       	inc	r25
    26ca:	f6 95       	lsr	r31
    26cc:	87 95       	ror	r24
    26ce:	77 95       	ror	r23
    26d0:	67 95       	ror	r22
    26d2:	b7 95       	ror	r27
    26d4:	f1 11       	cpse	r31, r1
    26d6:	f8 cf       	rjmp	.-16     	; 0x26c8 <__floatsisf+0x1c>
    26d8:	fa f4       	brpl	.+62     	; 0x2718 <__floatsisf+0x6c>
    26da:	bb 0f       	add	r27, r27
    26dc:	11 f4       	brne	.+4      	; 0x26e2 <__floatsisf+0x36>
    26de:	60 ff       	sbrs	r22, 0
    26e0:	1b c0       	rjmp	.+54     	; 0x2718 <__floatsisf+0x6c>
    26e2:	6f 5f       	subi	r22, 0xFF	; 255
    26e4:	7f 4f       	sbci	r23, 0xFF	; 255
    26e6:	8f 4f       	sbci	r24, 0xFF	; 255
    26e8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ea:	16 c0       	rjmp	.+44     	; 0x2718 <__floatsisf+0x6c>
    26ec:	88 23       	and	r24, r24
    26ee:	11 f0       	breq	.+4      	; 0x26f4 <__floatsisf+0x48>
    26f0:	96 e9       	ldi	r25, 0x96	; 150
    26f2:	11 c0       	rjmp	.+34     	; 0x2716 <__floatsisf+0x6a>
    26f4:	77 23       	and	r23, r23
    26f6:	21 f0       	breq	.+8      	; 0x2700 <__floatsisf+0x54>
    26f8:	9e e8       	ldi	r25, 0x8E	; 142
    26fa:	87 2f       	mov	r24, r23
    26fc:	76 2f       	mov	r23, r22
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <__floatsisf+0x5e>
    2700:	66 23       	and	r22, r22
    2702:	71 f0       	breq	.+28     	; 0x2720 <__floatsisf+0x74>
    2704:	96 e8       	ldi	r25, 0x86	; 134
    2706:	86 2f       	mov	r24, r22
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	2a f0       	brmi	.+10     	; 0x2718 <__floatsisf+0x6c>
    270e:	9a 95       	dec	r25
    2710:	66 0f       	add	r22, r22
    2712:	77 1f       	adc	r23, r23
    2714:	88 1f       	adc	r24, r24
    2716:	da f7       	brpl	.-10     	; 0x270e <__floatsisf+0x62>
    2718:	88 0f       	add	r24, r24
    271a:	96 95       	lsr	r25
    271c:	87 95       	ror	r24
    271e:	97 f9       	bld	r25, 7
    2720:	08 95       	ret

00002722 <__fp_cmp>:
    2722:	99 0f       	add	r25, r25
    2724:	00 08       	sbc	r0, r0
    2726:	55 0f       	add	r21, r21
    2728:	aa 0b       	sbc	r26, r26
    272a:	e0 e8       	ldi	r30, 0x80	; 128
    272c:	fe ef       	ldi	r31, 0xFE	; 254
    272e:	16 16       	cp	r1, r22
    2730:	17 06       	cpc	r1, r23
    2732:	e8 07       	cpc	r30, r24
    2734:	f9 07       	cpc	r31, r25
    2736:	c0 f0       	brcs	.+48     	; 0x2768 <__fp_cmp+0x46>
    2738:	12 16       	cp	r1, r18
    273a:	13 06       	cpc	r1, r19
    273c:	e4 07       	cpc	r30, r20
    273e:	f5 07       	cpc	r31, r21
    2740:	98 f0       	brcs	.+38     	; 0x2768 <__fp_cmp+0x46>
    2742:	62 1b       	sub	r22, r18
    2744:	73 0b       	sbc	r23, r19
    2746:	84 0b       	sbc	r24, r20
    2748:	95 0b       	sbc	r25, r21
    274a:	39 f4       	brne	.+14     	; 0x275a <__fp_cmp+0x38>
    274c:	0a 26       	eor	r0, r26
    274e:	61 f0       	breq	.+24     	; 0x2768 <__fp_cmp+0x46>
    2750:	23 2b       	or	r18, r19
    2752:	24 2b       	or	r18, r20
    2754:	25 2b       	or	r18, r21
    2756:	21 f4       	brne	.+8      	; 0x2760 <__fp_cmp+0x3e>
    2758:	08 95       	ret
    275a:	0a 26       	eor	r0, r26
    275c:	09 f4       	brne	.+2      	; 0x2760 <__fp_cmp+0x3e>
    275e:	a1 40       	sbci	r26, 0x01	; 1
    2760:	a6 95       	lsr	r26
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	81 1d       	adc	r24, r1
    2766:	81 1d       	adc	r24, r1
    2768:	08 95       	ret

0000276a <__fp_inf>:
    276a:	97 f9       	bld	r25, 7
    276c:	9f 67       	ori	r25, 0x7F	; 127
    276e:	80 e8       	ldi	r24, 0x80	; 128
    2770:	70 e0       	ldi	r23, 0x00	; 0
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	08 95       	ret

00002776 <__fp_nan>:
    2776:	9f ef       	ldi	r25, 0xFF	; 255
    2778:	80 ec       	ldi	r24, 0xC0	; 192
    277a:	08 95       	ret

0000277c <__fp_pscA>:
    277c:	00 24       	eor	r0, r0
    277e:	0a 94       	dec	r0
    2780:	16 16       	cp	r1, r22
    2782:	17 06       	cpc	r1, r23
    2784:	18 06       	cpc	r1, r24
    2786:	09 06       	cpc	r0, r25
    2788:	08 95       	ret

0000278a <__fp_pscB>:
    278a:	00 24       	eor	r0, r0
    278c:	0a 94       	dec	r0
    278e:	12 16       	cp	r1, r18
    2790:	13 06       	cpc	r1, r19
    2792:	14 06       	cpc	r1, r20
    2794:	05 06       	cpc	r0, r21
    2796:	08 95       	ret
    2798:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__fp_nan>

0000279c <__fp_rempio2>:
    279c:	0e 94 24 14 	call	0x2848	; 0x2848 <__fp_splitA>
    27a0:	d8 f3       	brcs	.-10     	; 0x2798 <__fp_pscB+0xe>
    27a2:	e8 94       	clt
    27a4:	e0 e0       	ldi	r30, 0x00	; 0
    27a6:	bb 27       	eor	r27, r27
    27a8:	9f 57       	subi	r25, 0x7F	; 127
    27aa:	f0 f0       	brcs	.+60     	; 0x27e8 <__fp_rempio2+0x4c>
    27ac:	2a ed       	ldi	r18, 0xDA	; 218
    27ae:	3f e0       	ldi	r19, 0x0F	; 15
    27b0:	49 ec       	ldi	r20, 0xC9	; 201
    27b2:	06 c0       	rjmp	.+12     	; 0x27c0 <__fp_rempio2+0x24>
    27b4:	ee 0f       	add	r30, r30
    27b6:	bb 0f       	add	r27, r27
    27b8:	66 1f       	adc	r22, r22
    27ba:	77 1f       	adc	r23, r23
    27bc:	88 1f       	adc	r24, r24
    27be:	28 f0       	brcs	.+10     	; 0x27ca <__fp_rempio2+0x2e>
    27c0:	b2 3a       	cpi	r27, 0xA2	; 162
    27c2:	62 07       	cpc	r22, r18
    27c4:	73 07       	cpc	r23, r19
    27c6:	84 07       	cpc	r24, r20
    27c8:	28 f0       	brcs	.+10     	; 0x27d4 <__fp_rempio2+0x38>
    27ca:	b2 5a       	subi	r27, 0xA2	; 162
    27cc:	62 0b       	sbc	r22, r18
    27ce:	73 0b       	sbc	r23, r19
    27d0:	84 0b       	sbc	r24, r20
    27d2:	e3 95       	inc	r30
    27d4:	9a 95       	dec	r25
    27d6:	72 f7       	brpl	.-36     	; 0x27b4 <__fp_rempio2+0x18>
    27d8:	80 38       	cpi	r24, 0x80	; 128
    27da:	30 f4       	brcc	.+12     	; 0x27e8 <__fp_rempio2+0x4c>
    27dc:	9a 95       	dec	r25
    27de:	bb 0f       	add	r27, r27
    27e0:	66 1f       	adc	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	88 1f       	adc	r24, r24
    27e6:	d2 f7       	brpl	.-12     	; 0x27dc <__fp_rempio2+0x40>
    27e8:	90 48       	sbci	r25, 0x80	; 128
    27ea:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__fp_mpack_finite>

000027ee <__fp_round>:
    27ee:	09 2e       	mov	r0, r25
    27f0:	03 94       	inc	r0
    27f2:	00 0c       	add	r0, r0
    27f4:	11 f4       	brne	.+4      	; 0x27fa <__fp_round+0xc>
    27f6:	88 23       	and	r24, r24
    27f8:	52 f0       	brmi	.+20     	; 0x280e <__fp_round+0x20>
    27fa:	bb 0f       	add	r27, r27
    27fc:	40 f4       	brcc	.+16     	; 0x280e <__fp_round+0x20>
    27fe:	bf 2b       	or	r27, r31
    2800:	11 f4       	brne	.+4      	; 0x2806 <__fp_round+0x18>
    2802:	60 ff       	sbrs	r22, 0
    2804:	04 c0       	rjmp	.+8      	; 0x280e <__fp_round+0x20>
    2806:	6f 5f       	subi	r22, 0xFF	; 255
    2808:	7f 4f       	sbci	r23, 0xFF	; 255
    280a:	8f 4f       	sbci	r24, 0xFF	; 255
    280c:	9f 4f       	sbci	r25, 0xFF	; 255
    280e:	08 95       	ret

00002810 <__fp_sinus>:
    2810:	ef 93       	push	r30
    2812:	e0 ff       	sbrs	r30, 0
    2814:	07 c0       	rjmp	.+14     	; 0x2824 <__fp_sinus+0x14>
    2816:	a2 ea       	ldi	r26, 0xA2	; 162
    2818:	2a ed       	ldi	r18, 0xDA	; 218
    281a:	3f e0       	ldi	r19, 0x0F	; 15
    281c:	49 ec       	ldi	r20, 0xC9	; 201
    281e:	5f eb       	ldi	r21, 0xBF	; 191
    2820:	0e 94 4d 12 	call	0x249a	; 0x249a <__addsf3x>
    2824:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__fp_round>
    2828:	0f 90       	pop	r0
    282a:	03 94       	inc	r0
    282c:	01 fc       	sbrc	r0, 1
    282e:	90 58       	subi	r25, 0x80	; 128
    2830:	e4 e7       	ldi	r30, 0x74	; 116
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__fp_powsodd>

00002838 <__fp_split3>:
    2838:	57 fd       	sbrc	r21, 7
    283a:	90 58       	subi	r25, 0x80	; 128
    283c:	44 0f       	add	r20, r20
    283e:	55 1f       	adc	r21, r21
    2840:	59 f0       	breq	.+22     	; 0x2858 <__fp_splitA+0x10>
    2842:	5f 3f       	cpi	r21, 0xFF	; 255
    2844:	71 f0       	breq	.+28     	; 0x2862 <__fp_splitA+0x1a>
    2846:	47 95       	ror	r20

00002848 <__fp_splitA>:
    2848:	88 0f       	add	r24, r24
    284a:	97 fb       	bst	r25, 7
    284c:	99 1f       	adc	r25, r25
    284e:	61 f0       	breq	.+24     	; 0x2868 <__fp_splitA+0x20>
    2850:	9f 3f       	cpi	r25, 0xFF	; 255
    2852:	79 f0       	breq	.+30     	; 0x2872 <__fp_splitA+0x2a>
    2854:	87 95       	ror	r24
    2856:	08 95       	ret
    2858:	12 16       	cp	r1, r18
    285a:	13 06       	cpc	r1, r19
    285c:	14 06       	cpc	r1, r20
    285e:	55 1f       	adc	r21, r21
    2860:	f2 cf       	rjmp	.-28     	; 0x2846 <__fp_split3+0xe>
    2862:	46 95       	lsr	r20
    2864:	f1 df       	rcall	.-30     	; 0x2848 <__fp_splitA>
    2866:	08 c0       	rjmp	.+16     	; 0x2878 <__fp_splitA+0x30>
    2868:	16 16       	cp	r1, r22
    286a:	17 06       	cpc	r1, r23
    286c:	18 06       	cpc	r1, r24
    286e:	99 1f       	adc	r25, r25
    2870:	f1 cf       	rjmp	.-30     	; 0x2854 <__fp_splitA+0xc>
    2872:	86 95       	lsr	r24
    2874:	71 05       	cpc	r23, r1
    2876:	61 05       	cpc	r22, r1
    2878:	08 94       	sec
    287a:	08 95       	ret

0000287c <__fp_zero>:
    287c:	e8 94       	clt

0000287e <__fp_szero>:
    287e:	bb 27       	eor	r27, r27
    2880:	66 27       	eor	r22, r22
    2882:	77 27       	eor	r23, r23
    2884:	cb 01       	movw	r24, r22
    2886:	97 f9       	bld	r25, 7
    2888:	08 95       	ret

0000288a <__mulsf3>:
    288a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__mulsf3x>
    288e:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__fp_round>
    2892:	0e 94 be 13 	call	0x277c	; 0x277c <__fp_pscA>
    2896:	38 f0       	brcs	.+14     	; 0x28a6 <__mulsf3+0x1c>
    2898:	0e 94 c5 13 	call	0x278a	; 0x278a <__fp_pscB>
    289c:	20 f0       	brcs	.+8      	; 0x28a6 <__mulsf3+0x1c>
    289e:	95 23       	and	r25, r21
    28a0:	11 f0       	breq	.+4      	; 0x28a6 <__mulsf3+0x1c>
    28a2:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_inf>
    28a6:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__fp_nan>
    28aa:	11 24       	eor	r1, r1
    28ac:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__fp_szero>

000028b0 <__mulsf3x>:
    28b0:	0e 94 1c 14 	call	0x2838	; 0x2838 <__fp_split3>
    28b4:	70 f3       	brcs	.-36     	; 0x2892 <__mulsf3+0x8>

000028b6 <__mulsf3_pse>:
    28b6:	95 9f       	mul	r25, r21
    28b8:	c1 f3       	breq	.-16     	; 0x28aa <__mulsf3+0x20>
    28ba:	95 0f       	add	r25, r21
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	55 1f       	adc	r21, r21
    28c0:	62 9f       	mul	r22, r18
    28c2:	f0 01       	movw	r30, r0
    28c4:	72 9f       	mul	r23, r18
    28c6:	bb 27       	eor	r27, r27
    28c8:	f0 0d       	add	r31, r0
    28ca:	b1 1d       	adc	r27, r1
    28cc:	63 9f       	mul	r22, r19
    28ce:	aa 27       	eor	r26, r26
    28d0:	f0 0d       	add	r31, r0
    28d2:	b1 1d       	adc	r27, r1
    28d4:	aa 1f       	adc	r26, r26
    28d6:	64 9f       	mul	r22, r20
    28d8:	66 27       	eor	r22, r22
    28da:	b0 0d       	add	r27, r0
    28dc:	a1 1d       	adc	r26, r1
    28de:	66 1f       	adc	r22, r22
    28e0:	82 9f       	mul	r24, r18
    28e2:	22 27       	eor	r18, r18
    28e4:	b0 0d       	add	r27, r0
    28e6:	a1 1d       	adc	r26, r1
    28e8:	62 1f       	adc	r22, r18
    28ea:	73 9f       	mul	r23, r19
    28ec:	b0 0d       	add	r27, r0
    28ee:	a1 1d       	adc	r26, r1
    28f0:	62 1f       	adc	r22, r18
    28f2:	83 9f       	mul	r24, r19
    28f4:	a0 0d       	add	r26, r0
    28f6:	61 1d       	adc	r22, r1
    28f8:	22 1f       	adc	r18, r18
    28fa:	74 9f       	mul	r23, r20
    28fc:	33 27       	eor	r19, r19
    28fe:	a0 0d       	add	r26, r0
    2900:	61 1d       	adc	r22, r1
    2902:	23 1f       	adc	r18, r19
    2904:	84 9f       	mul	r24, r20
    2906:	60 0d       	add	r22, r0
    2908:	21 1d       	adc	r18, r1
    290a:	82 2f       	mov	r24, r18
    290c:	76 2f       	mov	r23, r22
    290e:	6a 2f       	mov	r22, r26
    2910:	11 24       	eor	r1, r1
    2912:	9f 57       	subi	r25, 0x7F	; 127
    2914:	50 40       	sbci	r21, 0x00	; 0
    2916:	9a f0       	brmi	.+38     	; 0x293e <__mulsf3_pse+0x88>
    2918:	f1 f0       	breq	.+60     	; 0x2956 <__mulsf3_pse+0xa0>
    291a:	88 23       	and	r24, r24
    291c:	4a f0       	brmi	.+18     	; 0x2930 <__mulsf3_pse+0x7a>
    291e:	ee 0f       	add	r30, r30
    2920:	ff 1f       	adc	r31, r31
    2922:	bb 1f       	adc	r27, r27
    2924:	66 1f       	adc	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	88 1f       	adc	r24, r24
    292a:	91 50       	subi	r25, 0x01	; 1
    292c:	50 40       	sbci	r21, 0x00	; 0
    292e:	a9 f7       	brne	.-22     	; 0x291a <__mulsf3_pse+0x64>
    2930:	9e 3f       	cpi	r25, 0xFE	; 254
    2932:	51 05       	cpc	r21, r1
    2934:	80 f0       	brcs	.+32     	; 0x2956 <__mulsf3_pse+0xa0>
    2936:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_inf>
    293a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__fp_szero>
    293e:	5f 3f       	cpi	r21, 0xFF	; 255
    2940:	e4 f3       	brlt	.-8      	; 0x293a <__mulsf3_pse+0x84>
    2942:	98 3e       	cpi	r25, 0xE8	; 232
    2944:	d4 f3       	brlt	.-12     	; 0x293a <__mulsf3_pse+0x84>
    2946:	86 95       	lsr	r24
    2948:	77 95       	ror	r23
    294a:	67 95       	ror	r22
    294c:	b7 95       	ror	r27
    294e:	f7 95       	ror	r31
    2950:	e7 95       	ror	r30
    2952:	9f 5f       	subi	r25, 0xFF	; 255
    2954:	c1 f7       	brne	.-16     	; 0x2946 <__mulsf3_pse+0x90>
    2956:	fe 2b       	or	r31, r30
    2958:	88 0f       	add	r24, r24
    295a:	91 1d       	adc	r25, r1
    295c:	96 95       	lsr	r25
    295e:	87 95       	ror	r24
    2960:	97 f9       	bld	r25, 7
    2962:	08 95       	ret

00002964 <sin>:
    2964:	9f 93       	push	r25
    2966:	0e 94 ce 13 	call	0x279c	; 0x279c <__fp_rempio2>
    296a:	0f 90       	pop	r0
    296c:	07 fc       	sbrc	r0, 7
    296e:	ee 5f       	subi	r30, 0xFE	; 254
    2970:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__fp_sinus>

00002974 <__fp_mpack>:
    2974:	9f 3f       	cpi	r25, 0xFF	; 255
    2976:	31 f0       	breq	.+12     	; 0x2984 <__fp_mpack_finite+0xc>

00002978 <__fp_mpack_finite>:
    2978:	91 50       	subi	r25, 0x01	; 1
    297a:	20 f4       	brcc	.+8      	; 0x2984 <__fp_mpack_finite+0xc>
    297c:	87 95       	ror	r24
    297e:	77 95       	ror	r23
    2980:	67 95       	ror	r22
    2982:	b7 95       	ror	r27
    2984:	88 0f       	add	r24, r24
    2986:	91 1d       	adc	r25, r1
    2988:	96 95       	lsr	r25
    298a:	87 95       	ror	r24
    298c:	97 f9       	bld	r25, 7
    298e:	08 95       	ret

00002990 <__fp_powsodd>:
    2990:	9f 93       	push	r25
    2992:	8f 93       	push	r24
    2994:	7f 93       	push	r23
    2996:	6f 93       	push	r22
    2998:	ff 93       	push	r31
    299a:	ef 93       	push	r30
    299c:	9b 01       	movw	r18, r22
    299e:	ac 01       	movw	r20, r24
    29a0:	0e 94 45 14 	call	0x288a	; 0x288a <__mulsf3>
    29a4:	ef 91       	pop	r30
    29a6:	ff 91       	pop	r31
    29a8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__fp_powser>
    29ac:	2f 91       	pop	r18
    29ae:	3f 91       	pop	r19
    29b0:	4f 91       	pop	r20
    29b2:	5f 91       	pop	r21
    29b4:	0c 94 45 14 	jmp	0x288a	; 0x288a <__mulsf3>

000029b8 <__fp_powser>:
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	1f 93       	push	r17
    29be:	0f 93       	push	r16
    29c0:	ff 92       	push	r15
    29c2:	ef 92       	push	r14
    29c4:	df 92       	push	r13
    29c6:	7b 01       	movw	r14, r22
    29c8:	8c 01       	movw	r16, r24
    29ca:	68 94       	set
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <__fp_powser+0x22>
    29ce:	da 2e       	mov	r13, r26
    29d0:	ef 01       	movw	r28, r30
    29d2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__mulsf3x>
    29d6:	fe 01       	movw	r30, r28
    29d8:	e8 94       	clt
    29da:	a5 91       	lpm	r26, Z+
    29dc:	25 91       	lpm	r18, Z+
    29de:	35 91       	lpm	r19, Z+
    29e0:	45 91       	lpm	r20, Z+
    29e2:	55 91       	lpm	r21, Z+
    29e4:	a6 f3       	brts	.-24     	; 0x29ce <__fp_powser+0x16>
    29e6:	ef 01       	movw	r28, r30
    29e8:	0e 94 4d 12 	call	0x249a	; 0x249a <__addsf3x>
    29ec:	fe 01       	movw	r30, r28
    29ee:	97 01       	movw	r18, r14
    29f0:	a8 01       	movw	r20, r16
    29f2:	da 94       	dec	r13
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <__fp_powser+0x18>
    29f6:	df 90       	pop	r13
    29f8:	ef 90       	pop	r14
    29fa:	ff 90       	pop	r15
    29fc:	0f 91       	pop	r16
    29fe:	1f 91       	pop	r17
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <__mulsi3>:
    2a06:	db 01       	movw	r26, r22
    2a08:	8f 93       	push	r24
    2a0a:	9f 93       	push	r25
    2a0c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__muluhisi3>
    2a10:	bf 91       	pop	r27
    2a12:	af 91       	pop	r26
    2a14:	a2 9f       	mul	r26, r18
    2a16:	80 0d       	add	r24, r0
    2a18:	91 1d       	adc	r25, r1
    2a1a:	a3 9f       	mul	r26, r19
    2a1c:	90 0d       	add	r25, r0
    2a1e:	b2 9f       	mul	r27, r18
    2a20:	90 0d       	add	r25, r0
    2a22:	11 24       	eor	r1, r1
    2a24:	08 95       	ret

00002a26 <__udivmodsi4>:
    2a26:	a1 e2       	ldi	r26, 0x21	; 33
    2a28:	1a 2e       	mov	r1, r26
    2a2a:	aa 1b       	sub	r26, r26
    2a2c:	bb 1b       	sub	r27, r27
    2a2e:	fd 01       	movw	r30, r26
    2a30:	0d c0       	rjmp	.+26     	; 0x2a4c <__udivmodsi4_ep>

00002a32 <__udivmodsi4_loop>:
    2a32:	aa 1f       	adc	r26, r26
    2a34:	bb 1f       	adc	r27, r27
    2a36:	ee 1f       	adc	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	a2 17       	cp	r26, r18
    2a3c:	b3 07       	cpc	r27, r19
    2a3e:	e4 07       	cpc	r30, r20
    2a40:	f5 07       	cpc	r31, r21
    2a42:	20 f0       	brcs	.+8      	; 0x2a4c <__udivmodsi4_ep>
    2a44:	a2 1b       	sub	r26, r18
    2a46:	b3 0b       	sbc	r27, r19
    2a48:	e4 0b       	sbc	r30, r20
    2a4a:	f5 0b       	sbc	r31, r21

00002a4c <__udivmodsi4_ep>:
    2a4c:	66 1f       	adc	r22, r22
    2a4e:	77 1f       	adc	r23, r23
    2a50:	88 1f       	adc	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	1a 94       	dec	r1
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <__udivmodsi4_loop>
    2a58:	60 95       	com	r22
    2a5a:	70 95       	com	r23
    2a5c:	80 95       	com	r24
    2a5e:	90 95       	com	r25
    2a60:	9b 01       	movw	r18, r22
    2a62:	ac 01       	movw	r20, r24
    2a64:	bd 01       	movw	r22, r26
    2a66:	cf 01       	movw	r24, r30
    2a68:	08 95       	ret

00002a6a <__divmodsi4>:
    2a6a:	05 2e       	mov	r0, r21
    2a6c:	97 fb       	bst	r25, 7
    2a6e:	1e f4       	brtc	.+6      	; 0x2a76 <__divmodsi4+0xc>
    2a70:	00 94       	com	r0
    2a72:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__negsi2>
    2a76:	57 fd       	sbrc	r21, 7
    2a78:	07 d0       	rcall	.+14     	; 0x2a88 <__divmodsi4_neg2>
    2a7a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__udivmodsi4>
    2a7e:	07 fc       	sbrc	r0, 7
    2a80:	03 d0       	rcall	.+6      	; 0x2a88 <__divmodsi4_neg2>
    2a82:	4e f4       	brtc	.+18     	; 0x2a96 <__divmodsi4_exit>
    2a84:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__negsi2>

00002a88 <__divmodsi4_neg2>:
    2a88:	50 95       	com	r21
    2a8a:	40 95       	com	r20
    2a8c:	30 95       	com	r19
    2a8e:	21 95       	neg	r18
    2a90:	3f 4f       	sbci	r19, 0xFF	; 255
    2a92:	4f 4f       	sbci	r20, 0xFF	; 255
    2a94:	5f 4f       	sbci	r21, 0xFF	; 255

00002a96 <__divmodsi4_exit>:
    2a96:	08 95       	ret

00002a98 <__negsi2>:
    2a98:	90 95       	com	r25
    2a9a:	80 95       	com	r24
    2a9c:	70 95       	com	r23
    2a9e:	61 95       	neg	r22
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	08 95       	ret

00002aa8 <__tablejump2__>:
    2aa8:	ee 0f       	add	r30, r30
    2aaa:	ff 1f       	adc	r31, r31
    2aac:	05 90       	lpm	r0, Z+
    2aae:	f4 91       	lpm	r31, Z
    2ab0:	e0 2d       	mov	r30, r0
    2ab2:	09 94       	ijmp

00002ab4 <__muluhisi3>:
    2ab4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__umulhisi3>
    2ab8:	a5 9f       	mul	r26, r21
    2aba:	90 0d       	add	r25, r0
    2abc:	b4 9f       	mul	r27, r20
    2abe:	90 0d       	add	r25, r0
    2ac0:	a4 9f       	mul	r26, r20
    2ac2:	80 0d       	add	r24, r0
    2ac4:	91 1d       	adc	r25, r1
    2ac6:	11 24       	eor	r1, r1
    2ac8:	08 95       	ret

00002aca <__mulshisi3>:
    2aca:	b7 ff       	sbrs	r27, 7
    2acc:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__muluhisi3>

00002ad0 <__mulohisi3>:
    2ad0:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__muluhisi3>
    2ad4:	82 1b       	sub	r24, r18
    2ad6:	93 0b       	sbc	r25, r19
    2ad8:	08 95       	ret

00002ada <__umulhisi3>:
    2ada:	a2 9f       	mul	r26, r18
    2adc:	b0 01       	movw	r22, r0
    2ade:	b3 9f       	mul	r27, r19
    2ae0:	c0 01       	movw	r24, r0
    2ae2:	a3 9f       	mul	r26, r19
    2ae4:	70 0d       	add	r23, r0
    2ae6:	81 1d       	adc	r24, r1
    2ae8:	11 24       	eor	r1, r1
    2aea:	91 1d       	adc	r25, r1
    2aec:	b2 9f       	mul	r27, r18
    2aee:	70 0d       	add	r23, r0
    2af0:	81 1d       	adc	r24, r1
    2af2:	11 24       	eor	r1, r1
    2af4:	91 1d       	adc	r25, r1
    2af6:	08 95       	ret

00002af8 <do_rand>:
    2af8:	8f 92       	push	r8
    2afa:	9f 92       	push	r9
    2afc:	af 92       	push	r10
    2afe:	bf 92       	push	r11
    2b00:	cf 92       	push	r12
    2b02:	df 92       	push	r13
    2b04:	ef 92       	push	r14
    2b06:	ff 92       	push	r15
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	ec 01       	movw	r28, r24
    2b0e:	68 81       	ld	r22, Y
    2b10:	79 81       	ldd	r23, Y+1	; 0x01
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	61 15       	cp	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	81 05       	cpc	r24, r1
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	21 f4       	brne	.+8      	; 0x2b28 <do_rand+0x30>
    2b20:	64 e2       	ldi	r22, 0x24	; 36
    2b22:	79 ed       	ldi	r23, 0xD9	; 217
    2b24:	8b e5       	ldi	r24, 0x5B	; 91
    2b26:	97 e0       	ldi	r25, 0x07	; 7
    2b28:	2d e1       	ldi	r18, 0x1D	; 29
    2b2a:	33 ef       	ldi	r19, 0xF3	; 243
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__divmodsi4>
    2b34:	49 01       	movw	r8, r18
    2b36:	5a 01       	movw	r10, r20
    2b38:	9b 01       	movw	r18, r22
    2b3a:	ac 01       	movw	r20, r24
    2b3c:	a7 ea       	ldi	r26, 0xA7	; 167
    2b3e:	b1 e4       	ldi	r27, 0x41	; 65
    2b40:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__muluhisi3>
    2b44:	6b 01       	movw	r12, r22
    2b46:	7c 01       	movw	r14, r24
    2b48:	ac ee       	ldi	r26, 0xEC	; 236
    2b4a:	b4 ef       	ldi	r27, 0xF4	; 244
    2b4c:	a5 01       	movw	r20, r10
    2b4e:	94 01       	movw	r18, r8
    2b50:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__mulohisi3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	8c 0d       	add	r24, r12
    2b5a:	9d 1d       	adc	r25, r13
    2b5c:	ae 1d       	adc	r26, r14
    2b5e:	bf 1d       	adc	r27, r15
    2b60:	b7 ff       	sbrs	r27, 7
    2b62:	03 c0       	rjmp	.+6      	; 0x2b6a <do_rand+0x72>
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	a1 09       	sbc	r26, r1
    2b68:	b0 48       	sbci	r27, 0x80	; 128
    2b6a:	88 83       	st	Y, r24
    2b6c:	99 83       	std	Y+1, r25	; 0x01
    2b6e:	aa 83       	std	Y+2, r26	; 0x02
    2b70:	bb 83       	std	Y+3, r27	; 0x03
    2b72:	9f 77       	andi	r25, 0x7F	; 127
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	df 90       	pop	r13
    2b7e:	cf 90       	pop	r12
    2b80:	bf 90       	pop	r11
    2b82:	af 90       	pop	r10
    2b84:	9f 90       	pop	r9
    2b86:	8f 90       	pop	r8
    2b88:	08 95       	ret

00002b8a <rand_r>:
    2b8a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <do_rand>
    2b8e:	08 95       	ret

00002b90 <rand>:
    2b90:	80 e6       	ldi	r24, 0x60	; 96
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <do_rand>
    2b98:	08 95       	ret

00002b9a <srand>:
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2ba2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2ba6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    2baa:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    2bae:	08 95       	ret

00002bb0 <_exit>:
    2bb0:	f8 94       	cli

00002bb2 <__stop_program>:
    2bb2:	ff cf       	rjmp	.-2      	; 0x2bb2 <__stop_program>
